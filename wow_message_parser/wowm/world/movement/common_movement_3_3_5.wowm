#tag_all versions "3.3.5";

struct TransportInfo {
    PackedGuid guid;
    Vector3d position;
    f32 orientation;
    u32 timestamp;
    u8 seat;
}

flag MovementFlags : u32 {
    NONE                  = 0x00000000;
    FORWARD               = 0x00000001;
    BACKWARD              = 0x00000002;
    STRAFE_LEFT           = 0x00000004;
    STRAFE_RIGHT          = 0x00000008;
    LEFT                  = 0x00000010;
    RIGHT                 = 0x00000020;
    PITCH_UP              = 0x00000040;
    PITCH_DOWN            = 0x00000080;
    WALKING               = 0x00000100 {
        comment = "Walking";
    }
    ON_TRANSPORT           = 0x00000200 {
        comment = "AzerothCore: Used for flying on some creatures";
    }
    DISABLE_GRAVITY       = 0x00000400 {
        comment = "AzerothCore: Former MOVEMENTFLAG_LEVITATING. This is used when walking is not possible.";
    }
    ROOT                  = 0x00000800 {
        comment = "AzerothCore: Must not be set along with MOVEMENTFLAG_MASK_MOVING";
    }
    FALLING               = 0x00001000 {
        comment = "AzerothCore: damage dealt on that type of falling";
    }
    FALLING_FAR           = 0x00002000;
    PENDING_STOP          = 0x00004000;
    PENDING_STRAFE_STOP   = 0x00008000;
    PENDING_FORWARD       = 0x00010000;
    PENDING_BACKWARD      = 0x00020000;
    PENDING_STRAFE_LEFT   = 0x00040000;
    PENDING_STRAFE_RIGHT  = 0x00080000;
    PENDING_ROOT          = 0x00100000;
    SWIMMING              = 0x00200000 {
        comment = "AzerothCore: appears with fly flag also";
    }
    ASCENDING             = 0x00400000 {
        comment = "AzerothCore: press 'space' when flying";
    }
    DESCENDING            = 0x00800000;
    CAN_FLY               = 0x01000000 {
        comment = "AzerothCore: Appears when unit can fly AND also walk";
    }
    FLYING                = 0x02000000 {
        comment = "AzerothCore: unit is actually flying. pretty sure this is only used for players. creatures use disable_gravity";
    }
    SPLINE_ELEVATION      = 0x04000000 {
        comment = "AzerothCore: used for flight paths";
    }
    SPLINE_ENABLED        = 0x08000000 {
        comment = "AzerothCore: used for flight paths";
    }
    WATERWALKING          = 0x10000000 {
        comment = "AzerothCore: prevent unit from falling through water";
    }
    FALLING_SLOW          = 0x20000000 {
        comment = "AzerothCore: active rogue safe fall spell (passive)";
    }
    HOVER                 = 0x40000000 {
        comment = "AzerothCore: hover, cannot jump";
    }
}

flag ExtraMovementFlags : u16
{
    NONE                     = 0x00000000;
    NO_STRAFE                = 0x00000001;
    NO_JUMPING               = 0x00000002;
    UNK3                     = 0x00000004 {
        comment = "AzerothCore: Overrides various clientside checks";
    }
    FULL_SPEED_TURNING       = 0x00000008;
    FULL_SPEED_PITCHING      = 0x00000010;
    ALWAYS_ALLOW_PITCHING    = 0x00000020;
    UNK7                     = 0x00000040;
    UNK8                     = 0x00000080;
    UNK9                     = 0x00000100;
    UNK10                    = 0x00000200;
    INTERPOLATED_MOVEMENT    = 0x00000400;
    INTERPOLATED_TURNING     = 0x00000800;
    INTERPOLATED_PITCHING    = 0x00001000;
    UNK14                    = 0x00002000;
    UNK15                    = 0x00004000;
    UNK16                    = 0x00008000;
}

struct MovementInfo {
    MovementFlags flags;
    ExtraMovementFlags extra_flags;
    u32 timestamp;
    Vector3d position;
    f32 orientation;
    if (flags & ON_TRANSPORT) {
        TransportInfo transport;
        /* TODO: Flag inside flag
        if (extra_flags & INTERPOLATED_MOVEMENT) {
            u32 transport_time;
        } */
    }
    /* TODO: Also || extra_flags & ALWAYS_ALLOW_PITCHING */
    if (flags & SWIMMING) {
        f32 pitch1;
    /* TODO: || not working */
    } else if (flags & FLYING) {
        f32 pitch2;
    }
    f32 fall_time;
    if (flags & FALLING) {
        f32 z_speed;
        f32 cos_angle;
        f32 sin_angle;
        f32 xy_speed;
    }
    if (flags & SPLINE_ELEVATION) {
        f32 spline_elevation;
    }
}

