#tag_all versions "1.12";

flag SpellCastTargetFlags : u16 {
    SELF = 0x00000000;
    UNUSED1 = 0x00000001 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically)";
    }
    UNIT = 0x00000002 {
        comment = "pguid";
    }
    UNIT_RAID = 0x00000004 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically) - raid member";
    }
    UNIT_PARTY = 0x00000008 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically) - party member";
    }
    ITEM = 0x00000010 {
        comment = "pguid";
    }
    SOURCE_LOCATION = 0x00000020 {
        comment = "3xfloat";
    }
    DEST_LOCATION = 0x00000040 {
        comment = "3xfloat";
    }
    UNIT_ENEMY = 0x00000080 {
        comment = "CanAttack == true";
    }
    UNIT_ALLY = 0x00000100 {
        comment = "CanAssist == true";
    }
    CORPSE_ENEMY = 0x00000200 {
        comment = "pguid, CanAssist == false";
    }
    UNIT_DEAD = 0x00000400 {
        comment = "skinning-like effects";
    }
    GAMEOBJECT = 0x00000800 {
        comment = "pguid, 0 spells in 2.4.3";
    }
    TRADE_ITEM = 0x00001000 {
        comment = "pguid, 0 spells";
    }
    STRING = 0x00002000 {
        comment = "string, 0 spells";
    }
    LOCKED = 0x00004000 {
        comment = "199 spells, opening object/lock";
    }
    CORPSE_ALLY = 0x00008000 {
        comment = "pguid, CanAssist == true";
    }
} {
    comment = "Also has UNIT_MINIPET = 0x00010000 (pguid, not used in any spells as of 2.4.3 (can be set dynamically)) however this is outside range of u16, which SpellCastTargets needs.";
}



struct SpellCastTargets {
    SpellCastTargetFlags target_flags;
    if (target_flags & UNIT) {
        PackedGuid unit_target1;
    }
    if (target_flags & UNIT_ENEMY) {
        PackedGuid unit_target2;
    }
    if (target_flags & GAMEOBJECT) {
        PackedGuid object_target1;
    }
    if (target_flags & LOCKED) {
        PackedGuid object_target2;
    }
    if (target_flags & ITEM) {
        PackedGuid item_target1;
    }
    if (target_flags & TRADE_ITEM) {
        PackedGuid item_target2;
    }
    if (target_flags & SOURCE_LOCATION) {
        f32 position_x1;
        f32 position_y1;
        f32 position_z1;
    }
    if (target_flags & DEST_LOCATION) {
        f32 position_x2;
        f32 position_y2;
        f32 position_z2;
    }
    if (target_flags & STRING) {
        CString target_string;
    }
    if (target_flags & CORPSE_ALLY) {
        PackedGuid corpse_target1;
    }
    if (target_flags & CORPSE_ENEMY) {
        PackedGuid corpse_target2;
    }
}

cmsg CMSG_USE_ITEM = 0x00AB {
    u8 bag_index;
    u8 bag_slot;
    u8 spell_index;
    SpellCastTargets targets;
}

cmsg CMSG_CAST_SPELL = 0x012E {
    Spell spell;
    SpellCastTargets targets;
}



smsg SMSG_MOVE_WATER_WALK = 0x00DE {
    PackedGuid guid;
    u32 counter;
}

smsg SMSG_MOVE_LAND_WALK = 0x00DF {
    PackedGuid guid;
    u32 counter;
}


smsg SMSG_SPELLHEALLOG = 0x0150 {
    PackedGuid victim_guid;
    PackedGuid caster_guid;
    u32 spell_id;
    u32 damage;
    Bool critical; /* TODO: Add bool */
}

smsg SMSG_ATTACKSTOP = 0x0144 {
    PackedGuid player;
    PackedGuid enemy;
    u32 unknown1 {
        comment = "cmangos/vmangos/mangoszero: set to 0 with comment: unk, can be 1 also";
    }
}

enum PowerType : u32 {
    MANA = 0 {
        comment = "UNIT_FIELD_POWER1";
    }
    RAGE = 1 {
        comment = "UNIT_FIELD_POWER2";
    }
    FOCUS = 2 {
        comment = "UNIT_FIELD_POWER3";
    }
    ENERGY = 3 {
        comment = "UNIT_FIELD_POWER4";
    }
    HAPPINESS = 4 {
        comment = "UNIT_FIELD_POWER5";
    }
    HEALTH = 0xFFFFFFFE {
        comment = "(-2 as signed value)";
    }
}


smsg SMSG_SPELLENERGIZELOG = 0x0151 {
    PackedGuid victim_guid;
    PackedGuid caster_guid;
    Spell spell;
    PowerType power;
    u32 damage;
}

smsg SMSG_CLIENT_CONTROL_UPDATE = 0x0159 {
    PackedGuid guid;
    u8 allow_movement;
}



smsg SMSG_ATTACKERSTATEUPDATE = 0x014A {
    /* TODO Possible enum? */
    u32 hit_info;
    PackedGuid attacker;
    PackedGuid target;
    u32 total_damage;
}


