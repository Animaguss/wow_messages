#tag_all versions "1.12";

cmsg CMSG_WORLD_TELEPORT = 0x08 {
    u64 time_in_msec;
    Map map;
    f32 position_x;
    f32 position_y;
    f32 position_z;
    f32 orientation;
}

test CMSG_WORLD_TELEPORT {
    time_in_msec = 0xFACADEDEADBEEF;
    map = KALIMDOR;
    position_x = 1.0;
    position_y = 2.0;
    position_z = 3.0;
    orientation = 4.0;
} [
    0x00, 0x20, /* Size: 32 */
    0x08, 0x00, 0x00, 0x00, /* Opcode */
    0xEF, 0xBE, 0xAD, 0xDE, 0xDE, 0xCA, 0xFA, 0x00, /* Time in msec */
    0x01, 0x00, 0x00, 0x00, /* Map: Kalimdor */
    0x00, 0x00, 0x80, 0x3F, /* position_x: 1.0 */
    0x00, 0x00, 0x00, 0x40, /* position_y: 2.0 */
    0x00, 0x00, 0x40, 0x40, /* position_z: 3.0 */
    0x00, 0x00, 0x80, 0x40, /* orientation: 4.0 */
]

smsg SMSG_NEW_WORLD = 0x003E {
    f32 position_x;
    f32 position_y;
    f32 position_z;
    f32 orientation;
}

enum TransferAbortReason : u8 {
    NONE = 0x00;
    IS_FULL = 0x01;
    NOT_FOUND = 0x02;
    TOO_MANY_INSTANCES = 0x03;
    ZONE_IS_IN_COMBAT = 0x05;
}

smsg SMSG_TRANSFER_ABORTED = 0x0040 {
    Map map;
    TransferAbortReason reason;
    u8 padding = 0;
}

smsg SMSG_LOGIN_SETTIMESPEED = 0x0042 {
    u32 secs_to_time_bit_field;
    f32 game_speed {
        comment = "Set to 0.01666667f in cmangos.";
    }
}

smsg SMSG_GUILD_QUERY_RESPONSE = 0x55 {
    u32 id;
    CString name;
    CString[10] rank_names;
    u32 emblem_style;
    u32 emblem_color;
    u32 border_style;
    u32 border_color;
    u32 background_color;
}

cmsg CMSG_PLAYER_LOGOUT = 0x4A { }

test CMSG_PLAYER_LOGOUT { } [
    0x00, 0x04, /* size */
    0x4A, 0x00, 0x00, 0x00,
]

cmsg CMSG_LOGOUT_REQUEST = 0x4B { }

test CMSG_LOGOUT_REQUEST { } [
     0x00, 0x04, /* size */
     0x4B, 0x00, 0x00, 0x00, /* opcode */
]

enum LogoutResult : u32 {
    SUCCESS = 0;
    FAILURE_IN_COMBAT = 1;
    FAILURE_FROZEN_BY_GM = 2 {
        comment = "vmangos checks for aura 9454. Has FIXME - Need the correct value.";
    }
    FAILURE_JUMPING_OR_FALLING = 3;
}

enum LogoutSpeed : u8 {
    DELAYED = 0;
    INSTANT = 1;
}

smsg SMSG_LOGOUT_RESPONSE = 0x4C {
    LogoutResult reason;
    LogoutSpeed speed;
}

test SMSG_LOGOUT_RESPONSE {
    reason = SUCCESS;
    speed = INSTANT;
} [
     0x00, 0x07, /* size */
     0x4C, 0x00, /* opcode */
     0x00, 0x00, 0x00, 0x00, /* reason: SUCCESS */
     0x01, /* speed = INSTANT */
]

smsg SMSG_LOGOUT_COMPLETE = 0x4D { }

cmsg CMSG_LOGOUT_CANCEL = 0x4E { }

smsg SMSG_LOGOUT_CANCEL_ACK = 0x4F { }

cmsg CMSG_PET_NAME_QUERY = 0x52 {
    u32 pet_number;
    u64 guid;
}

test CMSG_PET_NAME_QUERY {
    pet_number = 0xDEADBEEF;
    guid = 0xFACADEDEADBEEF;
} [
    0x00, 0x10, /* size */
    0x52, 0x00, 0x00, 0x00, /* opcode */
    0xEF, 0xBE, 0xAD, 0xDE, /* pet_number */
    0xEF, 0xBE, 0xAD, 0xDE, 0xDE, 0xCA, 0xFA, 0x00, /* guid */
]

smsg SMSG_PET_NAME_QUERY_RESPONSE = 0x53 {
    u32 pet_number;
    CString name;
    u32 pet_name_timestamp;
}

test SMSG_PET_NAME_QUERY_RESPONSE {
    pet_number = 0xDEADBEEF;
    name = "ABCDEF";
    pet_name_timestamp = 0xFACADE;
} [
    0x00, 0x11, /* size */
    0x53, 0x00, /* opcode */
    0xEF, 0xBE, 0xAD, 0xDE, /* pet_number */
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x00 /* name */
    0xDE, 0xCA, 0xFA, 0x00, /* pet_name_timestamp */
]

cmsg CMSG_GUILD_QUERY = 0x54 {
    u32 guild_id;   
}

cmsg CMSG_ITEM_QUERY_SINGLE = 0x56 {
    u32 item;
    u64 guid;
}

cmsg CMSG_PAGE_TEXT_QUERY = 0x5A {
    u32 page_id;
}

smsg SMSG_PAGE_TEXT_QUERY_RESPONSE = 0x5B {
    u32 page_id;
    CString text;
    u32 next_page_id;
}

cmsg CMSG_QUEST_QUERY = 0x5C {
    u32 quest_id;
}

cmsg CMSG_GAMEOBJECT_QUERY = 0x5E {
    u32 entry_id;
    u64 guid;
}

cmsg CMSG_CREATURE_QUERY = 0x60 {
    u32 creature;
    u64 guid;
}

struct WhoPlayer {
    CString name;
    CString guild;
    u32 level;
    Class class;
    Race race;
    u32 zone_id;
    u32 party_status;
}

smsg SMSG_WHO = 0x63 {
    u32 listed_players;
    u32 online_players;
    WhoPlayer[listed_players] players;
}

cmsg CMSG_WHOIS = 0x64 {
    CString character;
}

smsg SMSG_WHOIS = 0x65 {
    CString message;
}

cmsg CMSG_FRIEND_LIST = 0x66 { }

enum FriendStatus : u8 {
    OFFLINE = 0;
    ONLINE = 1;
    AFK = 2;
    UNKNOWN3 = 3;
    DND = 4;
}

enum FriendResult : u8 {
    DB_ERROR         = 0x00;
    LIST_FULL        = 0x01;
    ONLINE           = 0x02;
    OFFLINE          = 0x03;
    NOT_FOUND        = 0x04;
    REMOVED          = 0x05;
    ADDED_ONLINE     = 0x06;
    ADDED_OFFLINE    = 0x07;
    ALREADY          = 0x08;
    SELF             = 0x09;
    ENEMY            = 0x0A;
    IGNORE_FULL      = 0x0B;
    IGNORE_SELF      = 0x0C;
    IGNORE_NOT_FOUND = 0x0D;
    IGNORE_ALREADY   = 0x0E;
    IGNORE_ADDED     = 0x0F;
    IGNORE_REMOVED   = 0x10;
    IGNORE_AMBIGUOUS = 0x11;
    MUTE_FULL        = 0x12;
    MUTE_SELF        = 0x13;
    MUTE_NOT_FOUND   = 0x14;
    MUTE_ALREADY     = 0x15;
    MUTE_ADDED       = 0x16;
    MUTE_REMOVED     = 0x17;
    MUTE_AMBIGUOUS   = 0x18;
    UNKNOWN19        = 0x19;
    UNKNOWN20        = 0x1A;
}

smsg SMSG_FRIEND_STATUS = 0x68 {
    FriendResult result;
    u64 guid;
}

cmsg CMSG_ADD_FRIEND = 0x69 {
    CString friend_name;
}

cmsg CMSG_DEL_FRIEND = 0x6A {
    u64 guid;
}

smsg SMSG_IGNORE_LIST = 0x6B {
    u8 amount_of_ignored;
    u64[amount_of_ignored] ignored;
}

test SMSG_IGNORE_LIST {
    amount_of_ignored = 1;
    ignored = [ 0xBADC0FFEDEADBEEF, ];
} [
    0x00, 0x0B, /* size */
    0x6B, 0x00, /* opcode */
    0x01, /* amount_of_ignored */
    0xEF, 0xBE, 0xAD, 0xDE, 0xFE, 0x0F, 0xDC, 0xBA, /* ignored */
]

test SMSG_IGNORE_LIST {
    amount_of_ignored = 2;
    ignored = [ 0xBADC0FFEDEADBEEF, 0xDEADBEEF ];
} [
    0x00, 0x13, /* size */
    0x6B, 0x00, /* opcode */
    0x02, /* amount_of_ignored */
    0xEF, 0xBE, 0xAD, 0xDE, 0xFE, 0x0F, 0xDC, 0xBA, /* ignored 1 */
    0xEF, 0xBE, 0xAD, 0xDE, 0x00, 0x00, 0x00, 0x00, /* ignored 2 */
]

cmsg CMSG_ADD_IGNORE = 0x6C {
    CString ignore_name;
}

cmsg CMSG_DEL_IGNORE = 0x6D {
    u64 guid;
}

cmsg CMSG_GROUP_INVITE = 0x6E {
    CString name;
}

smsg SMSG_GROUP_INVITE = 0x6F {
    CString name;
}

cmsg CMSG_GROUP_ACCEPT = 0x72 { }

cmsg CMSG_GROUP_DECLINE = 0x73 { }

smsg SMSG_GROUP_DECLINE = 0x74 {
    CString name;
}

cmsg CMSG_GROUP_UNINVITE = 0x75 {
    CString name;
}

cmsg CMSG_GROUP_UNINVITE_GUID = 0x76 {
    u64 guid;
}

smsg SMSG_GROUP_UNINVITE = 0x77 { }

cmsg CMSG_GROUP_SET_LEADER = 0x78 {
    u64 guid;
}

smsg SMSG_GROUP_SET_LEADER = 0x0079 {
    CString name;
}

enum GroupLootSetting : u8 {
    FREE_FOR_ALL = 0;
    ROUND_ROBIN = 1;
    MASTER_LOOT = 2;
    GROUP_LOOT = 3;
    NEED_BEFORE_GREED = 4;
}

enum ItemQuality : u8 {
    POOR = 0 ;
    NORMAL = 1;
    UNCOMMON = 2;
    RARE = 3;
    EPIC = 4;
    LEGENDARY = 5;
    ARTIFACT = 6;
}

cmsg CMSG_LOOT_METHOD = 0x007A {
    (u32)GroupLootSetting loot_setting;
    u64 loot_master;
    (u32)ItemQuality loot_threshold;
}

cmsg CMSG_GROUP_DISBAND = 0x007B { }

smsg SMSG_GROUP_DESTROYED = 0x007C {}

enum PartyOperation : u8 {
    INVITE = 0;
    LEAVE = 2;
}

enum PartyResult : u8 {
    SUCCESS = 0;
    BAD_PLAYER_NAME = 1;
    TARGET_NOT_IN_GROUP = 2;
    GROUP_FULL = 3;
    ALREADY_IN_GROUP = 4;
    NOT_IN_GROUP = 5;
    NOT_LEADER = 6;
    PLAYER_WRONG_FACTION = 7;
    IGNORING_YOU = 8;
}

smsg SMSG_PARTY_COMMAND_RESULT = 0x007F {
    (u32)PartyOperation operation;
    CString member {
        maximum_length = "48";
    }
    (u32)PartyResult result;
}

cmsg CMSG_GUILD_CREATE = 0x0081 {
    CString guild_name;
}

cmsg CMSG_GUILD_INVITE = 0x0082 {
    CString invited_player;
}

smsg SMSG_GUILD_INVITE = 0x0083 {
    CString player_name;
    CString guild_name;
}

cmsg CMSG_GUILD_ACCEPT = 0x0084 {}

cmsg CMSG_GUILD_DECLINE = 0x0085 {}

cmsg CMSG_GUILD_INFO = 0x0087 {}

smsg SMSG_GUILD_INFO = 0x0088 {
    CString guild_name;
    u32 created_day;
    u32 created_month;
    u32 created_year;
    u32 amount_of_characters_in_guild;
    u32 amount_of_accounts_in_guild;
}

cmsg CMSG_GUILD_ROSTER = 0x0089 {}

smsg SMSG_GUILD_ROSTER = 0x008A {
    /* Complex 
        https://github1s.com/vmangos/core/blob/HEAD/src/game/Guild/Guild.cpp#L754
        https://github1s.com/cmangos/mangos-classic/blob/HEAD/src/game/Guilds/Guild.cpp#L717
    */
}

cmsg CMSG_GUILD_PROMOTE = 0x008B {
    CString player_name;
}

cmsg CMSG_GUILD_DEMOTE = 0x008C {
    CString player_name;
}

cmsg CMSG_GUILD_LEAVE = 0x008D {}

cmsg CMSG_GUILD_REMOVE = 0x008E {
    CString player_name;
}

cmsg CMSG_GUILD_DISBAND = 0x008F {}

cmsg CMSG_GUILD_LEADER = 0x0090 {
    CString new_guild_leader_name;
}

cmsg CMSG_GUILD_MOTD = 0x0091 {
    CString message_of_the_day;
}

enum GuildEvent : u8 {
    PROMOTION = 0;
    DEMOTION = 1;
    MOTD = 2;
    JOINED = 3;
    LEFT = 4;
    REMOVED = 5;
    LEADER_IS = 6;
    LEADER_CHANGED = 7;
    DISBANDED = 8;
    TABARD_CHANGED = 9;
    UNKNOWN10 = 10;
    ROSTER_UPDATE = 11;
    SIGNED_ON = 12;
    SIGNED_OFF = 13;
}

/* TODO: Technically correct, but events require a specific amount of strings */
smsg SMSG_GUILD_EVENT = 0x0092 {
    GuildEvent event;
    u8 amount_of_events;
    CString[amount_of_events] event_descriptions;
}

enum GuildCommand : u8 {
    CREATE = 0x00;
    INVITE = 0x01;
    QUIT = 0x03;
    FOUNDER = 0x0E;
    UNKNOWN19 = 0x13 {
        comment = "cmangos claims this triggers UI event EVENT_GUILD_ROSTER_UPDATE";
    }
    UNKNOWN20 = 0x14 {
        comment = "cmangos claims this triggers UI event EVENT_GUILD_ROSTER_UPDATE";
    }
}

enum GuildCommandResult : u8 {
    PLAYER_NO_MORE_IN_GUILD     = 0x00; /* no message/error */
    GUILD_INTERNAL              = 0x01;
    ALREADY_IN_GUILD            = 0x02;
    ALREADY_IN_GUILD_S          = 0x03;
    INVITED_TO_GUILD            = 0x04;
    ALREADY_INVITED_TO_GUILD_S  = 0x05;
    GUILD_NAME_INVALID          = 0x06;
    GUILD_NAME_EXISTS_S         = 0x07;
    GUILD_LEADER_LEAVE          = 0x08; /* for Typecommand 0x03 */
    GUILD_PERMISSIONS           = 0x08; /* for another Typecommand */
    GUILD_PLAYER_NOT_IN_GUILD   = 0x09;
    GUILD_PLAYER_NOT_IN_GUILD_S = 0x0A;
    GUILD_PLAYER_NOT_FOUND_S    = 0x0B;
    GUILD_NOT_ALLIED            = 0x0C;
    GUILD_RANK_TOO_HIGH_S       = 0x0D;
    GUILD_RANK_TOO_LOW_S        = 0x0E;
}

/* TODO: Seems to be used for a whole host of things, might be able to narrow it down? */
smsg SMSG_GUILD_COMMAND_RESULT = 0x0093 {
    (u32)GuildCommand command;
    CString string;
    (u32)GuildCommandResult result;
}

enum ChatType : u8 {
    SAY                    = 0x00;
    PARTY                  = 0x01;
    RAID                   = 0x02;
    GUILD                  = 0x03;
    OFFICER                = 0x04;
    YELL                   = 0x05;
    WHISPER                = 0x06;
    WHISPER_INFORM         = 0x07;
    EMOTE                  = 0x08;
    TEXT_EMOTE             = 0x09;
    SYSTEM                 = 0x0A;
    MONSTER_SAY            = 0x0B;
    MONSTER_YELL           = 0x0C;
    MONSTER_EMOTE          = 0x0D;
    CHANNEL                = 0x0E;
    CHANNEL_JOIN           = 0x0F;
    CHANNEL_LEAVE          = 0x10;
    CHANNEL_LIST           = 0x11;
    CHANNEL_NOTICE         = 0x12;
    CHANNEL_NOTICE_USER    = 0x13;
    AFK                    = 0x14;
    DND                    = 0x15;
    IGNORED                = 0x16;
    SKILL                  = 0x17;
    LOOT                   = 0x18;
    MONSTER_WHISPER        = 0x1A;
    BG_SYSTEM_NEUTRAL      = 0x52;
    BG_SYSTEM_ALLIANCE     = 0x53;
    BG_SYSTEM_HORDE        = 0x54;
    RAID_LEADER            = 0x57;
    RAID_WARNING           = 0x58;
    RAID_BOSS_WHISPER      = 0x59;
    RAID_BOSS_EMOTE        = 0x5A;
    BATTLEGROUND           = 0x5C;
    BATTLEGROUND_LEADER    = 0x5D;
}

enum Language : u32 {
    UNIVERSAL      = 0;
    ORCISH         = 1;
    DARNASSIAN     = 2;
    TAURAHE        = 3;
    DWARVISH       = 6;
    COMMON         = 7;
    DEMONIC        = 8;
    TITAN          = 9;
    THALASSIAN     = 10;
    DRACONIC       = 11;
    KALIMAG        = 12;
    GNOMISH        = 13;
    TROLL          = 14;
    GUTTERSPEAK    = 33;
    ADDON          = 0xFFFFFFFF;
}

cmsg CMSG_JOIN_CHANNEL = 0x0097 {
    CString channel_name;
    CString channel_password;
}

cmsg CMSG_LEAVE_CHANNEL = 0x0098 {
    CString channel_name;
}

enum ChatNotify : u8 {
    JOINED_NOTICE = 0x00 {
        comment = "%s joined channel.";
    }
    LEFT_NOTICE = 0x01 {
        comment = "%s left channel.";
    }
    YOU_JOINED_NOTICE = 0x02 {
        comment = "Joined Channel: [%s] -- You joined";
    }
    YOU_LEFT_NOTICE = 0x03 {
        comment = "Left Channel: [%s] -- You left";
    }
    WRONG_PASSWORD_NOTICE = 0x04 {
        comment = "Wrong password for %s.";
    }
    NOT_MEMBER_NOTICE = 0x05 {
        comment = "Not on channel %s.";
    }
    NOT_MODERATOR_NOTICE = 0x06 {
        comment = "Not a moderator of %s.";
    }
    PASSWORD_CHANGED_NOTICE = 0x07 {
        comment = "[%s] Password changed by %s.";
    }
    OWNER_CHANGED_NOTICE = 0x08 {
        comment = "[%s] Owner changed to %s.";
    }
    PLAYER_NOT_FOUND_NOTICE = 0x09 {
        comment = "[%s] Player %s was not found.";
    }
    NOT_OWNER_NOTICE = 0x0A {
        comment = "[%s] You are not the channel owner.";
    }
    CHANNEL_OWNER_NOTICE = 0x0B {
        comment = "[%s] Channel owner is %s.";
    }
    MODE_CHANGE_NOTICE = 0x0C;
    ANNOUNCEMENTS_ON_NOTICE = 0x0D {
        comment = "[%s] Channel announcements enabled by %s.";
    }
    ANNOUNCEMENTS_OFF_NOTICE = 0x0E {
        comment = "[%s] Channel announcements disabled by %s.";
    }
    MODERATION_ON_NOTICE = 0x0F {
        comment = "[%s] Channel moderation enabled by %s.";
    }
    MODERATION_OFF_NOTICE = 0x10 {
        comment = "[%s] Channel moderation disabled by %s.";
    }
    MUTED_NOTICE = 0x11 {
        comment = "[%s] You do not have permission to speak.";
    }
    PLAYER_KICKED_NOTICE = 0x12 {
        comment = "[%s] Player %s kicked by %s.";
    }
    BANNED_NOTICE = 0x13 {
        comment = "[%s] You are banned from that channel.";
    }
    PLAYER_BANNED_NOTICE = 0x14 {
        comment = "[%s] Player %s banned by %s.";
    }
    PLAYER_UNBANNED_NOTICE = 0x15 {
        comment = "[%s] Player %s unbanned by %s.";
    }
    PLAYER_NOT_BANNED_NOTICE = 0x16 {
        comment = "[%s] Player %s is not banned.";
    }
    PLAYER_ALREADY_MEMBER_NOTICE = 0x17 {
        comment = "[%s] Player %s is already on the channel.";
    }
    INVITE_NOTICE = 0x18 {
        comment = "%2$s has invited you to join the channel '%1$s'.";
    }
    INVITE_WRONG_FACTION_NOTICE = 0x19 {
        comment = "Target is in the wrong alliance for %s.";
    }
    WRONG_FACTION_NOTICE = 0x1A {
        comment = "Wrong alliance for %s.";
    }
    INVALID_NAME_NOTICE = 0x1B {
        comment = "Invalid channel name";
    }
    NOT_MODERATED_NOTICE = 0x1C {
        comment = "%s is not moderated";
    }
    PLAYER_INVITED_NOTICE = 0x1D {
        comment = "[%s] You invited %s to join the channel";
    }
    PLAYER_INVITE_BANNED_NOTICE = 0x1E {
        comment = "[%s] %s has been banned.";
    }
    THROTTLED_NOTICE = 0x1F {
        comment = "[%s] The number of messages that can be sent to this channel is limited, please wait to send another message.";
    }
}

smsg SMSG_CHANNEL_NOTIFY = 0x0099 {
    ChatNotify notify_type;
    CString channel_name;
}

cmsg CMSG_CHANNEL_LIST = 0x009A {
    CString channel_name;
}

struct ChannelMember {
    u64 guid;
    /* TODO: unknown flags */
    u8 member_flags;
}

smsg SMSG_CHANNEL_LIST = 0x009B {
    CString channel_name;
    /* TODO: unknown flags */
    u8 channel_flags;
    u32 amount_of_members;
    ChannelMember[amount_of_members] members;
}

cmsg CMSG_CHANNEL_PASSWORD = 0x009C {
    CString channel_name;
    CString channel_password;
}

cmsg CMSG_CHANNEL_SET_OWNER = 0x009D {
    CString channel_name;
    CString new_owner;
}

cmsg CMSG_CHANNEL_OWNER = 0x009E {
    CString channel_name;
}

cmsg CMSG_CHANNEL_MODERATOR = 0x009F {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_UNMODERATOR = 0x00A0 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_MUTE = 0x00A1 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_UNMUTE = 0x00A2 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_INVITE = 0x00A3 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_KICK = 0x00A4 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_BAN = 0x00A5 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_UNBAN = 0x00A6 {
    CString channel_name;
    CString player_name;
}

cmsg CMSG_CHANNEL_ANNOUNCEMENTS = 0x00A7 {
    CString channel_name;
}

cmsg CMSG_CHANNEL_MODERATE = 0x00A8 {
    CString channel_name;
}

smsg SMSG_DESTROY_OBJECT = 0x00AA {
    u64 guid;
}

cmsg CMSG_OPEN_ITEM = 0x00AC {
    u8 bag_index;
    u8 slot;
}

cmsg CMSG_READ_ITEM = 0x00AD {
    u8 bag_index;
    u8 slot;
}

smsg SMSG_READ_ITEM_OK = 0x00AE {
    u64 guid;
}

smsg SMSG_READ_ITEM_FAILED = 0x00AF {
    u64 guid;
}

smsg SMSG_ITEM_COOLDOWN = 0x00B0 {
    u64 guid;
    u32 spell_id;
}

cmsg CMSG_GAMEOBJ_USE = 0x00B1 {
    u64 guid;
}

smsg SMSG_GAMEOBJECT_CUSTOM_ANIM = 0x00B3 {
    u64 guid;
    u32 animation_id;
}

cmsg CMSG_AREATRIGGER = 0x00B4 {
    u32 trigger_id;
}

enum CinematicSequenceId : u32 {
    HUMAN = 81;
    ORC = 21;
    DWARF = 41;
    NIGHT_ELF = 61;
    UNDEAD = 2;
    TAUREN = 141;
    GNOME = 101;
    TROLL = 121;
    GOBLIN = 0;
}

smsg SMSG_TRIGGER_CINEMATIC = 0x00FA {
    CinematicSequenceId cinematic_sequence_id;
}

cmsg CMSG_NEXT_CINEMATIC_CAMERA = 0x00FB {} {
    description = "Sent by client when cinematic beings.";
}

cmsg CMSG_COMPLETE_CINEMATIC = 0x00FC {}

cmsg CMSG_TUTORIAL_FLAG = 0x00FE {
    /* TODO: Flag as u32 */
    u32 tutorial_flag;
}

cmsg CMSG_TUTORIAL_CLEAR = 0x00FF {}

cmsg CMSG_TUTORIAL_RESET = 0x0100 {}

enum UnitStandState : u8 {
    STAND = 0;
    SIT = 1;
    SIT_CHAIR = 2;
    SLEEP = 3;
    SIT_LOW_CHAIR = 4;
    SIT_MEDIUM_CHAIR = 5;
    SIT_HIGH_CHAIR = 6;
    DEAD = 7;
    KNEEL = 8;
    CUSTOM = 9 {
        comment = "Used for Cthun according to cmangos.";
    }
}

cmsg CMSG_STANDSTATECHANGE = 0x0101 {
    (u32)UnitStandState animation_state;
}

enum Emote : u32 {
    ONESHOT_NONE = 0;
    ONESHOT_TALK = 1;
    ONESHOT_BOW = 2;
    ONESHOT_WAVE = 3;
    ONESHOT_CHEER = 4;
    ONESHOT_EXCLAMATION = 5;
    ONESHOT_QUESTION = 6;
    ONESHOT_EAT = 7;
    STATE_DANCE = 10;
    ONESHOT_LAUGH = 11;
    STATE_SLEEP = 12;
    STATE_SIT = 13;
    ONESHOT_RUDE = 14;
    ONESHOT_ROAR = 15;
    ONESHOT_KNEEL = 16;
    ONESHOT_KISS = 17;
    ONESHOT_CRY = 18;
    ONESHOT_CHICKEN = 19;
    ONESHOT_BEG = 20;
    ONESHOT_APPLAUD = 21;
    ONESHOT_SHOUT = 22;
    ONESHOT_FLEX = 23;
    ONESHOT_SHY = 24;
    ONESHOT_POINT = 25;
    STATE_STAND = 26;
    STATE_READYUNARMED = 27;
    STATE_WORK_SHEATHED = 28;
    STATE_POINT = 29;
    STATE_NONE = 30;
    ONESHOT_WOUND = 33;
    ONESHOT_WOUNDCRITICAL = 34;
    ONESHOT_ATTACKUNARMED = 35;
    ONESHOT_ATTACK1H = 36;
    ONESHOT_ATTACK2HTIGHT = 37;
    ONESHOT_ATTACK2HLOOSE = 38;
    ONESHOT_PARRYUNARMED = 39;
    ONESHOT_PARRYSHIELD = 43;
    ONESHOT_READYUNARMED = 44;
    ONESHOT_READY1H = 45;
    ONESHOT_READYBOW = 48;
    ONESHOT_SPELLPRECAST = 50;
    ONESHOT_SPELLCAST = 51;
    ONESHOT_BATTLEROAR = 53;
    ONESHOT_SPECIALATTACK1H = 54;
    ONESHOT_KICK = 60;
    ONESHOT_ATTACKTHROWN = 61;
    STATE_STUN = 64;
    STATE_DEAD = 65;
    ONESHOT_SALUTE = 66;
    STATE_KNEEL = 68;
    STATE_USESTANDING = 69;
    ONESHOT_WAVE_NOSHEATHE = 70;
    ONESHOT_CHEER_NOSHEATHE = 71;
    ONESHOT_EAT_NOSHEATHE = 92;
    STATE_STUN_NOSHEATHE = 93;
    ONESHOT_DANCE = 94;
    ONESHOT_SALUTE_NOSHEATH = 113;
    STATE_USESTANDING_NOSHEATHE = 133;
    ONESHOT_LAUGH_NOSHEATHE = 153;
    STATE_WORK = 173;
    STATE_SPELLPRECAST = 193;
    ONESHOT_READYRIFLE = 213;
    STATE_READYRIFLE = 214;
    STATE_WORK_MINING = 233;
    STATE_WORK_CHOPWOOD = 234;
    STATE_APPLAUD = 253;
    ONESHOT_LIFTOFF = 254;
    ONESHOT_YES = 273;
    ONESHOT_NO = 274;
    ONESHOT_TRAIN = 275;
    ONESHOT_LAND = 293;
    STATE_AT_EASE = 313;
    STATE_READY1H = 333;
    STATE_SPELLKNEELSTART = 353;
    STATE_SUBMERGED = 373;
    ONESHOT_SUBMERGE = 374;
    STATE_READY2H = 375;
    STATE_READYBOW = 376;
    ONESHOT_MOUNTSPECIAL = 377;
    STATE_TALK = 378;
    STATE_FISHING = 379;
    ONESHOT_FISHING = 380;
    ONESHOT_LOOT = 381;
    STATE_WHIRLWIND = 382;
    STATE_DROWNED = 383;
    STATE_HOLD_BOW = 384;
    STATE_HOLD_RIFLE = 385;
    STATE_HOLD_THROWN = 386;
    ONESHOT_DROWN = 387;
    ONESHOT_STOMP = 388;
    ONESHOT_ATTACKOFF = 389;
    ONESHOT_ATTACKOFFPIERCE = 390;
    STATE_ROAR = 391;
    STATE_LAUGH = 392;
    ONESHOT_CREATURE_SPECIAL = 393;
    ONESHOT_JUMPLANDRUN = 394;
    ONESHOT_JUMPEND = 395;
    ONESHOT_TALK_NOSHEATHE = 396;
    ONESHOT_POINT_NOSHEATHE = 397;
    STATE_CANNIBALIZE = 398;
    ONESHOT_JUMPSTART = 399;
    STATE_DANCESPECIAL = 400;
    ONESHOT_DANCESPECIAL = 401;
    ONESHOT_CUSTOMSPELL01 = 402;
    ONESHOT_CUSTOMSPELL02 = 403;
    ONESHOT_CUSTOMSPELL03 = 404;
    ONESHOT_CUSTOMSPELL04 = 405;
    ONESHOT_CUSTOMSPELL05 = 406;
    ONESHOT_CUSTOMSPELL06 = 407;
    ONESHOT_CUSTOMSPELL07 = 408;
    ONESHOT_CUSTOMSPELL08 = 409;
    ONESHOT_CUSTOMSPELL09 = 410;
    ONESHOT_CUSTOMSPELL10 = 411;
    STATE_EXCLAIM = 412;
    STATE_SIT_CHAIR_MED = 415;
    STATE_SPELLEFFECT_HOLD = 422;
    STATE_EAT_NO_SHEATHE = 423;
}

cmsg CMSG_EMOTE = 0x0102 {
    Emote emote;
}

smsg SMSG_EMOTE = 0x0103 {
    Emote emote;
    u64 guid;
}

cmsg CMSG_TEXT_EMOTE = 0x0104 {
    /* TODO: text_emote could be an enum */
    u32 text_emote;
    Emote emote;
    u64 guid;
}

smsg SMSG_TEXT_EMOTE = 0x0105 {
    u64 guid;
    /* TODO: text_emote could be an enum */
    u32 text_emote;
    Emote emote;
    u32 name_length;
    /* Name length for CString??? */
    CString name;
}

cmsg CMSG_AUTOSTORE_LOOT_ITEM = 0x0108 {
    u8 item_slot;
}

cmsg CMSG_AUTOEQUIP_ITEM = 0x010A {
    u8 source_bag;
    u8 source_slot;
}

cmsg CMSG_AUTOSTORE_BAG_ITEM = 0x010B {
    u8 source_bag;
    u8 source_slot;
    u8 destination_bag;
}

cmsg CMSG_SWAP_ITEM = 0x010C {
    u8 destination_bag;
    u8 destionation_slot;
    u8 source_bag;
    u8 source_slot;
}

cmsg CMSG_SWAP_INV_ITEM = 0x010D {
    u8 source_slot;
    u8 destination_slot;
}

cmsg CMSG_SPLIT_ITEM = 0x010E {
    u8 source_bag;
    u8 source_slot;
    u8 destination_bag;
    u8 destination_slot;
    u8 amount {
        minimum_legal_value = "1";
    }
}

cmsg CMSG_AUTOEQUIP_ITEM_SLOT = 0x010F {
    u64 guid;
    u8 destination_slot;
}

enum InventoryResult : u8 {
    OK = 0;
    CANT_EQUIP_LEVEL_I = 1;
    CANT_EQUIP_SKILL = 2;
    ITEM_DOESNT_GO_TO_SLOT = 3;
    BAG_FULL = 4;
    NONEMPTY_BAG_OVER_OTHER_BAG = 5;
    CANT_TRADE_EQUIP_BAGS = 6;
    ONLY_AMMO_CAN_GO_HERE = 7;
    NO_REQUIRED_PROFICIENCY = 8;
    NO_EQUIPMENT_SLOT_AVAILABLE = 9;
    YOU_CAN_NEVER_USE_THAT_ITEM = 10;
    YOU_CAN_NEVER_USE_THAT_ITEM2 = 11;
    NO_EQUIPMENT_SLOT_AVAILABLE2 = 12;
    CANT_EQUIP_WITH_TWOHANDED = 13;
    CANT_DUAL_WIELD = 14;
    ITEM_DOESNT_GO_INTO_BAG = 15;
    ITEM_DOESNT_GO_INTO_BAG2 = 16;
    CANT_CARRY_MORE_OF_THIS = 17;
    NO_EQUIPMENT_SLOT_AVAILABLE3 = 18;
    ITEM_CANT_STACK = 19;
    ITEM_CANT_BE_EQUIPPED = 20;
    ITEMS_CANT_BE_SWAPPED = 21;
    SLOT_IS_EMPTY = 22;
    ITEM_NOT_FOUND = 23;
    CANT_DROP_SOULBOUND = 24;
    OUT_OF_RANGE = 25;
    TRIED_TO_SPLIT_MORE_THAN_COUNT = 26;
    COULDNT_SPLIT_ITEMS = 27;
    MISSING_REAGENT = 28;
    NOT_ENOUGH_MONEY = 29;
    NOT_A_BAG = 30;
    CAN_ONLY_DO_WITH_EMPTY_BAGS = 31;
    DONT_OWN_THAT_ITEM = 32;
    CAN_EQUIP_ONLY1_QUIVER = 33;
    MUST_PURCHASE_THAT_BAG_SLOT = 34;
    TOO_FAR_AWAY_FROM_BANK = 35;
    ITEM_LOCKED = 36;
    YOU_ARE_STUNNED = 37;
    YOU_ARE_DEAD = 38;
    CANT_DO_RIGHT_NOW = 39;
    INT_BAG_ERROR = 40;
    CAN_EQUIP_ONLY1_BOLT = 41;
    CAN_EQUIP_ONLY1_AMMOPOUCH = 42;
    STACKABLE_CANT_BE_WRAPPED = 43;
    EQUIPPED_CANT_BE_WRAPPED = 44;
    WRAPPED_CANT_BE_WRAPPED = 45;
    BOUND_CANT_BE_WRAPPED = 46;
    UNIQUE_CANT_BE_WRAPPED = 47;
    BAGS_CANT_BE_WRAPPED = 48;
    ALREADY_LOOTED = 49;
    INVENTORY_FULL = 50;
    BANK_FULL = 51;
    ITEM_IS_CURRENTLY_SOLD_OUT = 52;
    BAG_FULL3 = 53;
    ITEM_NOT_FOUND2 = 54;
    ITEM_CANT_STACK2 = 55;
    BAG_FULL4 = 56;
    ITEM_SOLD_OUT = 57;
    OBJECT_IS_BUSY = 58;
    NONE = 59;
    NOT_IN_COMBAT = 60;
    NOT_WHILE_DISARMED = 61;
    BAG_FULL6 = 62;
    CANT_EQUIP_RANK = 63;
    CANT_EQUIP_REPUTATION = 64;
    TOO_MANY_SPECIAL_BAGS = 65;
    LOOT_CANT_LOOT_THAT_NOW = 66;
} {
    comment = "Any values greater than maximum enum value show as 'bag full'";
}

cmsg CMSG_DESTROYITEM = 0x0111 {
    u8 bag;
    u8 slot;
    u8 amount;
    u8 unknown1;
    u8 unknown2;
    u8 unknown3;
}

smsg SMSG_OPEN_CONTAINER = 0x0113 {
    u64 guid;
}

cmsg CMSG_INSPECT = 0x0114 {
    u64 guid;
}

smsg SMSG_INSPECT = 0x0115 {
    u64 guid;
}

cmsg CMSG_INITIATE_TRADE = 0x0116 {
    u64 guid;
}

cmsg CMSG_BEGIN_TRADE = 0x0117 {}

cmsg CMSG_BUSY_TRADE = 0x0118 {}

cmsg CMSG_IGNORE_TRADE = 0x0119 {}

cmsg CMSG_ACCEPT_TRADE = 0x011A {
    u32 unknown1 {
        comment = "Skipped in vmangos and set to 1 for bots";
    }
}

cmsg CMSG_UNACCEPT_TRADE = 0x011B {}

cmsg CMSG_CANCEL_TRADE = 0x011C {}

cmsg CMSG_SET_TRADE_ITEM = 0x011D {
    u8 trade_slot;
    u8 bag;
    u8 slot;
}

cmsg CMSG_CLEAR_TRADE_ITEM = 0x011E {
    u8 trade_slot;
}

cmsg CMSG_SET_TRADE_GOLD = 0x011F {
    u32 gold;
}

enum TradeStatus : u32 {
    BUSY = 0;
    BEGIN_TRADE = 1;
    OPEN_WINDOW = 2;
    TRADE_CANCELED = 3;
    TRADE_ACCEPT = 4;
    BUSY_2 = 5;
    NO_TARGET = 6;
    BACK_TO_TRADE = 7;
    TRADE_COMPLETE = 8;
    TRADE_REJECTED = 9;
    TARGET_TO_FAR = 10;
    WRONG_FACTION = 11;
    CLOSE_WINDOW = 12;
    UNKNOWN_13 = 13;
    IGNORE_YOU = 14;
    YOU_STUNNED = 15;
    TARGET_STUNNED = 16;
    YOU_DEAD = 17;
    TARGET_DEAD = 18;
    YOU_LOGOUT = 19;
    TARGET_LOGOUT = 20;
    TRIAL_ACCOUNT = 21;
    ONLY_CONJURED = 22;
    NOT_ON_TAPLIST = 23;
}

smsg SMSG_SET_FACTION_VISIBLE = 0x0123 {
    u32 reputation_list_id;
}


smsg SMSG_DUEL_COMPLETE = 0x016A {
    Bool ended_without_interruption;
}


smsg SMSG_TAXINODE_STATUS = 0x01AB {
    u64 guid;
    Bool taxi_mask_node_known;
}


smsg SMSG_ENCHANTMENTLOG = 0x01D7 {
    Guid target_guid;
    Guid caster_guid;
    Item item;
    Spell spell;
    u8 unknown1;
} {
    comment = "cmangos and vmangos/mangoszero disagree about packed and extra u8";
}

cmsg CMSG_REQUEST_ACCOUNT_DATA = 0x020A {}

cmsg CMSG_TAXINODE_STATUS_QUERY = 0x01AA {
    u64 guid;
}


smsg MSG_MINIMAP_PING_Server = 0x01D5 {
    Guid guid;
    f32 position_x;
    f32 position_y;
}

cmsg MSG_MINIMAP_PING_Client = 0x01D5 {
    f32 position_x;
    f32 position_y;
}

enum GuildEmblemResult : u32 {
    SUCCESS = 0 {
        comment = "Guild Emblem saved.";
    }
    INVALID_TABARD_COLORS = 1;
    NO_GUILD = 2 {
        comment = "vmangos: You are not part of a guild!";
    }
    NOT_GUILD_MASTER = 3 {
        comment = "vmangos: Only guild leaders can create emblems.";
    }
    NOT_ENOUGH_MONEY = 4 {
        comment = "vmangos: You can't afford to do that.";
    }
    NO_MESSAGE = 5 {
        comment = "mangoszero: [This version] fails silently.";
    }
}

cmsg MSG_SAVE_GUILD_EMBLEM_Client = 0x01F1 {
    Guid vendor;
    u32 emblem_style;
    u32 emblem_color;
    u32 border_style;
    u32 border_color;
    u32 background_color;
}

smsg MSG_SAVE_GUILD_EMBLEM_Server = 0x01F1 {
    GuildEmblemResult result;
}


cmsg MSG_LOOKING_FOR_GROUP_Client = 0x01FF {}

smsg MSG_LOOKING_FOR_GROUP_Server = 0x01FF {
    u32 unknown1 {
        comment = "vmangos sets to 0. cmangos/mangoszero don't implement";
    }
}


struct StabledPet {
    u32 pet_number;
    u32 entry;
    u32 level;
    CString name;
    u32 loyalty;
    u8 slot {
        comment = "vmangos/mangoszero/cmangos: client slot 1 == current pet (0)";
    }
}

smsg MSG_LIST_STABLED_PETS_Server = 0x026F {
    Guid npc;
    u8 amount_of_pets;
    u8 stable_slots;
    StabledPet[amount_of_pets] pets;
}

cmsg MSG_LIST_STABLED_PETS_Client = 0x026F {
    Guid npc;
}

enum CorpseQueryResult : u8 {
    NOT_FOUND = 0;
    FOUND = 1;
}

smsg MSG_CORPSE_QUERY_Server = 0x0216 {
    CorpseQueryResult result;
    if (result == FOUND) {
        Map map;
        f32 position_x;
        f32 position_y;
        f32 position_z;
        Map corpse_map;
    }
}

cmsg MSG_CORPSE_QUERY_Client = 0x0216 {}


cmsg MSG_RANDOM_ROLL_Client = 0x01FB {
    u32 minimum;
    u32 maximum;
}

smsg MSG_RANDOM_ROLL_Server = 0x01FB {
    u32 minimum;
    u32 maximum;
    u32 actual_roll;
    Guid guid;
}


cmsg MSG_TALENT_WIPE_CONFIRM_Client = 0x02AA {
    Guid wiping_npc;
}

smsg MSG_TALENT_WIPE_CONFIRM_Server = 0x02AA {
    Guid wiping_npc;
    u32 cost_in_copper;
} {
    comment = "cmangos/vmangos/mangoszero returns guid 0 and unknown 0 when talents can not be reset";
    comment = "cmangos/vmangos/mangoszero casts spell 14876 when resetting";
}

cmsg MSG_QUERY_NEXT_MAIL_TIME_Client = 0x0284 {
} {
    comment = "mangoszero/vmangos: No idea when this is called.";
}

smsg MSG_QUERY_NEXT_MAIL_TIME_Server = 0x0284 {
    /* TODO: Figure out if Cmangos is correct in this */
    f32 unread_mails {
        comment = "mangoszero sets 0 if has unread mail, -86400.0f (0xC7A8C000) if not";
        comment = "vmangos sets 0 if has unread mail, -1.0f if not";
        comment = "cmangos has the behavior of mangoszero except when there are unread mails. This is TODO.";
    }
} {
    comment = "mangoszero/vmangos: No idea when this is called.";
}

cmsg MSG_INSPECT_HONOR_STATS_Client = 0x02D6 {
    Guid guid;
}

smsg MSG_INSPECT_HONOR_STATS_Server = 0x02D6 {
    Guid guid;
    PvpRank highest_rank;
    u32 today_honorable_and_dishonorable;
    u16 yesterday_honorable;
    u16 unknown1 {
        comment = "vmangos: Unknown (deprecated, yesterday dishonourable?)";
    }
    u16 last_week_honorable;
    u16 unknown2 {
        comment = "vmangos: Unknown (deprecated, last week dishonourable?)";
    }
    u16 this_week_honorable;
    u16 unknown3 {
        comment = "vmangos: Unknown (deprecated, this week dishonourable?)";
    }
    u32 lifetime_honorable;
    u32 lifetime_dishonorable;
    u32 yesterday_honor;
    u32 last_week_honor;
    u32 this_week_honor;
    (u32)PvpRank last_week_standing;
    u8 rank_progress_bar;
}


cmsg MSG_AUCTION_HELLO_Client = 0x0255 {
    Guid auctioneer;
}


smsg MSG_AUCTION_HELLO_Server = 0x0255 {
    Guid auctioneer;
    u32 auction_house_id;
}



enum BattlegroundEndStatus : u8 {
    NOT_ENDED = 0;
    ENDED = 1;
}

enum BattlegroundWinner : u8 {
    HORDE = 0;
    ALLIANCE = 1;
    NONE = 2;
}

struct BattlegroundPlayer {
    Guid player;
    (u32)PvpRank rank;
    u32 killing_blows;
    u32 honorable_kills;
    u32 deaths;
    u32 bonus_honor;
    u32 amount_of_extra_fields;
    u32[amount_of_extra_fields] fields {
        comment = "This depends on the BG in question. AV expects 7: Graveyards Assaulted, Graveyards Defended, Towers Assaulted, Towers Defended, Secondary Objectives, LieutenantCount, SecondaryNpc";
        comment = "WSG expects 2: Flag captures and flag returns";
        comment = "AB expects 2: Bases assaulted and bases defended";
    }
}

smsg MSG_PVP_LOG_DATA_Server = 0x02E0 {
    BattlegroundEndStatus status;
    if (status == ENDED) {
        BattlegroundWinner winner;
    }
    u32 amount_of_players {
        valid_range = "0 80";
        comment = "vmangos: Client has a hard limit to 80. If we go beyond (but it should not happen ?!), WoW Error (happening !)";
    }
    BattlegroundPlayer[amount_of_players] players;
}

cmsg MSG_PVP_LOG_DATA_Client = 0x02E0 {}


cmsg MSG_BATTLEGROUND_PLAYER_POSITIONS_Client = 0x02E9 {}

smsg MSG_BATTLEGROUND_PLAYER_POSITIONS_Server = 0x02E9 {
    u32 amount_of_carriers = 0 {
        comment = "vmangos/cmangos/mangoszero: All force to zero";
    }
    u32 amount_of_flag_carriers {
        valid_range = "0 2";
    }
    BattlegroundPlayerPosition[amount_of_flag_carriers] flag_carriers;
} {
    comment = "vmangos/cmangos/mangoszero: Seems to be older versions used to be 'amount_of_carriers' followed by array. All versions now just set first to 0 and have second be 0/1/2.";
    comment = "vmangos/cmangos/mangoszero: For AB and AV always set to all zero.";
}

struct BattlegroundPlayerPosition {
    Guid player;
    f32 position_x;
    f32 position_y;
}

flag FactionFlag : u8 {
    VISIBLE = 0x01 {
        comment = "makes visible in client (set or can be set at interaction with target of this faction)";
    }
    AT_WAR = 0x02 {
        comment = "enable AtWar-button in client. player controlled (except opposition team always war state), Flag only set on initial creation";
    }
    HIDDEN = 0x04 {
        comment = "hidden faction from reputation pane in client (player can gain reputation, but this update not sent to client)";
    }
    INVISIBLE_FORCED = 0x08 {
        comment = "always overwrite FACTION_FLAG_VISIBLE and hide faction in rep.list, used for hide opposite team factions";
    }
    PEACE_FORCED = 0x10 {
        comment = "always overwrite FACTION_FLAG_AT_WAR, used for prevent war with own team factions";
    }
    INACTIVE = 0x20 {
        comment = "player controlled, state stored in characters.data ( CMSG_SET_FACTION_INACTIVE )";
    }
    RIVAL = 0x40 {
        comment = "flag for the two competing outland factions";
    }
}

struct FactionInitializer {
    FactionFlag flag;
    /* TODO Units? */
    u32 standing;
}

smsg SMSG_INITIALIZE_FACTIONS = 0x0122 {
    u32 amount_of_factions {
        comment = "vmangos/cmangos/mangoszero: sets to 0x00000040 (64)";
    }
    FactionInitializer[amount_of_factions] factions;
}

struct Faction {
    u32 reputation_list_id;
    /* TODO Units? */
    u32 standing;
}

smsg SMSG_SET_FACTION_STANDING = 0x0124 {
    /* TODO How many factions in FactionList? */
    u32 amount_of_factions;
    Faction[amount_of_factions] factions;
}

