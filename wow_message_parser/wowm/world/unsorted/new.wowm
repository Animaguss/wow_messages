#tag_all versions "1.12";

/* TODO Real names?
enum ItemClass : u8 {
    CONSUMABLE = 0;
    CONTAINER = 1;
    WEAPON = 2;
    GEM = 3;
    ARMOR = 4;
    REAGENT = 5;
    PROJECTILE = 6;
    TRADE_GOODS = 7;
    GENERIC = 8;
    RECIPE = 9;
    MONEY = 10;
    QUIVER = 11;
    QUEST = 12;
    KEY = 13;
    PERMANENT = 14;
    JUNK = 15;
}
*/
enum ItemClass : u8 {
    CONSUMABLE = 0;
    CONTAINER = 1;
    WEAPON = 2;
    RESERVED_1 = 3;
    ARMOR = 4;
    REAGENT = 5;
    PROJECTILE = 6;
    TRADE_GOODS = 7;
    RESERVED_2 = 8;
    RECIPE = 9;
    RESERVED_3 = 10;
    QUIVER = 11;
    QUEST = 12;
    KEY = 13;
    RESERVED_4 = 14;
    MISC = 15;
}

smsg SMSG_SET_PROFICIENCY = 0x0127 {
    ItemClass class;
    u32 item_sub_class_mask;
}

cmsg CMSG_SET_ACTION_BUTTON = 0x0128 {
    u8 button;
    u32 action_type {
        comment = "Most significant byte determines types, rest is action.";
    }
}

smsg SMSG_ACTION_BUTTONS = 0x0129 {
    u32[120] data;
}

smsg SMSG_LEARNED_SPELL = 0x012B {
    u32 spell_id;
}

smsg SMSG_SUPERCEDED_SPELL = 0x012C {
    u16 new_spell_id;
    u16 old_spell_id;
}

cmsg CMSG_CANCEL_CAST = 0x012F {
    u32 spell_id;
}

enum SpellCastResult : u8 {
    AFFECTING_COMBAT = 0x00;
    ALREADY_AT_FULL_HEALTH = 0x01;
    ALREADY_AT_FULL_MANA = 0x02;
    ALREADY_BEING_TAMED = 0x03;
    ALREADY_HAVE_CHARM = 0x04;
    ALREADY_HAVE_SUMMON = 0x05;
    ALREADY_OPEN = 0x06;
    MORE_POWERFUL_SPELL_ACTIVE = 0x07;
    BAD_IMPLICIT_TARGETS = 0x09;
    BAD_TARGETS = 0x0A;
    CANT_BE_CHARMED = 0x0B;
    CANT_BE_DISENCHANTED = 0x0C;
    CANT_BE_PROSPECTED = 0x0D;
    CANT_CAST_ON_TAPPED = 0x0E;
    CANT_DUEL_WHILE_INVISIBLE = 0x0F;
    CANT_DUEL_WHILE_STEALTHED = 0x10;
    CANT_TOO_CLOSE_TO_ENEMY = 0x11;
    CANT_DO_THAT_YET = 0x12;
    CASTER_DEAD = 0x13;
    CHARMED = 0x14;
    CHEST_IN_USE = 0x15;
    CONFUSED = 0x16;
    DONT_REPORT = 0x17;
    EQUIPPED_ITEM = 0x18;
    EQUIPPED_ITEM_CLASS = 0x19;
    EQUIPPED_ITEM_CLASS_MAINHAND = 0x1A;
    EQUIPPED_ITEM_CLASS_OFFHAND = 0x1B;
    ERROR = 0x1C;
    FIZZLE = 0x1D;
    FLEEING = 0x1E;
    FOOD_LOWLEVEL = 0x1F;
    HIGHLEVEL = 0x20;
    IMMUNE = 0x22;
    INTERRUPTED = 0x23;
    INTERRUPTED_COMBAT = 0x24;
    ITEM_ALREADY_ENCHANTED = 0x25;
    ITEM_GONE = 0x26;
    ENCHANT_NOT_EXISTING_ITEM = 0x27;
    ITEM_NOT_READY = 0x28;
    LEVEL_REQUIREMENT = 0x29;
    LINE_OF_SIGHT = 0x2A;
    LOWLEVEL = 0x2B;
    SKILL_NOT_HIGH_ENOUGH = 0x2C;
    MAINHAND_EMPTY = 0x2D;
    MOVING = 0x2E;
    NEED_AMMO = 0x2F;
    NEED_REQUIRES_SOMETHING = 0x30;
    NEED_EXOTIC_AMMO = 0x31;
    NOPATH = 0x32;
    NOT_BEHIND = 0x33;
    NOT_FISHABLE = 0x34;
    NOT_HERE = 0x35;
    NOT_INFRONT = 0x36;
    NOT_IN_CONTROL = 0x37;
    NOT_KNOWN = 0x38;
    NOT_MOUNTED = 0x39;
    NOT_ON_TAXI = 0x3A;
    NOT_ON_TRANSPORT = 0x3B;
    NOT_READY = 0x3C;
    NOT_SHAPESHIFT = 0x3D;
    NOT_STANDING = 0x3E;
    NOT_TRADEABLE = 0x3F {
        comment = "rogues trying 'enchant' other's weapon with poison";
    }
    NOT_TRADING = 0x40;
    NOT_UNSHEATHED = 0x41;
    NOT_WHILE_GHOST = 0x42;
    NO_AMMO = 0x43;
    NO_CHARGES_REMAIN = 0x44;
    NO_CHAMPION = 0x45;
    NO_COMBO_POINTS = 0x46;
    NO_DUELING = 0x47;
    NO_ENDURANCE = 0x48;
    NO_FISH = 0x49;
    NO_ITEMS_WHILE_SHAPESHIFTED = 0x4A;
    NO_MOUNTS_ALLOWED = 0x4B;
    NO_PET = 0x4C;
    NO_POWER = 0x4D;
    NOTHING_TO_DISPEL = 0x4E;
    NOTHING_TO_STEAL = 0x4F;
    ONLY_ABOVEWATER = 0x50;
    ONLY_DAYTIME = 0x51;
    ONLY_INDOORS = 0x52;
    ONLY_MOUNTED = 0x53;
    ONLY_NIGHTTIME = 0x54;
    ONLY_OUTDOORS = 0x55;
    ONLY_SHAPESHIFT = 0x56;
    ONLY_STEALTHED = 0x57;
    ONLY_UNDERWATER = 0x58;
    OUT_OF_RANGE = 0x59;
    PACIFIED = 0x5A;
    POSSESSED = 0x5B;
    REQUIRES_AREA = 0x5D;
    REQUIRES_SPELL_FOCUS = 0x5E;
    ROOTED = 0x5F;
    SILENCED = 0x60;
    SPELL_IN_PROGRESS = 0x61;
    SPELL_LEARNED = 0x62;
    SPELL_UNAVAILABLE = 0x63;
    STUNNED = 0x64;
    TARGETS_DEAD = 0x65;
    TARGET_AFFECTING_COMBAT = 0x66;
    TARGET_AURASTATE = 0x67;
    TARGET_DUELING = 0x68;
    TARGET_ENEMY = 0x69;
    TARGET_ENRAGED = 0x6A;
    TARGET_FRIENDLY = 0x6B;
    TARGET_IN_COMBAT = 0x6C;
    TARGET_IS_PLAYER = 0x6D;
    TARGET_NOT_DEAD = 0x6E;
    TARGET_NOT_IN_PARTY = 0x6F;
    TARGET_NOT_LOOTED = 0x70;
    TARGET_NOT_PLAYER = 0x71;
    TARGET_NO_POCKETS = 0x72;
    TARGET_NO_WEAPONS = 0x73;
    TARGET_UNSKINNABLE = 0x74;
    THIRST_SATIATED = 0x75;
    TOO_CLOSE = 0x76;
    TOO_MANY_OF_ITEM = 0x77;
    TRAINING_POINTS = 0x79;
    TRY_AGAIN = 0x7A;
    UNIT_NOT_BEHIND = 0x7B;
    UNIT_NOT_INFRONT = 0x7C;
    WRONG_PET_FOOD = 0x7D;
    NOT_WHILE_FATIGUED = 0x7E;
    TARGET_NOT_IN_INSTANCE = 0x7F;
    NOT_WHILE_TRADING = 0x80;
    TARGET_NOT_IN_RAID = 0x81;
    DISENCHANT_WHILE_LOOTING = 0x82;
    PROSPECT_WHILE_LOOTING = 0x83;
    TARGET_FREEFORALL = 0x85;
    NO_EDIBLE_CORPSES = 0x86;
    ONLY_BATTLEGROUNDS = 0x87;
    TARGET_NOT_GHOST = 0x88;
    TOO_MANY_SKILLS = 0x89;
    CANT_USE_NEW_ITEM = 0x8A;
    WRONG_WEATHER = 0x8B;
    DAMAGE_IMMUNE = 0x8C;
    PREVENTED_BY_MECHANIC = 0x8D;
    PLAY_TIME = 0x8E;
    REPUTATION = 0x8F;
    MIN_SKILL = 0x90;
    UNKNOWN = 0x91;
}

smsg SMSG_SPELL_FAILURE = 0x0133 {
    u64 guid;
    u32 spell_id;
    SpellCastResult result;
}

smsg SMSG_COOLDOWN_EVENT = 0x0135 {
    u32 spell_id;
    u64 guid;
}

cmsg CMSG_CANCEL_AURA = 0x0136 {
    u32 spell_id;
}


smsg SMSG_UPDATE_AURA_DURATION = 0x0137 {
    u8 aura_slot;
    u32 aura_duration;
}

smsg SMSG_PET_CAST_FAILED = 0x0138 {
    u32 spell_id;
    u8 unknown1 {
        comment = "vmangos sets to 2 and cmangos sets to 0.";
    }
    SpellCastResult result;
}

cmsg CMSG_CANCEL_CHANNELLING = 0x013B {
    u32 spell_id;
}

enum AiReaction : u32 {
    ALERT = 0 {
        comment = "pre-aggro (used in client packet handler)";
    }
    FRIENDLY = 1 {
        comment = "(NOT used in client packet handler)";
    }
    HOSTILE = 2 {
        comment = "sent on every attack, triggers aggro sound (used in client packet handler)";
    }
    AFRAID = 3 {
        comment = "seen for polymorph (when AI not in control of self?) (NOT used in client packet handler)";
    }
    DESTROY = 4 {
        comment = "used on object destroy (NOT used in client packet handler)";
    }
}

smsg SMSG_AI_REACTION = 0x013C {
    u64 guid;
    AiReaction reaction;
}

cmsg CMSG_SET_TARGET_OBSOLETE = 0x013E {
    u64 guid;
}

cmsg CMSG_ATTACKSWING = 0x0141 {
    u64 guid;
}

cmsg CMSG_ATTACKSTOP = 0x0142 {}

smsg SMSG_ATTACKSTART = 0x0143 {
    u64 attacker_guid;
    u64 victim_guid;
}

smsg SMSG_ATTACKSWING_NOTINRANGE = 0x0145 {}

smsg SMSG_ATTACKSWING_BADFACING = 0x0146 {}

smsg SMSG_ATTACKSWING_NOTSTANDING = 0x0147 {}

smsg SMSG_ATTACKSWING_DEADTARGET = 0x0148 {}

smsg SMSG_ATTACKSWING_CANT_ATTACK = 0x0149 {}

smsg SMSG_CANCEL_COMBAT = 0x014E {}

smsg SMSG_BINDPOINTUPDATE = 0x0155 {
    f32 position_x;
    f32 position_y;
    f32 position_z;
    Map map;
    Area area;
} {
    description = "Set new hearthstone location.";
}

smsg SMSG_PLAYERBOUND = 0x0158 {
    u64 guid;
    Area area;
}

cmsg CMSG_REPOP_REQUEST = 0x015A {}

cmsg CMSG_RESURRECT_RESPONSE = 0x015C {
    u64 guid;
    u8 status;
}


smsg SMSG_RESURRECT_REQUEST = 0x015B {
    u64 guid;
    u32 name_length;
    /* CString with length? */
    CString name;
    u8 caster_is_spirit_healer;
    u8 respect_resurrection_timer;
}

cmsg CMSG_LOOT = 0x015D {
    u64 guid;
}

cmsg CMSG_LOOT_MONEY = 0x015E {}

cmsg CMSG_LOOT_RELEASE = 0x015F {
    u64 guid;
}

enum LootMethod : u8 {
    CORPSE                 = 1;
    PICKPOCKETING          = 2;
    FISHING                = 3;
    DISENCHANTING          = 4;
    SKINNING               = 6 {
        comment = "unsupported by client, send LOOT_PICKPOCKETING instead";
    }
    FISHINGHOLE            = 20 {
        comment = "unsupported by client, send LOOT_FISHING instead";
    }
    FISHING_FAIL           = 21 {
        comment = "unsupported by client, send LOOT_FISHING instead";
    }
    INSIGNIA               = 22 {
        comment = "unsupported by client, send LOOT_CORPSE instead";
    }
}

smsg SMSG_LOOT_RESPONSE = 0x0160 {
    u64 guid;
    LootMethod loot_method;
}

smsg SMSG_LOOT_RELEASE_RESPONSE = 0x0161 {
    u64 guid;
    u8 unknown1 {
        comment = "Set to 1 on mangoszero/vmangos/cmangos";
    }
}

smsg SMSG_LOOT_REMOVED = 0x0162 {
    u8 slot;
} {
    description = "Notify a looting player that an item has been taken.";
}

smsg SMSG_LOOT_MONEY_NOTIFY = 0x0163 {
    u32 amount;
}

smsg SMSG_LOOT_CLEAR_MONEY = 0x0165 {}

smsg SMSG_DUEL_REQUESTED = 0x0167 {
    u64 initiator_guid;
    u64 target_guid;
}

smsg SMSG_DUEL_OUTOFBOUNDS = 0x0168 {}

smsg SMSG_DUEL_INBOUNDS = 0x0169 {}


enum DuelWinnerReason : u8 {
    WON = 0;
    FLED = 1;
}

smsg SMSG_DUEL_WINNER = 0x016B {
    DuelWinnerReason reason;
    CString opponent_name;
    CString initiator_name;
}

cmsg CMSG_DUEL_ACCEPTED = 0x016C {
    u64 guid;
}

cmsg CMSG_DUEL_CANCELLED = 0x016D {
    u64 guid;
}

enum MountResult : u32 {
    INVALIDMOUNTEE = 0    {
        comment = "You can't mount that unit!";
    }
    TOOFARAWAY = 1    {
        comment = "That mount is too far away!";
    }
    ALREADYMOUNTED = 2    {
        comment = "You're already mounted!";
    }
    NOTMOUNTABLE = 3    {
        comment = "That unit can't be mounted!";
    }
    NOTYOURPET = 4    {
        comment = "That mount isn't your pet!";
    }
    OTHER = 5    {
        comment = "internal";
    }
    LOOTING = 6    {
        comment = "You can't mount while looting!";
    }
    RACECANTMOUNT = 7    {
        comment = "You can't mount because of your race!";
    }
    SHAPESHIFTED = 8    {
        comment = "You can't mount while shapeshifted!";
    }
    FORCEDDISMOUNT = 9    {
        comment = "You dismount before continuing.";
    }
    OK = 10    {
        comment = "no error";
    }
}

smsg SMSG_MOUNTRESULT = 0x016E {
    MountResult result;
}

smsg SMSG_DISMOUNTRESULT = 0x016F {
    MountResult result;
}


