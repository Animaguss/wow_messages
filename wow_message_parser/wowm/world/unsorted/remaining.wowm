#tag_all versions "1.12";

enum GroupLootSetting : u8 {
    FREE_FOR_ALL = 0;
    ROUND_ROBIN = 1;
    MASTER_LOOT = 2;
    GROUP_LOOT = 3;
    NEED_BEFORE_GREED = 4;
}

enum ItemQuality : u8 {
    POOR = 0 ;
    NORMAL = 1;
    UNCOMMON = 2;
    RARE = 3;
    EPIC = 4;
    LEGENDARY = 5;
    ARTIFACT = 6;
}

enum PartyOperation : u8 {
    INVITE = 0;
    LEAVE = 2;
}

enum PartyResult : u8 {
    SUCCESS = 0;
    BAD_PLAYER_NAME = 1;
    TARGET_NOT_IN_GROUP = 2;
    GROUP_FULL = 3;
    ALREADY_IN_GROUP = 4;
    NOT_IN_GROUP = 5;
    NOT_LEADER = 6;
    PLAYER_WRONG_FACTION = 7;
    IGNORING_YOU = 8;
}

enum GuildEvent : u8 {
    PROMOTION = 0;
    DEMOTION = 1;
    MOTD = 2;
    JOINED = 3;
    LEFT = 4;
    REMOVED = 5;
    LEADER_IS = 6;
    LEADER_CHANGED = 7;
    DISBANDED = 8;
    TABARD_CHANGED = 9;
    UNKNOWN10 = 10;
    ROSTER_UPDATE = 11;
    SIGNED_ON = 12;
    SIGNED_OFF = 13;
}

enum GuildCommand : u8 {
    CREATE = 0x00;
    INVITE = 0x01;
    QUIT = 0x03;
    FOUNDER = 0x0E;
    UNKNOWN19 = 0x13 {
        comment = "cmangos claims this triggers UI event EVENT_GUILD_ROSTER_UPDATE";
    }
    UNKNOWN20 = 0x14 {
        comment = "cmangos claims this triggers UI event EVENT_GUILD_ROSTER_UPDATE";
    }
}

enum GuildCommandResult : u8 {
    PLAYER_NO_MORE_IN_GUILD     = 0x00; /* no message/error */
    GUILD_INTERNAL              = 0x01;
    ALREADY_IN_GUILD            = 0x02;
    ALREADY_IN_GUILD_S          = 0x03;
    INVITED_TO_GUILD            = 0x04;
    ALREADY_INVITED_TO_GUILD_S  = 0x05;
    GUILD_NAME_INVALID          = 0x06;
    GUILD_NAME_EXISTS_S         = 0x07;
    GUILD_LEADER_LEAVE          = 0x08; /* for Typecommand 0x03 */
    GUILD_PERMISSIONS           = 0x08; /* for another Typecommand */
    GUILD_PLAYER_NOT_IN_GUILD   = 0x09;
    GUILD_PLAYER_NOT_IN_GUILD_S = 0x0A;
    GUILD_PLAYER_NOT_FOUND_S    = 0x0B;
    GUILD_NOT_ALLIED            = 0x0C;
    GUILD_RANK_TOO_HIGH_S       = 0x0D;
    GUILD_RANK_TOO_LOW_S        = 0x0E;
}

enum ChatType : u8 {
    SAY                    = 0x00;
    PARTY                  = 0x01;
    RAID                   = 0x02;
    GUILD                  = 0x03;
    OFFICER                = 0x04;
    YELL                   = 0x05;
    WHISPER                = 0x06;
    WHISPER_INFORM         = 0x07;
    EMOTE                  = 0x08;
    TEXT_EMOTE             = 0x09;
    SYSTEM                 = 0x0A;
    MONSTER_SAY            = 0x0B;
    MONSTER_YELL           = 0x0C;
    MONSTER_EMOTE          = 0x0D;
    CHANNEL                = 0x0E;
    CHANNEL_JOIN           = 0x0F;
    CHANNEL_LEAVE          = 0x10;
    CHANNEL_LIST           = 0x11;
    CHANNEL_NOTICE         = 0x12;
    CHANNEL_NOTICE_USER    = 0x13;
    AFK                    = 0x14;
    DND                    = 0x15;
    IGNORED                = 0x16;
    SKILL                  = 0x17;
    LOOT                   = 0x18;
    MONSTER_WHISPER        = 0x1A;
    BG_SYSTEM_NEUTRAL      = 0x52;
    BG_SYSTEM_ALLIANCE     = 0x53;
    BG_SYSTEM_HORDE        = 0x54;
    RAID_LEADER            = 0x57;
    RAID_WARNING           = 0x58;
    RAID_BOSS_WHISPER      = 0x59;
    RAID_BOSS_EMOTE        = 0x5A;
    BATTLEGROUND           = 0x5C;
    BATTLEGROUND_LEADER    = 0x5D;
}

enum Language : u32 {
    UNIVERSAL      = 0;
    ORCISH         = 1;
    DARNASSIAN     = 2;
    TAURAHE        = 3;
    DWARVISH       = 6;
    COMMON         = 7;
    DEMONIC        = 8;
    TITAN          = 9;
    THALASSIAN     = 10;
    DRACONIC       = 11;
    KALIMAG        = 12;
    GNOMISH        = 13;
    TROLL          = 14;
    GUTTERSPEAK    = 33;
    ADDON          = 0xFFFFFFFF;
}

enum ChatNotify : u8 {
    JOINED_NOTICE = 0x00 {
        comment = "%s joined channel.";
    }
    LEFT_NOTICE = 0x01 {
        comment = "%s left channel.";
    }
    YOU_JOINED_NOTICE = 0x02 {
        comment = "Joined Channel: [%s] -- You joined";
    }
    YOU_LEFT_NOTICE = 0x03 {
        comment = "Left Channel: [%s] -- You left";
    }
    WRONG_PASSWORD_NOTICE = 0x04 {
        comment = "Wrong password for %s.";
    }
    NOT_MEMBER_NOTICE = 0x05 {
        comment = "Not on channel %s.";
    }
    NOT_MODERATOR_NOTICE = 0x06 {
        comment = "Not a moderator of %s.";
    }
    PASSWORD_CHANGED_NOTICE = 0x07 {
        comment = "[%s] Password changed by %s.";
    }
    OWNER_CHANGED_NOTICE = 0x08 {
        comment = "[%s] Owner changed to %s.";
    }
    PLAYER_NOT_FOUND_NOTICE = 0x09 {
        comment = "[%s] Player %s was not found.";
    }
    NOT_OWNER_NOTICE = 0x0A {
        comment = "[%s] You are not the channel owner.";
    }
    CHANNEL_OWNER_NOTICE = 0x0B {
        comment = "[%s] Channel owner is %s.";
    }
    MODE_CHANGE_NOTICE = 0x0C;
    ANNOUNCEMENTS_ON_NOTICE = 0x0D {
        comment = "[%s] Channel announcements enabled by %s.";
    }
    ANNOUNCEMENTS_OFF_NOTICE = 0x0E {
        comment = "[%s] Channel announcements disabled by %s.";
    }
    MODERATION_ON_NOTICE = 0x0F {
        comment = "[%s] Channel moderation enabled by %s.";
    }
    MODERATION_OFF_NOTICE = 0x10 {
        comment = "[%s] Channel moderation disabled by %s.";
    }
    MUTED_NOTICE = 0x11 {
        comment = "[%s] You do not have permission to speak.";
    }
    PLAYER_KICKED_NOTICE = 0x12 {
        comment = "[%s] Player %s kicked by %s.";
    }
    BANNED_NOTICE = 0x13 {
        comment = "[%s] You are banned from that channel.";
    }
    PLAYER_BANNED_NOTICE = 0x14 {
        comment = "[%s] Player %s banned by %s.";
    }
    PLAYER_UNBANNED_NOTICE = 0x15 {
        comment = "[%s] Player %s unbanned by %s.";
    }
    PLAYER_NOT_BANNED_NOTICE = 0x16 {
        comment = "[%s] Player %s is not banned.";
    }
    PLAYER_ALREADY_MEMBER_NOTICE = 0x17 {
        comment = "[%s] Player %s is already on the channel.";
    }
    INVITE_NOTICE = 0x18 {
        comment = "%2$s has invited you to join the channel '%1$s'.";
    }
    INVITE_WRONG_FACTION_NOTICE = 0x19 {
        comment = "Target is in the wrong alliance for %s.";
    }
    WRONG_FACTION_NOTICE = 0x1A {
        comment = "Wrong alliance for %s.";
    }
    INVALID_NAME_NOTICE = 0x1B {
        comment = "Invalid channel name";
    }
    NOT_MODERATED_NOTICE = 0x1C {
        comment = "%s is not moderated";
    }
    PLAYER_INVITED_NOTICE = 0x1D {
        comment = "[%s] You invited %s to join the channel";
    }
    PLAYER_INVITE_BANNED_NOTICE = 0x1E {
        comment = "[%s] %s has been banned.";
    }
    THROTTLED_NOTICE = 0x1F {
        comment = "[%s] The number of messages that can be sent to this channel is limited, please wait to send another message.";
    }
}

struct ChannelMember {
    u64 guid;
    /* TODO: unknown flags */
    u8 member_flags;
}

enum CinematicSequenceId : u32 {
    HUMAN = 81;
    ORC = 21;
    DWARF = 41;
    NIGHT_ELF = 61;
    UNDEAD = 2;
    TAUREN = 141;
    GNOME = 101;
    TROLL = 121;
    GOBLIN = 0;
}

enum UnitStandState : u8 {
    STAND = 0;
    SIT = 1;
    SIT_CHAIR = 2;
    SLEEP = 3;
    SIT_LOW_CHAIR = 4;
    SIT_MEDIUM_CHAIR = 5;
    SIT_HIGH_CHAIR = 6;
    DEAD = 7;
    KNEEL = 8;
    CUSTOM = 9 {
        comment = "Used for Cthun according to cmangos.";
    }
}

enum Emote : u32 {
    ONESHOT_NONE = 0;
    ONESHOT_TALK = 1;
    ONESHOT_BOW = 2;
    ONESHOT_WAVE = 3;
    ONESHOT_CHEER = 4;
    ONESHOT_EXCLAMATION = 5;
    ONESHOT_QUESTION = 6;
    ONESHOT_EAT = 7;
    STATE_DANCE = 10;
    ONESHOT_LAUGH = 11;
    STATE_SLEEP = 12;
    STATE_SIT = 13;
    ONESHOT_RUDE = 14;
    ONESHOT_ROAR = 15;
    ONESHOT_KNEEL = 16;
    ONESHOT_KISS = 17;
    ONESHOT_CRY = 18;
    ONESHOT_CHICKEN = 19;
    ONESHOT_BEG = 20;
    ONESHOT_APPLAUD = 21;
    ONESHOT_SHOUT = 22;
    ONESHOT_FLEX = 23;
    ONESHOT_SHY = 24;
    ONESHOT_POINT = 25;
    STATE_STAND = 26;
    STATE_READYUNARMED = 27;
    STATE_WORK_SHEATHED = 28;
    STATE_POINT = 29;
    STATE_NONE = 30;
    ONESHOT_WOUND = 33;
    ONESHOT_WOUNDCRITICAL = 34;
    ONESHOT_ATTACKUNARMED = 35;
    ONESHOT_ATTACK1H = 36;
    ONESHOT_ATTACK2HTIGHT = 37;
    ONESHOT_ATTACK2HLOOSE = 38;
    ONESHOT_PARRYUNARMED = 39;
    ONESHOT_PARRYSHIELD = 43;
    ONESHOT_READYUNARMED = 44;
    ONESHOT_READY1H = 45;
    ONESHOT_READYBOW = 48;
    ONESHOT_SPELLPRECAST = 50;
    ONESHOT_SPELLCAST = 51;
    ONESHOT_BATTLEROAR = 53;
    ONESHOT_SPECIALATTACK1H = 54;
    ONESHOT_KICK = 60;
    ONESHOT_ATTACKTHROWN = 61;
    STATE_STUN = 64;
    STATE_DEAD = 65;
    ONESHOT_SALUTE = 66;
    STATE_KNEEL = 68;
    STATE_USESTANDING = 69;
    ONESHOT_WAVE_NOSHEATHE = 70;
    ONESHOT_CHEER_NOSHEATHE = 71;
    ONESHOT_EAT_NOSHEATHE = 92;
    STATE_STUN_NOSHEATHE = 93;
    ONESHOT_DANCE = 94;
    ONESHOT_SALUTE_NOSHEATH = 113;
    STATE_USESTANDING_NOSHEATHE = 133;
    ONESHOT_LAUGH_NOSHEATHE = 153;
    STATE_WORK = 173;
    STATE_SPELLPRECAST = 193;
    ONESHOT_READYRIFLE = 213;
    STATE_READYRIFLE = 214;
    STATE_WORK_MINING = 233;
    STATE_WORK_CHOPWOOD = 234;
    STATE_APPLAUD = 253;
    ONESHOT_LIFTOFF = 254;
    ONESHOT_YES = 273;
    ONESHOT_NO = 274;
    ONESHOT_TRAIN = 275;
    ONESHOT_LAND = 293;
    STATE_AT_EASE = 313;
    STATE_READY1H = 333;
    STATE_SPELLKNEELSTART = 353;
    STATE_SUBMERGED = 373;
    ONESHOT_SUBMERGE = 374;
    STATE_READY2H = 375;
    STATE_READYBOW = 376;
    ONESHOT_MOUNTSPECIAL = 377;
    STATE_TALK = 378;
    STATE_FISHING = 379;
    ONESHOT_FISHING = 380;
    ONESHOT_LOOT = 381;
    STATE_WHIRLWIND = 382;
    STATE_DROWNED = 383;
    STATE_HOLD_BOW = 384;
    STATE_HOLD_RIFLE = 385;
    STATE_HOLD_THROWN = 386;
    ONESHOT_DROWN = 387;
    ONESHOT_STOMP = 388;
    ONESHOT_ATTACKOFF = 389;
    ONESHOT_ATTACKOFFPIERCE = 390;
    STATE_ROAR = 391;
    STATE_LAUGH = 392;
    ONESHOT_CREATURE_SPECIAL = 393;
    ONESHOT_JUMPLANDRUN = 394;
    ONESHOT_JUMPEND = 395;
    ONESHOT_TALK_NOSHEATHE = 396;
    ONESHOT_POINT_NOSHEATHE = 397;
    STATE_CANNIBALIZE = 398;
    ONESHOT_JUMPSTART = 399;
    STATE_DANCESPECIAL = 400;
    ONESHOT_DANCESPECIAL = 401;
    ONESHOT_CUSTOMSPELL01 = 402;
    ONESHOT_CUSTOMSPELL02 = 403;
    ONESHOT_CUSTOMSPELL03 = 404;
    ONESHOT_CUSTOMSPELL04 = 405;
    ONESHOT_CUSTOMSPELL05 = 406;
    ONESHOT_CUSTOMSPELL06 = 407;
    ONESHOT_CUSTOMSPELL07 = 408;
    ONESHOT_CUSTOMSPELL08 = 409;
    ONESHOT_CUSTOMSPELL09 = 410;
    ONESHOT_CUSTOMSPELL10 = 411;
    STATE_EXCLAIM = 412;
    STATE_SIT_CHAIR_MED = 415;
    STATE_SPELLEFFECT_HOLD = 422;
    STATE_EAT_NO_SHEATHE = 423;
}

enum InventoryResult : u8 {
    OK = 0;
    CANT_EQUIP_LEVEL_I = 1;
    CANT_EQUIP_SKILL = 2;
    ITEM_DOESNT_GO_TO_SLOT = 3;
    BAG_FULL = 4;
    NONEMPTY_BAG_OVER_OTHER_BAG = 5;
    CANT_TRADE_EQUIP_BAGS = 6;
    ONLY_AMMO_CAN_GO_HERE = 7;
    NO_REQUIRED_PROFICIENCY = 8;
    NO_EQUIPMENT_SLOT_AVAILABLE = 9;
    YOU_CAN_NEVER_USE_THAT_ITEM = 10;
    YOU_CAN_NEVER_USE_THAT_ITEM2 = 11;
    NO_EQUIPMENT_SLOT_AVAILABLE2 = 12;
    CANT_EQUIP_WITH_TWOHANDED = 13;
    CANT_DUAL_WIELD = 14;
    ITEM_DOESNT_GO_INTO_BAG = 15;
    ITEM_DOESNT_GO_INTO_BAG2 = 16;
    CANT_CARRY_MORE_OF_THIS = 17;
    NO_EQUIPMENT_SLOT_AVAILABLE3 = 18;
    ITEM_CANT_STACK = 19;
    ITEM_CANT_BE_EQUIPPED = 20;
    ITEMS_CANT_BE_SWAPPED = 21;
    SLOT_IS_EMPTY = 22;
    ITEM_NOT_FOUND = 23;
    CANT_DROP_SOULBOUND = 24;
    OUT_OF_RANGE = 25;
    TRIED_TO_SPLIT_MORE_THAN_COUNT = 26;
    COULDNT_SPLIT_ITEMS = 27;
    MISSING_REAGENT = 28;
    NOT_ENOUGH_MONEY = 29;
    NOT_A_BAG = 30;
    CAN_ONLY_DO_WITH_EMPTY_BAGS = 31;
    DONT_OWN_THAT_ITEM = 32;
    CAN_EQUIP_ONLY1_QUIVER = 33;
    MUST_PURCHASE_THAT_BAG_SLOT = 34;
    TOO_FAR_AWAY_FROM_BANK = 35;
    ITEM_LOCKED = 36;
    YOU_ARE_STUNNED = 37;
    YOU_ARE_DEAD = 38;
    CANT_DO_RIGHT_NOW = 39;
    INT_BAG_ERROR = 40;
    CAN_EQUIP_ONLY1_BOLT = 41;
    CAN_EQUIP_ONLY1_AMMOPOUCH = 42;
    STACKABLE_CANT_BE_WRAPPED = 43;
    EQUIPPED_CANT_BE_WRAPPED = 44;
    WRAPPED_CANT_BE_WRAPPED = 45;
    BOUND_CANT_BE_WRAPPED = 46;
    UNIQUE_CANT_BE_WRAPPED = 47;
    BAGS_CANT_BE_WRAPPED = 48;
    ALREADY_LOOTED = 49;
    INVENTORY_FULL = 50;
    BANK_FULL = 51;
    ITEM_IS_CURRENTLY_SOLD_OUT = 52;
    BAG_FULL3 = 53;
    ITEM_NOT_FOUND2 = 54;
    ITEM_CANT_STACK2 = 55;
    BAG_FULL4 = 56;
    ITEM_SOLD_OUT = 57;
    OBJECT_IS_BUSY = 58;
    NONE = 59;
    NOT_IN_COMBAT = 60;
    NOT_WHILE_DISARMED = 61;
    BAG_FULL6 = 62;
    CANT_EQUIP_RANK = 63;
    CANT_EQUIP_REPUTATION = 64;
    TOO_MANY_SPECIAL_BAGS = 65;
    LOOT_CANT_LOOT_THAT_NOW = 66;
} {
    comment = "Any values greater than maximum enum value show as 'bag full'";
}

enum TradeStatus : u32 {
    BUSY = 0;
    BEGIN_TRADE = 1;
    OPEN_WINDOW = 2;
    TRADE_CANCELED = 3;
    TRADE_ACCEPT = 4;
    BUSY_2 = 5;
    NO_TARGET = 6;
    BACK_TO_TRADE = 7;
    TRADE_COMPLETE = 8;
    TRADE_REJECTED = 9;
    TARGET_TO_FAR = 10;
    WRONG_FACTION = 11;
    CLOSE_WINDOW = 12;
    UNKNOWN_13 = 13;
    IGNORE_YOU = 14;
    YOU_STUNNED = 15;
    TARGET_STUNNED = 16;
    YOU_DEAD = 17;
    TARGET_DEAD = 18;
    YOU_LOGOUT = 19;
    TARGET_LOGOUT = 20;
    TRIAL_ACCOUNT = 21;
    ONLY_CONJURED = 22;
    NOT_ON_TAPLIST = 23;
}





enum GuildEmblemResult : u32 {
    SUCCESS = 0 {
        comment = "Guild Emblem saved.";
    }
    INVALID_TABARD_COLORS = 1;
    NO_GUILD = 2 {
        comment = "vmangos: You are not part of a guild!";
    }
    NOT_GUILD_MASTER = 3 {
        comment = "vmangos: Only guild leaders can create emblems.";
    }
    NOT_ENOUGH_MONEY = 4 {
        comment = "vmangos: You can't afford to do that.";
    }
    NO_MESSAGE = 5 {
        comment = "mangoszero: [This version] fails silently.";
    }
}



struct StabledPet {
    u32 pet_number;
    u32 entry;
    u32 level;
    CString name;
    u32 loyalty;
    u8 slot {
        comment = "vmangos/mangoszero/cmangos: client slot 1 == current pet (0)";
    }
}

enum CorpseQueryResult : u8 {
    NOT_FOUND = 0;
    FOUND = 1;
}



enum BattlegroundEndStatus : u8 {
    NOT_ENDED = 0;
    ENDED = 1;
}

enum BattlegroundWinner : u8 {
    HORDE = 0;
    ALLIANCE = 1;
    NONE = 2;
}

struct BattlegroundPlayer {
    Guid player;
    (u32)PvpRank rank;
    u32 killing_blows;
    u32 honorable_kills;
    u32 deaths;
    u32 bonus_honor;
    u32 amount_of_extra_fields;
    u32[amount_of_extra_fields] fields {
        comment = "This depends on the BG in question. AV expects 7: Graveyards Assaulted, Graveyards Defended, Towers Assaulted, Towers Defended, Secondary Objectives, LieutenantCount, SecondaryNpc";
        comment = "WSG expects 2: Flag captures and flag returns";
        comment = "AB expects 2: Bases assaulted and bases defended";
    }
}


struct BattlegroundPlayerPosition {
    Guid player;
    f32 position_x;
    f32 position_y;
}

flag FactionFlag : u8 {
    VISIBLE = 0x01 {
        comment = "makes visible in client (set or can be set at interaction with target of this faction)";
    }
    AT_WAR = 0x02 {
        comment = "enable AtWar-button in client. player controlled (except opposition team always war state), Flag only set on initial creation";
    }
    HIDDEN = 0x04 {
        comment = "hidden faction from reputation pane in client (player can gain reputation, but this update not sent to client)";
    }
    INVISIBLE_FORCED = 0x08 {
        comment = "always overwrite FACTION_FLAG_VISIBLE and hide faction in rep.list, used for hide opposite team factions";
    }
    PEACE_FORCED = 0x10 {
        comment = "always overwrite FACTION_FLAG_AT_WAR, used for prevent war with own team factions";
    }
    INACTIVE = 0x20 {
        comment = "player controlled, state stored in characters.data ( CMSG_SET_FACTION_INACTIVE )";
    }
    RIVAL = 0x40 {
        comment = "flag for the two competing outland factions";
    }
}

struct FactionInitializer {
    FactionFlag flag;
    /* TODO Units? */
    u32 standing;
}

struct Faction {
    u32 reputation_list_id;
    /* TODO Units? */
    u32 standing;
}

enum Power : u8 {
    MANA = 0 {
        comment = "The most common one, mobs usually have this or rage";
    }
    RAGE = 1 {
        comment = "This is what warriors use to cast their spells";
    }
    FOCUS = 2 {
        comment = "Used by hunters after Cataclysm (4.x)";
    }
    ENERGY = 3 {
        comment = "Used by rouges to do their spells";
    }
    HAPPINESS = 4 {
        comment = "Hunter's pet's happiness affect their damage";
    }
    MAX_POWERS = 5;
    ALL = 127 {
        comment = "default for class? - need check for TBC";
    }
    /* Correct?
    HEALTH = 0xFFFFFFFE {
        comment = "Health, everyone has this (-2 as signed value)";
    } */
}

flag GroupUpdateFlags : u32 {
    FLAG_NONE = 0x00000000 {
        comment = "nothing";
    }
    FLAG_STATUS = 0x00000001 {
        comment = "uint8, enum GroupMemberOnlineStatus";
    }
    FLAG_CUR_HP = 0x00000002 {
        comment = "uint16";
    }
    FLAG_MAX_HP = 0x00000004 {
        comment = "uint16";
    }
    FLAG_POWER_TYPE = 0x00000008 {
        comment = "uint8, enum Powers";
    }
    FLAG_CUR_POWER = 0x00000010 {
        comment = "uint16";
    }
    FLAG_MAX_POWER = 0x00000020 {
        comment = "uint16";
    }
    FLAG_LEVEL = 0x00000040 {
        comment = "uint16";
    }
    FLAG_ZONE = 0x00000080 {
        comment = "uint16";
    }
    FLAG_POSITION = 0x00000100 {
        comment = "uint16, uint16";
    }
    FLAG_AURAS = 0x00000200 {
        comment = "uint32 mask, for each bit set uint16 spellid";
    }
    FLAG_AURAS_2 = 0x00000400 {
        comment = "uint16 above mask continuation, giving max total of 48 auras possible";
    }
    FLAG_PET_GUID = 0x00000800 {
        comment = "uint64 pet guid";
    }
    FLAG_PET_NAME = 0x00001000 {
        comment = "pet name, NULL terminated string";
    }
    FLAG_PET_MODEL_ID = 0x00002000 {
        comment = "uint16, model id";
    }
    FLAG_PET_CUR_HP = 0x00004000 {
        comment = "uint16 pet cur health";
    }
    FLAG_PET_MAX_HP = 0x00008000 {
        comment = "uint16 pet max health";
    }
    FLAG_PET_POWER_TYPE = 0x00010000 {
        comment = "uint8 pet power type";
    }
    FLAG_PET_CUR_POWER = 0x00020000 {
        comment = "uint16 pet cur power";
    }
    FLAG_PET_MAX_POWER = 0x00040000 {
        comment = "uint16 pet max power";
    }
    FLAG_PET_AURAS = 0x00080000 {
        comment = "uint32 mask, for each bit set uint16 spellid, pet auras...";
    }
    FLAG_PET_AURAS_2 = 0x00100000 {
        comment = "uint16 above mask continuation, giving max total of 48 auras possible";
    }
    MODE_OFFLINE = 0x10000000;
}

flag GroupMemberOnlineStatus : u8 {
    OFFLINE = 0x0000;
    ONLINE = 0x0001 {
        comment = "Lua_UnitIsConnected";
    }
    PVP = 0x0002 {
        comment = "Lua_UnitIsPVP";
    }
    DEAD = 0x0004 {
        comment = "Lua_UnitIsDead";
    }
    GHOST = 0x0008 {
        comment = "Lua_UnitIsGhost";
    }
    PVP_FFA = 0x0010 {
        comment = "Lua_UnitIsPVPFreeForAll";
    }
    UNK3 = 0x0020 {
        comment = "used in calls from Lua_GetPlayerMapPosition/Lua_GetBattlefieldFlagPosition";
    }
    AFK = 0x0040 {
        comment = "Lua_UnitIsAFK";
    }
    DND = 0x0080 {
        comment = "Lua_UnitIsDND";
    }
}


enum PartyMemberStatus : u32 {
    OFFLINE = 0x0000;
    ONLINE = 0x0001 {
        comment = "Lua_UnitIsConnected";
    }
    PVP = 0x0002 {
        comment = "Lua_UnitIsPVP";
    }
    DEAD = 0x0004 {
        comment = "Lua_UnitIsDead";
    }
    GHOST = 0x0008 {
        comment = "Lua_UnitIsGhost";
    }
    PVP_FFA = 0x0010 {
        comment = "Lua_UnitIsPVPFreeForAll";
    }
    ZONE_OUT = 0x0020 {
        comment = "Lua_GetPlayerMapPosition";
    }
    AFK = 0x0040 {
        comment = "Lua_UnitIsAFK";
    }
    DND = 0x0080 {
        comment = "Lua_UnitIsDND";
    }
}




enum PlayerChatTag : u8 {
    NONE = 0;
    AFK = 1;
    DND = 2;
    GM = 3;
}

enum MailType : u8 {
    NORMAL = 0;
    AUCTION = 2;
    CREATURE = 3 {
        comment = "client send CMSG_CREATURE_QUERY on this mailmessagetype";
    }
    GAMEOBJECT = 4 {
        comment = "client send CMSG_GAMEOBJECT_QUERY on this mailmessagetype";
    }
    ITEM = 5 {
        comment = "client send CMSG_ITEM_QUERY on this mailmessagetype";
    }
}


enum AuraType : u32 {
    NONE = 0;
    BIND_SIGHT = 1;
    MOD_POSSESS = 2;
    PERIODIC_DAMAGE = 3 {
        comment = "vmangos: The aura should do periodic damage, the function that handles this is Aura::HandlePeriodicDamage, the amount is usually decided by the Unit::SpellDamageBonusDone or Unit::MeleeDamageBonusDone which increases/decreases the Modifier::m_amount";
    }
    DUMMY = 4 {
        comment = "vmangos: Used by Aura::HandleAuraDummy";
    }
    MOD_CONFUSE = 5 {
        comment = "vmangos: Used by Aura::HandleModConfuse, will either confuse or unconfuse the target depending on whether the apply flag is set";
    }
    MOD_CHARM = 6;
    MOD_FEAR = 7;
    PERIODIC_HEAL = 8 {
        comment = "vmangos: The aura will do periodic heals of a target, handled by Aura::HandlePeriodicHeal, uses Unit::SpellHealingBonusDone to calculate whether to increase or decrease Modifier::m_amount";
    }
    MOD_ATTACKSPEED = 9 {
        comment = "vmangos: Changes the attackspeed, the Modifier::m_amount decides how much we change in percent, ie, if the m_amount is 50 the attackspeed will increase by 50%";
    }
    MOD_THREAT = 10 {
        comment = "vmangos: Modifies the threat that the Aura does in percent, the Modifier::m_miscvalue decides which of the SpellSchools it should affect threat for.  \see SpellSchoolMask";
    }
    MOD_TAUNT = 11 {
        comment = "vmangos: Just applies a taunt which will change the threat a mob has Taken care of in Aura::HandleModThreat";
    }
    MOD_STUN = 12 {
        comment = "vmangos: Stuns targets in different ways, taken care of in Aura::HandleAuraModStun";
    }
    MOD_DAMAGE_DONE = 13 {
        comment = "vmangos: Changes the damage done by a weapon in any hand, the Modifier::m_miscvalue will tell what school the damage is from, it's used as a bitmask \see SpellSchoolMask";
    }
    MOD_DAMAGE_TAKEN = 14 {
        comment = "vmangos: Not handled by the Aura class but instead this is implemented in Unit::MeleeDamageBonusTaken and Unit::SpellBaseDamageBonusTaken";
    }
    DAMAGE_SHIELD = 15 {
        comment = "vmangos: Not handled by the Aura class, implemented in Unit::DealMeleeDamage";
    }
    MOD_STEALTH = 16 {
        comment = "vmangos: Taken care of in Aura::HandleModStealth, take note that this is not the same thing as invisibility";
    }
    MOD_STEALTH_DETECT = 17 {
        comment = "vmangos: Not handled by the Aura class, implemented in Unit::isVisibleForOrDetect which does a lot of checks to determine whether the person is visible or not, the SPELL_AURA_MOD_STEALTH seems to determine how in/visible ie a rogue is.";
    }
    MOD_INVISIBILITY = 18 {
        comment = "vmangos: Handled by Aura::HandleInvisibility, the Modifier::m_miscvalue in the struct seems to decide what kind of invisibility it is with a bitflag. the miscvalue decides which bit is set, ie: 3 would make the 3rd bit be set.";
    }
    MOD_INVISIBILITY_DETECTION = 19 {
        comment = "vmangos: Adds one of the kinds of detections to the possible detections.  As in SPEALL_AURA_MOD_INVISIBILITY the Modifier::m_miscvalue seems to decide what kind of invisibility the Unit should be able to detect.";
    }
    OBS_MOD_HEALTH = 20 {
        comment = "20,21 unofficial";
    }
    OBS_MOD_MANA = 21;
    MOD_RESISTANCE = 22 {
        comment = "vmangos: Handled by Aura::HandleAuraModResistance, changes the resistance for a unit the field Modifier::m_miscvalue decides which kind of resistance that should be changed, for possible values see SpellSchools.  \see SpellSchools";
    }
    PERIODIC_TRIGGER_SPELL = 23 {
        comment = "vmangos: Currently just sets Aura::m_isPeriodic to apply and has a special case for Curse of the Plaguebringer.";
    }
    PERIODIC_ENERGIZE = 24 {
        comment = "vmangos: Just sets Aura::m_isPeriodic to apply";
    }
    MOD_PACIFY = 25 {
        comment = "vmangos: Changes whether the target is pacified or not depending on the apply flag.  Pacify makes the target silenced and have all it's attack skill disabled.  See: http://classic.wowhead.com/spell=6462";
    }
    MOD_ROOT = 26 {
        comment = "vmangos: Roots or unroots the target";
    }
    MOD_SILENCE = 27 {
        comment = "vmangos: Silences the target and stops and spell casts that should be stopped, they have the flag SpellPreventionType::SPELL_PREVENTION_TYPE_SILENCE";
    }
    REFLECT_SPELLS = 28;
    MOD_STAT = 29;
    MOD_SKILL = 30;
    MOD_INCREASE_SPEED = 31;
    MOD_INCREASE_MOUNTED_SPEED = 32;
    MOD_DECREASE_SPEED = 33;
    MOD_INCREASE_HEALTH = 34;
    MOD_INCREASE_ENERGY = 35;
    MOD_SHAPESHIFT = 36;
    EFFECT_IMMUNITY = 37;
    STATE_IMMUNITY = 38;
    SCHOOL_IMMUNITY = 39;
    DAMAGE_IMMUNITY = 40;
    DISPEL_IMMUNITY = 41;
    PROC_TRIGGER_SPELL = 42;
    PROC_TRIGGER_DAMAGE = 43;
    TRACK_CREATURES = 44;
    TRACK_RESOURCES = 45;
    UNKNOWN46 = 46 {
        comment = "Ignore all Gear test spells";
    }
    MOD_PARRY_PERCENT = 47;
    UNKNOWN48 = 48 {
        comment = "One periodic spell";
    }
    MOD_DODGE_PERCENT = 49;
    MOD_BLOCK_SKILL = 50;
    MOD_BLOCK_PERCENT = 51;
    MOD_CRIT_PERCENT = 52;
    PERIODIC_LEECH = 53;
    MOD_HIT_CHANCE = 54;
    MOD_SPELL_HIT_CHANCE = 55;
    TRANSFORM = 56;
    MOD_SPELL_CRIT_CHANCE = 57;
    MOD_INCREASE_SWIM_SPEED = 58;
    MOD_DAMAGE_DONE_CREATURE = 59;
    MOD_PACIFY_SILENCE = 60;
    MOD_SCALE = 61;
    PERIODIC_HEALTH_FUNNEL = 62;
    PERIODIC_MANA_FUNNEL = 63;
    PERIODIC_MANA_LEECH = 64;
    MOD_CASTING_SPEED_NOT_STACK = 65;
    FEIGN_DEATH = 66;
    MOD_DISARM = 67;
    MOD_STALKED = 68;
    SCHOOL_ABSORB = 69;
    EXTRA_ATTACKS = 70;
    MOD_SPELL_CRIT_CHANCE_SCHOOL = 71;
    MOD_POWER_COST_SCHOOL_PCT = 72;
    MOD_POWER_COST_SCHOOL = 73;
    REFLECT_SPELLS_SCHOOL = 74;
    MOD_LANGUAGE = 75;
    FAR_SIGHT = 76;
    MECHANIC_IMMUNITY = 77;
    MOUNTED = 78;
    MOD_DAMAGE_PERCENT_DONE = 79;
    MOD_PERCENT_STAT = 80;
    SPLIT_DAMAGE_PCT = 81;
    WATER_BREATHING = 82;
    MOD_BASE_RESISTANCE = 83;
    MOD_REGEN = 84;
    MOD_POWER_REGEN = 85;
    CHANNEL_DEATH_ITEM = 86;
    MOD_DAMAGE_PERCENT_TAKEN = 87;
    MOD_HEALTH_REGEN_PERCENT = 88;
    PERIODIC_DAMAGE_PERCENT = 89;
    MOD_RESIST_CHANCE = 90;
    MOD_DETECT_RANGE = 91;
    PREVENTS_FLEEING = 92;
    MOD_UNATTACKABLE = 93;
    INTERRUPT_REGEN = 94;
    GHOST = 95;
    SPELL_MAGNET = 96;
    MANA_SHIELD = 97;
    MOD_SKILL_TALENT = 98;
    MOD_ATTACK_POWER = 99;
    AURAS_VISIBLE = 100;
    MOD_RESISTANCE_PCT = 101;
    MOD_MELEE_ATTACK_POWER_VERSUS = 102;
    MOD_TOTAL_THREAT = 103;
    WATER_WALK = 104;
    FEATHER_FALL = 105;
    HOVER = 106;
    ADD_FLAT_MODIFIER = 107;
    ADD_PCT_MODIFIER = 108;
    ADD_TARGET_TRIGGER = 109;
    MOD_POWER_REGEN_PERCENT = 110;
    ADD_CASTER_HIT_TRIGGER = 111;
    OVERRIDE_CLASS_SCRIPTS = 112;
    MOD_RANGED_DAMAGE_TAKEN = 113;
    MOD_RANGED_DAMAGE_TAKEN_PCT = 114;
    MOD_HEALING = 115;
    MOD_REGEN_DURING_COMBAT = 116;
    MOD_MECHANIC_RESISTANCE = 117;
    MOD_HEALING_PCT = 118;
    SHARE_PET_TRACKING = 119;
    UNTRACKABLE = 120;
    EMPATHY = 121;
    MOD_OFFHAND_DAMAGE_PCT = 122;
    MOD_TARGET_RESISTANCE = 123;
    MOD_RANGED_ATTACK_POWER = 124;
    MOD_MELEE_DAMAGE_TAKEN = 125;
    MOD_MELEE_DAMAGE_TAKEN_PCT = 126;
    RANGED_ATTACK_POWER_ATTACKER_BONUS = 127;
    MOD_POSSESS_PET = 128;
    MOD_SPEED_ALWAYS = 129;
    MOD_MOUNTED_SPEED_ALWAYS = 130;
    MOD_RANGED_ATTACK_POWER_VERSUS = 131;
    MOD_INCREASE_ENERGY_PERCENT = 132;
    MOD_INCREASE_HEALTH_PERCENT = 133;
    MOD_MANA_REGEN_INTERRUPT = 134;
    MOD_HEALING_DONE = 135;
    MOD_HEALING_DONE_PERCENT = 136;
    MOD_TOTAL_STAT_PERCENTAGE = 137;
    MOD_MELEE_HASTE = 138;
    FORCE_REACTION = 139;
    MOD_RANGED_HASTE = 140;
    MOD_RANGED_AMMO_HASTE = 141;
    MOD_BASE_RESISTANCE_PCT = 142;
    MOD_RESISTANCE_EXCLUSIVE = 143;
    SAFE_FALL = 144;
    CHARISMA = 145;
    PERSUADED = 146;
    MECHANIC_IMMUNITY_MASK = 147;
    RETAIN_COMBO_POINTS = 148;
    RESIST_PUSHBACK  = 149 {
        comment = "Resist Pushback";
    }
    MOD_SHIELD_BLOCKVALUE_PCT = 150;
    TRACK_STEALTHED  = 151 {
        comment = "Track Stealthed";
    }
    MOD_DETECTED_RANGE = 152 {
        comment = "Mod Detected Range";
    }
    SPLIT_DAMAGE_FLAT = 153 {
        comment = "Split Damage Flat";
    }
    MOD_STEALTH_LEVEL = 154 {
        comment = "Stealth Level Modifier";
    }
    MOD_WATER_BREATHING = 155 {
        comment = "Mod Water Breathing";
    }
    MOD_REPUTATION_GAIN = 156 {
        comment = "Mod Reputation Gain";
    }
    PET_DAMAGE_MULTI = 157 {
        comment = "Mod Pet Damage";
    }
    MOD_SHIELD_BLOCKVALUE = 158;
    NO_PVP_CREDIT = 159;
    MOD_AOE_AVOIDANCE = 160;
    MOD_HEALTH_REGEN_IN_COMBAT = 161;
    POWER_BURN_MANA = 162;
    MOD_CRIT_DAMAGE_BONUS = 163;
    UNKNOWN164 = 164;
    MELEE_ATTACK_POWER_ATTACKER_BONUS = 165;
    MOD_ATTACK_POWER_PCT = 166;
    MOD_RANGED_ATTACK_POWER_PCT = 167;
    MOD_DAMAGE_DONE_VERSUS = 168;
    MOD_CRIT_PERCENT_VERSUS = 169;
    DETECT_AMORE = 170;
    MOD_SPEED_NOT_STACK = 171;
    MOD_MOUNTED_SPEED_NOT_STACK = 172;
    ALLOW_CHAMPION_SPELLS = 173;
    MOD_SPELL_DAMAGE_OF_STAT_PERCENT = 174 {
        comment = "in 1.12.1 only dependent spirit case";
    }
    MOD_SPELL_HEALING_OF_STAT_PERCENT = 175;
    SPIRIT_OF_REDEMPTION = 176;
    AOE_CHARM = 177;
    MOD_DEBUFF_RESISTANCE = 178;
    MOD_ATTACKER_SPELL_CRIT_CHANCE = 179;
    MOD_FLAT_SPELL_DAMAGE_VERSUS = 180;
    MOD_FLAT_SPELL_CRIT_DAMAGE_VERSUS = 181 {
        comment = "unused - possible flat spell crit damage versus";
    }
    MOD_RESISTANCE_OF_STAT_PERCENT = 182;
    MOD_CRITICAL_THREAT = 183;
    MOD_ATTACKER_MELEE_HIT_CHANCE = 184;
    MOD_ATTACKER_RANGED_HIT_CHANCE = 185;
    MOD_ATTACKER_SPELL_HIT_CHANCE = 186;
    MOD_ATTACKER_MELEE_CRIT_CHANCE = 187;
    MOD_ATTACKER_RANGED_CRIT_CHANCE = 188;
    MOD_RATING = 189;
    MOD_FACTION_REPUTATION_GAIN = 190;
    USE_NORMAL_MOVEMENT_SPEED = 191;
}

struct AuraLog {
    AuraType aura_type;
    if (aura_type == PERIODIC_DAMAGE
     || aura_type == PERIODIC_DAMAGE_PERCENT)
    {
        u32 damage1;
        /* TODO Enum? */
        SpellSchool school;
        u32 absorbed;
        u32 resisted {
            comment = "vmangos: Sent as int32";
        }
    } else if (aura_type == PERIODIC_HEAL
            || aura_type == OBS_MOD_HEALTH)
    {
        u32 damage2;
    } else if (aura_type == OBS_MOD_MANA
            || aura_type == PERIODIC_ENERGIZE)
    {
        u32 misc_value1 {
            comment = "vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have";
        }
        u32 damage3;
    } else if (aura_type == PERIODIC_MANA_LEECH)
    {
        u32 misc_value2 {
            comment = "vmangos: A miscvalue that is dependent on what the aura will do, this is usually decided by the AuraType, ie: with AuraType::SPELL_AURA_MOD_BASE_RESISTANCE_PCT this value could be SpellSchoolMask::SPELL_SCHOOL_MASK_NORMAL which would tell the aura that it should change armor.  If Modifier::m_auraname would have been AuraType::SPELL_AURA_MOUNTED then m_miscvalue would have decided which model the mount should have";
        }
        u32 damage;
        f32 gain_multiplier;
    }
}




enum AuctionCommandAction : u32 {
    STARTED = 0 {
        comment = "ERR_AUCTION_STARTED";
    }
    REMOVED = 1 {
        comment = "ERR_AUCTION_REMOVED";
    }
    BID_PLACED = 2 {
        comment = "ERR_AUCTION_BID_PLACED";
    }
}

enum AuctionCommandResult : u32 {
    OK = 0 {
        comment = "depends on enum AuctionAction";
    }
    ERR_INVENTORY = 1 {
        comment = "depends on enum InventoryChangeResult";
    }
    ERR_DATABASE = 2 {
        comment = "ERR_AUCTION_DATABASE_ERROR (default)";
    }
    ERR_NOT_ENOUGH_MONEY = 3 {
        comment = "ERR_NOT_ENOUGH_MONEY";
    }
    ERR_ITEM_NOT_FOUND = 4 {
        comment = "ERR_ITEM_NOT_FOUND";
    }
    ERR_HIGHER_BID = 5 {
        comment = "ERR_AUCTION_HIGHER_BID";
    }
    ERR_BID_INCREMENT = 7 {
        comment = "ERR_AUCTION_BID_INCREMENT";
    }
    ERR_BID_OWN = 10 {
        comment = "ERR_AUCTION_BID_OWN";
    }
    ERR_RESTRICTED_ACCOUNT = 13 {
        comment = "ERR_RESTRICTED_ACCOUNT";
    }
}


enum SpellEffect : u32 {
    NONE = 0;
    INSTAKILL = 1;
    SCHOOL_DAMAGE = 2;
    DUMMY = 3;
    PORTAL_TELEPORT = 4;
    TELEPORT_UNITS = 5;
    APPLY_AURA = 6;
    ENVIRONMENTAL_DAMAGE = 7;
    POWER_DRAIN = 8;
    HEALTH_LEECH = 9;
    HEAL = 10;
    BIND = 11;
    PORTAL = 12;
    RITUAL_BASE = 13;
    RITUAL_SPECIALIZE = 14;
    RITUAL_ACTIVATE_PORTAL = 15;
    QUEST_COMPLETE = 16;
    WEAPON_DAMAGE_NOSCHOOL = 17;
    RESURRECT = 18;
    ADD_EXTRA_ATTACKS = 19;
    DODGE = 20;
    EVADE = 21;
    PARRY = 22;
    BLOCK = 23;
    CREATE_ITEM = 24;
    WEAPON = 25;
    DEFENSE = 26;
    PERSISTENT_AREA_AURA = 27;
    SUMMON = 28;
    LEAP = 29;
    ENERGIZE = 30;
    WEAPON_PERCENT_DAMAGE = 31;
    TRIGGER_MISSILE = 32;
    OPEN_LOCK = 33;
    SUMMON_CHANGE_ITEM = 34;
    APPLY_AREA_AURA_PARTY = 35;
    LEARN_SPELL = 36;
    SPELL_DEFENSE = 37;
    DISPEL = 38;
    LANGUAGE = 39;
    DUAL_WIELD = 40;
    SUMMON_WILD = 41;
    SUMMON_GUARDIAN = 42;
    TELEPORT_UNITS_FACE_CASTER= 43;
    SKILL_STEP = 44;
    ADD_HONOR = 45;
    SPAWN = 46;
    TRADE_SKILL = 47;
    STEALTH = 48;
    DETECT = 49;
    TRANS_DOOR = 50;
    FORCE_CRITICAL_HIT = 51;
    GUARANTEE_HIT = 52;
    ENCHANT_ITEM = 53;
    ENCHANT_ITEM_TEMPORARY = 54;
    TAMECREATURE = 55;
    SUMMON_PET = 56;
    LEARN_PET_SPELL = 57;
    WEAPON_DAMAGE = 58;
    OPEN_LOCK_ITEM = 59;
    PROFICIENCY = 60;
    SEND_EVENT = 61;
    POWER_BURN = 62;
    THREAT = 63;
    TRIGGER_SPELL = 64;
    HEALTH_FUNNEL = 65;
    POWER_FUNNEL = 66;
    HEAL_MAX_HEALTH = 67;
    INTERRUPT_CAST = 68;
    DISTRACT = 69;
    PULL = 70;
    PICKPOCKET = 71;
    ADD_FARSIGHT = 72;
    SUMMON_POSSESSED = 73;
    SUMMON_TOTEM = 74;
    HEAL_MECHANICAL = 75;
    SUMMON_OBJECT_WILD = 76;
    SCRIPT_EFFECT = 77;
    ATTACK = 78;
    SANCTUARY = 79;
    ADD_COMBO_POINTS = 80;
    CREATE_HOUSE = 81;
    BIND_SIGHT = 82;
    DUEL = 83;
    STUCK = 84;
    SUMMON_PLAYER = 85;
    ACTIVATE_OBJECT = 86;
    SUMMON_TOTEM_SLOT1 = 87;
    SUMMON_TOTEM_SLOT2 = 88;
    SUMMON_TOTEM_SLOT3 = 89;
    SUMMON_TOTEM_SLOT4 = 90;
    THREAT_ALL = 91;
    ENCHANT_HELD_ITEM = 92;
    SUMMON_PHANTASM = 93;
    SELF_RESURRECT = 94;
    SKINNING = 95;
    CHARGE = 96;
    SUMMON_CRITTER = 97;
    KNOCK_BACK = 98;
    DISENCHANT = 99;
    INEBRIATE = 100;
    FEED_PET = 101;
    DISMISS_PET = 102;
    REPUTATION = 103;
    SUMMON_OBJECT_SLOT1 = 104;
    SUMMON_OBJECT_SLOT2 = 105;
    SUMMON_OBJECT_SLOT3 = 106;
    SUMMON_OBJECT_SLOT4 = 107;
    DISPEL_MECHANIC = 108;
    SUMMON_DEAD_PET = 109;
    DESTROY_ALL_TOTEMS = 110;
    DURABILITY_DAMAGE = 111;
    SUMMON_DEMON = 112;
    RESURRECT_NEW = 113;
    ATTACK_ME = 114;
    DURABILITY_DAMAGE_PCT = 115;
    SKIN_PLAYER_CORPSE = 116;
    SPIRIT_HEAL = 117;
    SKILL = 118;
    APPLY_AREA_AURA_PET = 119;
    TELEPORT_GRAVEYARD = 120;
    NORMALIZED_WEAPON_DMG = 121;
    UNKNOWN122 = 122;
    SEND_TAXI = 123;
    PLAYER_PULL = 124;
    MODIFY_THREAT_PERCENT = 125;
    UNKNOWN126 = 126;
    UNKNOWN127 = 127;
}

struct SpellLog {
    SpellEffect effect;
    u32 amount_of_logs = 1 {
        comment = "vmangos/cmangos/mangoszero: Can be variable but all use constant 1";
    }
    if (effect == POWER_DRAIN) {
        Guid target1;
        u32 unknown1;
        u32 unknown2;
        f32 unknown3;
    } else if (effect == ADD_EXTRA_ATTACKS) {
        Guid target2;
        u32 unknown4;
    } else if (effect == INTERRUPT_CAST) {
        Guid target3;
        Spell interrupted_spell;
    } else if (effect == DURABILITY_DAMAGE) {
        Guid target4;
        u32 unknown5;
        u32 unknown6;
    } else if (effect == CREATE_ITEM) {
        u32 spell_effect_item_type;
    } else if (effect == FEED_PET) {
        u32 item_target_entry;
    } else if (effect == RESURRECT
            || effect == DISPEL
            || effect == THREAT
            || effect == DISTRACT
            || effect == SANCTUARY
            || effect == THREAT_ALL
            || effect == DISPEL_MECHANIC
            || effect == RESURRECT_NEW
            || effect == ATTACK_ME
            || effect == SKIN_PLAYER_CORPSE
            || effect == MODIFY_THREAT_PERCENT
            || effect == UNKNOWN126
            || effect == DISMISS_PET
            || effect == OPEN_LOCK
            || effect == OPEN_LOCK_ITEM
            || effect == INSTAKILL)
    {
        Guid target5;
    }
}






enum SimpleSpellCastResult : u8 {
    SUCCESS = 0;
    FAILURE = 2;
}

enum CastFailureReason : u8 {
    AFFECTING_COMBAT = 0x00 {
        comment = "You are in combat";
    }
    ALREADY_AT_FULL_HEALTH = 0x01 {
        comment = "You are already at full Health.";
    }
    ALREADY_AT_FULL_POWER = 0x02 {
        comment = "You are already at full %s.";
    }
    ALREADY_BEING_TAMED = 0x03 {
        comment = "That creature is already being tamed";
    }
    ALREADY_HAVE_CHARM = 0x04 {
        comment = "You already control a charmed creature";
    }
    ALREADY_HAVE_SUMMON = 0x05 {
        comment = "You already control a summoned creature";
    }
    ALREADY_OPEN = 0x06 {
        comment = "Already open";
    }
    AURA_BOUNCED = 0x07 {
        comment = "A more powerful spell is already active";
    }
    AUTOTRACK_INTERRUPTED = 0x08 {
        comment = "Message is hidden/unused";
    }
    BAD_IMPLICIT_TARGETS = 0x09 {
        comment = "You have no target.";
    }
    BAD_TARGETS = 0x0a {
        comment = "Invalid target";
    }
    CANT_BE_CHARMED = 0x0b {
        comment = "Target can't be charmed";
    }
    CANT_BE_DISENCHANTED = 0x0c {
        comment = "Item cannot be disenchanted";
    }
    CANT_BE_PROSPECTED = 0x0d {
        comment = "There are no gems in this";
    }
    CANT_CAST_ON_TAPPED = 0x0e {
        comment = "Target is tapped";
    }
    CANT_DUEL_WHILE_INVISIBLE = 0x0f {
        comment = "You can't start a duel while invisible";
    }
    CANT_DUEL_WHILE_STEALTHED = 0x10 {
        comment = "You can't start a duel while stealthed";
    }
    CANT_STEALTH = 0x11 {
        comment = "You are too close to enemies";
    }
    CASTER_AURASTATE = 0x12 {
        comment = "You can't do that yet";
    }
    CASTER_DEAD = 0x13 {
        comment = "You are dead";
    }
    CHARMED = 0x14 {
        comment = "Can't do that while charmed";
    }
    CHEST_IN_USE = 0x15 {
        comment = "That is already being used";
    }
    CONFUSED = 0x16 {
        comment = "Can't do that while confused";
    }
    DONT_REPORT = 0x17 {
        comment = "Message is hidden/unused";
    }
    EQUIPPED_ITEM = 0x18 {
        comment = "Must have the proper item equipped";
    }
    EQUIPPED_ITEM_CLASS = 0x19 {
        comment = "Must have a %s equipped";
    }
    EQUIPPED_ITEM_CLASS_MAINHAND = 0x1a {
        comment = "Must have a %s equipped in the main hand";
    }
    EQUIPPED_ITEM_CLASS_OFFHAND = 0x1b {
        comment = "Must have a %s equipped in the offhand";
    }
    ERROR = 0x1c {
        comment = "Internal error";
    }
    FIZZLE = 0x1d {
        comment = "Fizzled";
    }
    FLEEING = 0x1e {
        comment = "Can't do that while fleeing";
    }
    FOOD_LOWLEVEL = 0x1f {
        comment = "That food's level is not high enough for your pet";
    }
    HIGHLEVEL = 0x20 {
        comment = "Target is too high level";
    }
    HUNGER_SATIATED = 0x21 {
        comment = "Message is hidden/unused";
    }
    IMMUNE = 0x22 {
        comment = "Immune";
    }
    INTERRUPTED = 0x23 {
        comment = "Interrupted";
    }
    INTERRUPTED_COMBAT = 0x24 {
        comment = "Interrupted";
    }
    ITEM_ALREADY_ENCHANTED = 0x25 {
        comment = "Item is already enchanted";
    }
    ITEM_GONE = 0x26 {
        comment = "Item is gone";
    }
    ITEM_NOT_FOUND = 0x27 {
        comment = "Tried to enchant an item that didn't exist";
    }
    ITEM_NOT_READY = 0x28 {
        comment = "Item is not ready yet.";
    }
    LEVEL_REQUIREMENT = 0x29 {
        comment = "You are not high enough level";
    }
    LINE_OF_SIGHT = 0x2a {
        comment = "Target not in line of sight";
    }
    LOWLEVEL = 0x2b {
        comment = "Target is too low level";
    }
    LOW_CASTLEVEL = 0x2c {
        comment = "Skill not high enough";
    }
    MAINHAND_EMPTY = 0x2d {
        comment = "Your weapon hand is empty";
    }
    MOVING = 0x2e {
        comment = "Can't do that while moving";
    }
    NEED_AMMO = 0x2f {
        comment = "Ammo needs to be in the paper doll ammo slot before it can be fired";
    }
    NEED_AMMO_POUCH = 0x30 {
        comment = "Requires: %s";
    }
    NEED_EXOTIC_AMMO = 0x31 {
        comment = "Requires exotic ammo: %s";
    }
    NOPATH = 0x32 {
        comment = "No path available";
    }
    NOT_BEHIND = 0x33 {
        comment = "You must be behind your target";
    }
    NOT_FISHABLE = 0x34 {
        comment = "Your cast didn't land in fishable water";
    }
    NOT_HERE = 0x35 {
        comment = "You can't use that here";
    }
    NOT_INFRONT = 0x36 {
        comment = "You must be in front of your target";
    }
    NOT_IN_CONTROL = 0x37 {
        comment = "You are not in control of your actions";
    }
    NOT_KNOWN = 0x38 {
        comment = "Spell not learned";
    }
    NOT_MOUNTED = 0x39 {
        comment = "You are mounted";
    }
    NOT_ON_TAXI = 0x3a {
        comment = "You are in flight";
    }
    NOT_ON_TRANSPORT = 0x3b {
        comment = "You are on a transport";
    }
    NOT_READY = 0x3c {
        comment = "Spell is not ready yet.";
    }
    NOT_SHAPESHIFT = 0x3d {
        comment = "You are in shapeshift form";
    }
    NOT_STANDING = 0x3e {
        comment = "You must be standing to do that";
    }
    NOT_TRADEABLE = 0x3f {
        comment = "You can only use this on an object you own";
    }
    NOT_TRADING = 0x40 {
        comment = "Tried to enchant a trade item, but not trading";
    }
    NOT_UNSHEATHED = 0x41 {
        comment = "You have to be unsheathed to do that!";
    }
    NOT_WHILE_GHOST = 0x42 {
        comment = "Can't cast as ghost";
    }
    NO_AMMO = 0x43 {
        comment = "Out of ammo";
    }
    NO_CHARGES_REMAIN = 0x44 {
        comment = "No charges remain";
    }
    NO_CHAMPION = 0x45 {
        comment = "You haven't selected a champion";
    }
    NO_COMBO_POINTS = 0x46 {
        comment = "That ability requires combo points";
    }
    NO_DUELING = 0x47 {
        comment = "Dueling isn't allowed here";
    }
    NO_ENDURANCE = 0x48 {
        comment = "Not enough endurance";
    }
    NO_FISH = 0x49 {
        comment = "There aren't any fish here";
    }
    NO_ITEMS_WHILE_SHAPESHIFTED = 0x4a {
        comment = "Can't use items while shapeshifted";
    }
    NO_MOUNTS_ALLOWED = 0x4b {
        comment = "You can't mount here";
    }
    NO_PET = 0x4c {
        comment = "You do not have a pet";
    }
    NO_POWER = 0x4d {
        comment = "Dynamic pre-defined messages, no args: Not enough mana, Not enough rage, etc";
    }
    NOTHING_TO_DISPEL = 0x4e {
        comment = "Nothing to dispel";
    }
    NOTHING_TO_STEAL = 0x4f {
        comment = "Nothing to steal";
    }
    ONLY_ABOVEWATER = 0x50 {
        comment = "Cannot use while swimming";
    }
    ONLY_DAYTIME = 0x51 {
        comment = "Can only use during the day";
    }
    ONLY_INDOORS = 0x52 {
        comment = "Can only use indoors";
    }
    ONLY_MOUNTED = 0x53 {
        comment = "Can only use while mounted";
    }
    ONLY_NIGHTTIME = 0x54 {
        comment = "Can only use during the night";
    }
    ONLY_OUTDOORS = 0x55 {
        comment = "Can only use outside";
    }
    ONLY_SHAPESHIFT = 0x56 {
        comment = "Must be in %s";
    }
    ONLY_STEALTHED = 0x57 {
        comment = "You must be in stealth mode";
    }
    ONLY_UNDERWATER = 0x58 {
        comment = "Can only use while swimming";
    }
    OUT_OF_RANGE = 0x59 {
        comment = "Out of range.";
    }
    PACIFIED = 0x5a {
        comment = "Can't use that ability while pacified";
    }
    POSSESSED = 0x5b {
        comment = "You are possessed";
    }
    REAGENTS = 0x5c {
        comment = "Message is hidden/unused, supposedly implemented client-side only";
    }
    REQUIRES_AREA = 0x5d {
        comment = "You need to be in %s";
    }
    REQUIRES_SPELL_FOCUS = 0x5e {
        comment = "Requires %s";
    }
    ROOTED = 0x5f {
        comment = "You are unable to move";
    }
    SILENCED = 0x60 {
        comment = "Can't do that while silenced";
    }
    SPELL_IN_PROGRESS = 0x61 {
        comment = "Another action is in progress";
    }
    SPELL_LEARNED = 0x62 {
        comment = "You have already learned the spell";
    }
    SPELL_UNAVAILABLE = 0x63 {
        comment = "The spell is not available to you";
    }
    STUNNED = 0x64 {
        comment = "Can't do that while stunned";
    }
    TARGETS_DEAD = 0x65 {
        comment = "Your target is dead";
    }
    TARGET_AFFECTING_COMBAT = 0x66 {
        comment = "Target is in combat";
    }
    TARGET_AURASTATE = 0x67 {
        comment = "You can't do that yet";
    }
    TARGET_DUELING = 0x68 {
        comment = "Target is currently dueling";
    }
    TARGET_ENEMY = 0x69 {
        comment = "Target is hostile";
    }
    TARGET_ENRAGED = 0x6a {
        comment = "Target is too enraged to be charmed";
    }
    TARGET_FRIENDLY = 0x6b {
        comment = "Target is friendly";
    }
    TARGET_IN_COMBAT = 0x6c {
        comment = "The target can't be in combat";
    }
    TARGET_IS_PLAYER = 0x6d {
        comment = "Can't target players";
    }
    TARGET_NOT_DEAD = 0x6e {
        comment = "Target is alive";
    }
    TARGET_NOT_IN_PARTY = 0x6f {
        comment = "Target is not in your party";
    }
    TARGET_NOT_LOOTED = 0x70 {
        comment = "Creature must be looted first";
    }
    TARGET_NOT_PLAYER = 0x71 {
        comment = "Target is not a player";
    }
    TARGET_NO_POCKETS = 0x72 {
        comment = "No pockets to pick";
    }
    TARGET_NO_WEAPONS = 0x73 {
        comment = "Target has no weapons equipped";
    }
    TARGET_UNSKINNABLE = 0x74 {
        comment = "Creature is not skinnable";
    }
    THIRST_SATIATED = 0x75 {
        comment = "Message is hidden/unused";
    }
    TOO_CLOSE = 0x76 {
        comment = "Target too close";
    }
    TOO_MANY_OF_ITEM = 0x77 {
        comment = "You have too many of that item already";
    }
    TOTEMS = 0x78 {
        comment = "Message is hidden/unused, supposedly implemented client-side only";
    }
    TRAINING_POINTS = 0x79 {
        comment = "Not enough training points";
    }
    TRY_AGAIN = 0x7a {
        comment = "Failed attempt";
    }
    UNIT_NOT_BEHIND = 0x7b {
        comment = "Target needs to be behind you";
    }
    UNIT_NOT_INFRONT = 0x7c {
        comment = "Target needs to be in front of you";
    }
    WRONG_PET_FOOD = 0x7d {
        comment = "Your pet doesn't like that food";
    }
    NOT_WHILE_FATIGUED = 0x7e {
        comment = "Can't cast while fatigued";
    }
    TARGET_NOT_IN_INSTANCE = 0x7f {
        comment = "Target must be in this instance";
    }
    NOT_WHILE_TRADING = 0x80 {
        comment = "Can't cast while trading";
    }
    TARGET_NOT_IN_RAID = 0x81 {
        comment = "Target is not in your party or raid group";
    }
    DISENCHANT_WHILE_LOOTING = 0x82 {
        comment = "Cannot disenchant while looting";
    }
    PROSPECT_WHILE_LOOTING = 0x83 {
        comment = "Cannot prospect while looting";
    }
    PROSPECT_NEED_MORE = 0x84 {
        comment = "Message is hidden/unused, supposedly implemented client-side only";
    }
    TARGET_FREEFORALL = 0x85 {
        comment = "Target is currently in free-for-all PvP combat";
    }
    NO_EDIBLE_CORPSES = 0x86 {
        comment = "There are no nearby corpses to eat";
    }
    ONLY_BATTLEGROUNDS = 0x87 {
        comment = "Can only use in battlegrounds";
    }
    TARGET_NOT_GHOST = 0x88 {
        comment = "Target is not a ghost";
    }
    TOO_MANY_SKILLS = 0x89 {
        comment = "Your pet can't learn any more skills";
    }
    TRANSFORM_UNUSABLE = 0x8a {
        comment = "You can't use the new item";
    }
    WRONG_WEATHER = 0x8b {
        comment = "The weather isn't right for that";
    }
    DAMAGE_IMMUNE = 0x8c {
        comment = "You can't do that while you are immune";
    }
    PREVENTED_BY_MECHANIC = 0x8d {
        comment = "Can't do that while %s";
    }
    PLAY_TIME = 0x8e {
        comment = "Maximum play time exceeded";
    }
    REPUTATION = 0x8f {
        comment = "Your reputation isn't high enough";
    }
    MIN_SKILL = 0x90 {
        comment = "Your skill is not high enough.  Requires %s (%d).";
    }
    UNKNOWN = 0x91 {
        comment = "Generic out of bounds response:  Unknown reason";
    }
}


struct ItemStat {
    u32 item_stat_type;
    u32 item_stat_value;
}

struct ItemDamageType {
    u32 damage_minimum;
    u32 damage_maximum;
    u32 damage_type {
        comment = "mangoszero/vmangos/cmangos: id from Resistances.dbc";
    }
}

struct ItemSpells {
    Spell spell;   
    u32 spell_trigger;
    u32 spell_charges {
        comment = "let the database control the sign here. negative means that the item should be consumed once the charges are consumed.";
    }
    u32 spell_cooldown;
    u32 spell_category;
    u32 spell_category_cooldown;
}


enum GroupType : u8 {
    NORMAL = 0;
    RAID = 1;
}

struct GroupListMember {
    CString name;
    Guid guid;
    Bool is_online;
}



flag SpellCastTargetFlags : u16 {
    SELF = 0x00000000;
    UNUSED1 = 0x00000001 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically)";
    }
    UNIT = 0x00000002 {
        comment = "pguid";
    }
    UNIT_RAID = 0x00000004 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically) - raid member";
    }
    UNIT_PARTY = 0x00000008 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically) - party member";
    }
    ITEM = 0x00000010 {
        comment = "pguid";
    }
    SOURCE_LOCATION = 0x00000020 {
        comment = "3xfloat";
    }
    DEST_LOCATION = 0x00000040 {
        comment = "3xfloat";
    }
    UNIT_ENEMY = 0x00000080 {
        comment = "CanAttack == true";
    }
    UNIT_ALLY = 0x00000100 {
        comment = "CanAssist == true";
    }
    CORPSE_ENEMY = 0x00000200 {
        comment = "pguid, CanAssist == false";
    }
    UNIT_DEAD = 0x00000400 {
        comment = "skinning-like effects";
    }
    GAMEOBJECT = 0x00000800 {
        comment = "pguid, 0 spells in 2.4.3";
    }
    TRADE_ITEM = 0x00001000 {
        comment = "pguid, 0 spells";
    }
    STRING = 0x00002000 {
        comment = "string, 0 spells";
    }
    LOCKED = 0x00004000 {
        comment = "199 spells, opening object/lock";
    }
    CORPSE_ALLY = 0x00008000 {
        comment = "pguid, CanAssist == true";
    }
} {
    comment = "Also has UNIT_MINIPET = 0x00010000 (pguid, not used in any spells as of 2.4.3 (can be set dynamically)) however this is outside range of u16, which SpellCastTargets needs.";
}



struct SpellCastTargets {
    SpellCastTargetFlags target_flags;
    if (target_flags & UNIT) {
        PackedGuid unit_target1;
    }
    if (target_flags & UNIT_ENEMY) {
        PackedGuid unit_target2;
    }
    if (target_flags & GAMEOBJECT) {
        PackedGuid object_target1;
    }
    if (target_flags & LOCKED) {
        PackedGuid object_target2;
    }
    if (target_flags & ITEM) {
        PackedGuid item_target1;
    }
    if (target_flags & TRADE_ITEM) {
        PackedGuid item_target2;
    }
    if (target_flags & SOURCE_LOCATION) {
        f32 position_x1;
        f32 position_y1;
        f32 position_z1;
    }
    if (target_flags & DEST_LOCATION) {
        f32 position_x2;
        f32 position_y2;
        f32 position_z2;
    }
    if (target_flags & STRING) {
        CString target_string;
    }
    if (target_flags & CORPSE_ALLY) {
        PackedGuid corpse_target1;
    }
    if (target_flags & CORPSE_ENEMY) {
        PackedGuid corpse_target2;
    }
}

enum PowerType : u32 {
    MANA = 0 {
        comment = "UNIT_FIELD_POWER1";
    }
    RAGE = 1 {
        comment = "UNIT_FIELD_POWER2";
    }
    FOCUS = 2 {
        comment = "UNIT_FIELD_POWER3";
    }
    ENERGY = 3 {
        comment = "UNIT_FIELD_POWER4";
    }
    HAPPINESS = 4 {
        comment = "UNIT_FIELD_POWER5";
    }
    HEALTH = 0xFFFFFFFE {
        comment = "(-2 as signed value)";
    }
}






/* TODO Real names?
enum ItemClass : u8 {
    CONSUMABLE = 0;
    CONTAINER = 1;
    WEAPON = 2;
    GEM = 3;
    ARMOR = 4;
    REAGENT = 5;
    PROJECTILE = 6;
    TRADE_GOODS = 7;
    GENERIC = 8;
    RECIPE = 9;
    MONEY = 10;
    QUIVER = 11;
    QUEST = 12;
    KEY = 13;
    PERMANENT = 14;
    JUNK = 15;
}
*/
enum ItemClass : u8 {
    CONSUMABLE = 0;
    CONTAINER = 1;
    WEAPON = 2;
    RESERVED_1 = 3;
    ARMOR = 4;
    REAGENT = 5;
    PROJECTILE = 6;
    TRADE_GOODS = 7;
    RESERVED_2 = 8;
    RECIPE = 9;
    RESERVED_3 = 10;
    QUIVER = 11;
    QUEST = 12;
    KEY = 13;
    RESERVED_4 = 14;
    MISC = 15;
}

enum SpellCastResult : u8 {
    AFFECTING_COMBAT = 0x00;
    ALREADY_AT_FULL_HEALTH = 0x01;
    ALREADY_AT_FULL_MANA = 0x02;
    ALREADY_BEING_TAMED = 0x03;
    ALREADY_HAVE_CHARM = 0x04;
    ALREADY_HAVE_SUMMON = 0x05;
    ALREADY_OPEN = 0x06;
    MORE_POWERFUL_SPELL_ACTIVE = 0x07;
    BAD_IMPLICIT_TARGETS = 0x09;
    BAD_TARGETS = 0x0A;
    CANT_BE_CHARMED = 0x0B;
    CANT_BE_DISENCHANTED = 0x0C;
    CANT_BE_PROSPECTED = 0x0D;
    CANT_CAST_ON_TAPPED = 0x0E;
    CANT_DUEL_WHILE_INVISIBLE = 0x0F;
    CANT_DUEL_WHILE_STEALTHED = 0x10;
    CANT_TOO_CLOSE_TO_ENEMY = 0x11;
    CANT_DO_THAT_YET = 0x12;
    CASTER_DEAD = 0x13;
    CHARMED = 0x14;
    CHEST_IN_USE = 0x15;
    CONFUSED = 0x16;
    DONT_REPORT = 0x17;
    EQUIPPED_ITEM = 0x18;
    EQUIPPED_ITEM_CLASS = 0x19;
    EQUIPPED_ITEM_CLASS_MAINHAND = 0x1A;
    EQUIPPED_ITEM_CLASS_OFFHAND = 0x1B;
    ERROR = 0x1C;
    FIZZLE = 0x1D;
    FLEEING = 0x1E;
    FOOD_LOWLEVEL = 0x1F;
    HIGHLEVEL = 0x20;
    IMMUNE = 0x22;
    INTERRUPTED = 0x23;
    INTERRUPTED_COMBAT = 0x24;
    ITEM_ALREADY_ENCHANTED = 0x25;
    ITEM_GONE = 0x26;
    ENCHANT_NOT_EXISTING_ITEM = 0x27;
    ITEM_NOT_READY = 0x28;
    LEVEL_REQUIREMENT = 0x29;
    LINE_OF_SIGHT = 0x2A;
    LOWLEVEL = 0x2B;
    SKILL_NOT_HIGH_ENOUGH = 0x2C;
    MAINHAND_EMPTY = 0x2D;
    MOVING = 0x2E;
    NEED_AMMO = 0x2F;
    NEED_REQUIRES_SOMETHING = 0x30;
    NEED_EXOTIC_AMMO = 0x31;
    NOPATH = 0x32;
    NOT_BEHIND = 0x33;
    NOT_FISHABLE = 0x34;
    NOT_HERE = 0x35;
    NOT_INFRONT = 0x36;
    NOT_IN_CONTROL = 0x37;
    NOT_KNOWN = 0x38;
    NOT_MOUNTED = 0x39;
    NOT_ON_TAXI = 0x3A;
    NOT_ON_TRANSPORT = 0x3B;
    NOT_READY = 0x3C;
    NOT_SHAPESHIFT = 0x3D;
    NOT_STANDING = 0x3E;
    NOT_TRADEABLE = 0x3F {
        comment = "rogues trying 'enchant' other's weapon with poison";
    }
    NOT_TRADING = 0x40;
    NOT_UNSHEATHED = 0x41;
    NOT_WHILE_GHOST = 0x42;
    NO_AMMO = 0x43;
    NO_CHARGES_REMAIN = 0x44;
    NO_CHAMPION = 0x45;
    NO_COMBO_POINTS = 0x46;
    NO_DUELING = 0x47;
    NO_ENDURANCE = 0x48;
    NO_FISH = 0x49;
    NO_ITEMS_WHILE_SHAPESHIFTED = 0x4A;
    NO_MOUNTS_ALLOWED = 0x4B;
    NO_PET = 0x4C;
    NO_POWER = 0x4D;
    NOTHING_TO_DISPEL = 0x4E;
    NOTHING_TO_STEAL = 0x4F;
    ONLY_ABOVEWATER = 0x50;
    ONLY_DAYTIME = 0x51;
    ONLY_INDOORS = 0x52;
    ONLY_MOUNTED = 0x53;
    ONLY_NIGHTTIME = 0x54;
    ONLY_OUTDOORS = 0x55;
    ONLY_SHAPESHIFT = 0x56;
    ONLY_STEALTHED = 0x57;
    ONLY_UNDERWATER = 0x58;
    OUT_OF_RANGE = 0x59;
    PACIFIED = 0x5A;
    POSSESSED = 0x5B;
    REQUIRES_AREA = 0x5D;
    REQUIRES_SPELL_FOCUS = 0x5E;
    ROOTED = 0x5F;
    SILENCED = 0x60;
    SPELL_IN_PROGRESS = 0x61;
    SPELL_LEARNED = 0x62;
    SPELL_UNAVAILABLE = 0x63;
    STUNNED = 0x64;
    TARGETS_DEAD = 0x65;
    TARGET_AFFECTING_COMBAT = 0x66;
    TARGET_AURASTATE = 0x67;
    TARGET_DUELING = 0x68;
    TARGET_ENEMY = 0x69;
    TARGET_ENRAGED = 0x6A;
    TARGET_FRIENDLY = 0x6B;
    TARGET_IN_COMBAT = 0x6C;
    TARGET_IS_PLAYER = 0x6D;
    TARGET_NOT_DEAD = 0x6E;
    TARGET_NOT_IN_PARTY = 0x6F;
    TARGET_NOT_LOOTED = 0x70;
    TARGET_NOT_PLAYER = 0x71;
    TARGET_NO_POCKETS = 0x72;
    TARGET_NO_WEAPONS = 0x73;
    TARGET_UNSKINNABLE = 0x74;
    THIRST_SATIATED = 0x75;
    TOO_CLOSE = 0x76;
    TOO_MANY_OF_ITEM = 0x77;
    TRAINING_POINTS = 0x79;
    TRY_AGAIN = 0x7A;
    UNIT_NOT_BEHIND = 0x7B;
    UNIT_NOT_INFRONT = 0x7C;
    WRONG_PET_FOOD = 0x7D;
    NOT_WHILE_FATIGUED = 0x7E;
    TARGET_NOT_IN_INSTANCE = 0x7F;
    NOT_WHILE_TRADING = 0x80;
    TARGET_NOT_IN_RAID = 0x81;
    DISENCHANT_WHILE_LOOTING = 0x82;
    PROSPECT_WHILE_LOOTING = 0x83;
    TARGET_FREEFORALL = 0x85;
    NO_EDIBLE_CORPSES = 0x86;
    ONLY_BATTLEGROUNDS = 0x87;
    TARGET_NOT_GHOST = 0x88;
    TOO_MANY_SKILLS = 0x89;
    CANT_USE_NEW_ITEM = 0x8A;
    WRONG_WEATHER = 0x8B;
    DAMAGE_IMMUNE = 0x8C;
    PREVENTED_BY_MECHANIC = 0x8D;
    PLAY_TIME = 0x8E;
    REPUTATION = 0x8F;
    MIN_SKILL = 0x90;
    UNKNOWN = 0x91;
}


enum AiReaction : u32 {
    ALERT = 0 {
        comment = "pre-aggro (used in client packet handler)";
    }
    FRIENDLY = 1 {
        comment = "(NOT used in client packet handler)";
    }
    HOSTILE = 2 {
        comment = "sent on every attack, triggers aggro sound (used in client packet handler)";
    }
    AFRAID = 3 {
        comment = "seen for polymorph (when AI not in control of self?) (NOT used in client packet handler)";
    }
    DESTROY = 4 {
        comment = "used on object destroy (NOT used in client packet handler)";
    }
}


enum LootMethod : u8 {
    CORPSE                 = 1;
    PICKPOCKETING          = 2;
    FISHING                = 3;
    DISENCHANTING          = 4;
    SKINNING               = 6 {
        comment = "unsupported by client, send LOOT_PICKPOCKETING instead";
    }
    FISHINGHOLE            = 20 {
        comment = "unsupported by client, send LOOT_FISHING instead";
    }
    FISHING_FAIL           = 21 {
        comment = "unsupported by client, send LOOT_FISHING instead";
    }
    INSIGNIA               = 22 {
        comment = "unsupported by client, send LOOT_CORPSE instead";
    }
}



enum DuelWinnerReason : u8 {
    WON = 0;
    FLED = 1;
}

enum MountResult : u32 {
    INVALIDMOUNTEE = 0    {
        comment = "You can't mount that unit!";
    }
    TOOFARAWAY = 1    {
        comment = "That mount is too far away!";
    }
    ALREADYMOUNTED = 2    {
        comment = "You're already mounted!";
    }
    NOTMOUNTABLE = 3    {
        comment = "That unit can't be mounted!";
    }
    NOTYOURPET = 4    {
        comment = "That mount isn't your pet!";
    }
    OTHER = 5    {
        comment = "internal";
    }
    LOOTING = 6    {
        comment = "You can't mount while looting!";
    }
    RACECANTMOUNT = 7    {
        comment = "You can't mount because of your race!";
    }
    SHAPESHIFTED = 8    {
        comment = "You can't mount while shapeshifted!";
    }
    FORCEDDISMOUNT = 9    {
        comment = "You dismount before continuing.";
    }
    OK = 10    {
        comment = "no error";
    }
}



enum PetTameFailureReason : u8 {
    INVALIDCREATURE = 1;
    TOOMANY = 2;
    CREATUREALREADYOWNED = 3;
    NOTTAMEABLE = 4;
    ANOTHERSUMMONACTIVE = 5;
    UNITSCANTTAME = 6;
    NOPETAVAILABLE = 7 {
        comment = "not used in taming";
    }
    INTERNALERROR = 8;
    TOOHIGHLEVEL = 9;
    DEAD = 10 {
        comment = "not used in taming";
    }
    NOTDEAD = 11 {
        comment = "not used in taming";
    }
    UNKNOWNERROR = 12;
}



enum PetReactState : u8 {
    PASSIVE = 0;
    DEFENSIVE = 1;
    AGGRESSIVE = 2;
}

enum PetCommandState : u8 {
    STAY = 0;
    FOLLOW = 1;
    ATTACK = 2;
    DISMISS = 3;
}



enum BuyResult : u8 {
    CANT_FIND_ITEM = 0;
    ITEM_ALREADY_SOLD = 1;
    NOT_ENOUGHT_MONEY = 2;
    SELLER_DONT_LIKE_YOU = 4;
    DISTANCE_TOO_FAR = 5;
    ITEM_SOLD_OUT = 7;
    CANT_CARRY_MORE = 8;
    RANK_REQUIRE = 11;
    REPUTATION_REQUIRE = 12;
}


enum ActivateTaxiReply : u32 {
    OK = 0;
    UNSPECIFIEDSERVERERROR = 1;
    NOSUCHPATH = 2;
    NOTENOUGHMONEY = 3;
    TOOFARAWAY = 4;
    NOVENDORNEARBY = 5;
    NOTVISITED = 6;
    PLAYERBUSY = 7;
    PLAYERALREADYMOUNTED = 8;
    PLAYERSHAPESHIFTED = 9;
    PLAYERMOVING = 10;
    SAMENODE = 11;
    NOTSTANDING = 12;
}


enum TrainingFailureReason : u32
{
    UNAVAILABLE = 0 {
        comment = "Trainer service %d unavailable.";
    }
    NOT_ENOUGH_MONEY = 1 {
        comment = "Not enough money for trainer service %d.";
    }
    NOT_ENOUGH_SKILL = 2 {
        comment = "Not enough skill points for trainer service %d.";
    }
} {
    comment = "These errors are only printed in client console.";
}

enum BuyBankSlotResult : u32 {
    FAILED_TOO_MANY = 0;
    INSUFFICIENT_FUNDS = 1;
    NOTBANKER = 2;
    OK = 3;
}


enum PetitionResult : u32 {
    OK = 0;
    ALREADY_SIGNED = 1;
    ALREADY_IN_GUILD = 2;
    CANT_SIGN_OWN = 3;
    NEED_MORE = 4;
    NOT_SERVER = 5;
}

enum PetitionTurnInResult : u32 {
    OK = 0;
    ALREADY_SIGNED = 1;
    ALREADY_IN_GUILD = 2;
    CANT_SIGN_OWN = 3;
    NEED_MORE = 4;
    NOT_SERVER = 5;
}


enum ExperienceAwardType : u8 {
    KILL = 0;
    NON_KILL = 1;
}



enum TimerType : u32 {
    FATIGUE = 0;
    BREATH = 1;
    FEIGNDEATH = 2;
    ENVIRONMENTAL = 3 {
        comment = "Might be a mangos only thing.";
    }
}

enum SheathState : u8 {
    UNARMED = 0;
    MELEE = 1;
    RANGED = 2;
} {
    comment = "According to cmangos: byte value (UNIT_FIELD_BYTES_2,0)";
}



enum EnvironmentalDamageType : u32 {
    EXHAUSTED = 0;
    DROWNING = 1;
    FALL = 2;
    LAVA = 3;
    SLIME = 4;
    FIRE = 5;
}



enum GmTicketResponse : u32 {
    NOT_EXIST = 0;
    ALREADY_EXIST = 1;
    CREATE_SUCCESS = 2;
    CREATE_ERROR = 3;
    UPDATE_SUCCESS = 4;
    UPDATE_ERROR = 5;
    TICKET_DELETED = 9;
}




enum MailAction : u32 {
    SEND = 0;
    MONEY_TAKEN = 1;
    ITEM_TAKEN = 2;
    RETURNED_TO_SENDER = 3;
    DELETED = 4;
    MADE_PERMANENT = 5;
}

enum MailResult : u32 {
    OK = 0;
    ERR_EQUIP_ERROR = 1;
    ERR_CANNOT_SEND_TO_SELF = 2;
    ERR_NOT_ENOUGH_MONEY = 3;
    ERR_RECIPIENT_NOT_FOUND = 4;
    ERR_NOT_YOUR_TEAM = 5;
    ERR_INTERNAL_ERROR = 6;
    ERR_DISABLED_FOR_TRIAL_ACC = 14;
    ERR_RECIPIENT_CAP_REACHED = 15;
    ERR_CANT_SEND_WRAPPED_COD = 16;
    ERR_MAIL_AND_CHAT_SUSPENDED = 17;
    ERR_TOO_MANY_ATTACHMENTS = 18;
    ERR_MAIL_ATTACHMENT_INVALID = 19;
} {
    comment = "mangoszero: in SMSG_SEND_MAIL_RESULT, 7-13 and 16+: 'Mail database error'";
}







enum SpellMissInfo : u32 {
    NONE = 0;
    MISS = 1;
    RESIST = 2;
    DODGE = 3;
    PARRY = 4;
    BLOCK = 5;
    EVADE = 6;
    IMMUNE = 7;
    IMMUNE2 = 8;
    DEFLECT = 9;
    ABSORB = 10;
    REFLECT = 11;
}

struct SpellMiss {
    u64 target_guid;
    SpellMissInfo miss_info;
}

enum LogFormat : u8 {
    DEFAULT = 0;
    DEBUG = 1;
}




enum StableResult : u8 {
    ERR_MONEY = 0x01 {
        comment = "you don't have enough money";
    }
    ERR_STABLE = 0x06 {
        comment = "currently used in most fail cases";
    }
    SUCCESS_STABLE = 0x08 {
        comment = "table success";
    }
    SUCCESS_UNSTABLE = 0x09 {
        comment = "unstable/swap success";
    }
    SUCCESS_BUY_SLOT = 0x0A {
        comment = "buy slot success";
    }
}




enum FarSightOperation : u8 {
    REMOVE = 0;
    ADD = 1;
}

enum RaidGroupError : u32 {
    REQUIRED = 1;
    FULL = 2;
}

enum BuybackSlot : u32 {
    SLOT1 = 69;
    SLOT2 = 70;
    SLOT3 = 71;
    SLOT4 = 72;
    SLOT5 = 73;
    SLOT6 = 74;
    SLOT7 = 75;
    SLOT8 = 76;
    SLOT9 = 77;
    SLOT10 = 78;
    SLOT11 = 79;
    SLOT12 = 80;
    SLOT13 = 81;
}

enum ServerMessageType : u32 {
    SHUTDOWN_TIME = 1;
    RESTART_TIME = 2;
    CUSTOM = 3;
    SHUTDOWN_CANCELLED = 4;
    RESTART_CANCELLED = 5;
}

enum MeetingStoneStatus : u8 {
    LEAVE_QUEUE = 0;
    JOINED_QUEUE = 1;
    PARTY_MEMBER_LEFT_LFG = 2;
    PARTY_MEMBER_REMOVED_PARTY_REMOVED = 3;
    LOOKING_FOR_NEW_PARTY_IN_QUEUE = 4;
    NONE = 5;
}

enum RollVote : u8 {
    PASS = 0;
    NEED = 1;
    GREED = 2;
}

enum MeetingStoneFailure : u8 {
    MEETINGSTONE_FAIL_PARTYLEADER = 1;
    MEETINGSTONE_FAIL_FULL_GROUP = 2;
    MEETINGSTONE_FAIL_RAID_GROUP = 3;
}

enum PetFeedback : u8 {
    PET_DEAD = 1;
    NOTHING_TO_EAT = 2;
    CANT_ATTACK_TARGET = 3;
    NO_PATH_TO = 4;
}

enum BattlefieldPortAction : u8 {
    LEAVE_QUEUE = 0;
    ENTER_BATTLE = 1;
}

enum WeatherType : u32 {
    FINE = 0;
    RAIN = 1;
    SNOW = 2;
    STORM = 3;
}

enum WeatherChangeType : u8 {
    SMOOTH = 0;
    INSTANT = 1;
}

enum RaidInstanceMessage : u32 {
    WARNING_HOURS     = 1 {
        comment = "WARNING! %s is scheduled to reset in %d hour(s).";
    }
    WARNING_MIN       = 2 {
        comment = "WARNING! %s is scheduled to reset in %d minute(s)!";
    }
    WARNING_MIN_SOON  = 3 {
        comment = "WARNING! %s is scheduled to reset in %d minute(s). Please exit the zone or you will be returned to your bind location!";
    }
    WELCOME           = 4 {
        comment = "Welcome to %s. This raid instance is scheduled to reset in %s.";
    }
}

enum InstanceResetFailedReason : u8 {
    GENERAL = 0 {
        comment = "at least one player is in the instance";
    }
    OFFLINE = 1 {
        comment = "at least one player is offline";
    }
    ZONING = 2 {
        comment = "at least one player try to enter the instance (being teleported in)";
    }
    SILENTLY = 3;
}


enum PetTalkReason : u32 {
    SPECIAL_SPELL = 0;
    ATTACK = 1;
}

enum GmTicketStatusResponse : u32 {
    UPDATED = 1;
    CLOSED = 2;
    SURVEY = 3;
}

struct GmSurveyQuestion {
    u32 question_id {
        comment = "cmangos: questions found in GMSurveyQuestions.dbc";
    }
    u8 answer {
        comment = "Rating: hardcoded limit of 0-5 in pre-Wrath, ranges defined in GMSurveyAnswers.dbc Wrath+";
    }
}




enum PvpRank : u8 {
    NO_RANK = 0;
    PARIAH = 1;
    OUTLAW = 2;
    EXILED = 3;
    DISHONORED = 4;
    RANK1 = 5;
    RANK2 = 6;
    RANK3 = 7;
    RANK4 = 8;
    RANK5 = 9;
    RANK6 = 10;
    RANK7 = 11;
    RANK8 = 12;
    RANK9 = 13;
    RANK10 = 14;
    RANK11 = 15;
    RANK12 = 16;
    RANK13 = 17;
    RANK14 = 18;
    FACTION_LEADER = 19;
}



enum BgTypeId : u32 {
    NOT_ELIGIBLE = 0 {
        comment = "Your group has joined a battleground queue, but you are not eligible";
    }
    QUEUED_FOR_AV = 1 {
        comment = "Your group has joined the queue for AV";
    }
    QUEUED_FOR_WSG = 2 {
        comment = "Your group has joined the queue for WS";
    }
    QUEUED_FOR_AB = 3 {
        comment = "Your group has joined the queue for AB";
    }
    REMOVE_FROM_QUEUE = 0xFFFFFFFE {
        comment = "send bg command result to show nice message";
    }
}


/* TODO: RIGHT ? */
enum SpellSchool : u8 {
    NORMAL = 0 {
        comment = "Physical, Armor";
    }
    HOLY = 1;
    FIRE = 2;
    NATURE = 3;
    FROST = 4;
    SHADOW = 5;
    ARCANE = 6;
}

struct PetitionShowlist {
    u32 index;
    u32 charter_entry = 5863 {
        comment = "cmangos/vmangos/mangoszero: statically sets to guild charter item id (5863).";
    }
    u32 charter_display_id = 16161 {
        comment = "cmangos/vmangos/mangoszero: statically sets to guild charter display id (16161).";
    }
    u32 guild_charter_cost {
        comment = "cmangos/vmangos/mangoszero: statically set to 1000 (10 silver).";
    }
    u32 unknown1 {
        comment = "cmangos/vmangos/mangoszero: statically set to 1";
    }
    u32 unknown2 {
        comment = "cmangos/vmangos/mangoszero: statically set to 9";
        comment = "cmangos/vmangos/mangoszero: required signs?";
    }
}

struct TradeSlot {
    u8 trade_slot_number {
        comment = "cmangos/vmangos/mangoszero: sets to index of array";
    }
    u32 item_id;
    u32 display_id;
    u32 stack_count;
    u32 is_wrapped;
    Guid gift_wrapper;
    u32 enchantment;
    Guid item_creator;
    u32 spell_charges;
    u32 item_suffix_factor;
    u32 item_random_properties_id;
    u32 lock_id;
    u32 max_durability;
    u32 durability;
}


struct InitialSpell {
    u16 spell_id {
        comment = "cmangos/mangoszero: only send 'first' part of spell";
    }
    u16 unknown1 {
        comment = "cmangos/mangoszero: sets to 0";
        comment = "cmangos/mangoszero: it's not slot id";
    }
}

struct CooldownSpell {
    u16 spell_id;
    u16 item_id {
        comment = "cmangos/mangoszero: cast item id";
    }
    u16 spell_category;
    u32 cooldown_in_msecs;
    u32 category_cooldown_in_msecs;
}


flag CastFlags : u16 {
    NONE = 0x00000000;
    HIDDEN_COMBATLOG = 0x00000001 {
        comment = "mangoszero/cmangos/vmangos: hide in combat log?";
    }
    UNKNOWN2 = 0x00000002;
    UNKNOWN3 = 0x00000004;
    UNKNOWN4 = 0x00000008;
    UNKNOWN5 = 0x00000010;
    AMMO = 0x00000020 {
        comment = "cmangos/vmangos/mangoszero: Projectiles visual";
    }
    UNKNOWN7 = 0x00000040 {
        comment = "cmangos/vmangos/mangoszero: !0x41 mask used to call CGTradeSkillInfo::DoRecast";
    }
    UNKNOWN8 = 0x00000080;
    UNKNOWN9 = 0x00000100;
}

enum NewItemSource : u32 {
    LOOTED = 0;
    FROM_NPC = 1;
}

enum NewItemCreationType : u32 {
    RECEIVED = 0;
    CREATED = 1;
}

enum NewItemChatAlert : u32 {
    DO_NOT_SHOW = 0;
    SHOW = 1;
}


struct PetSpellCooldown {
    u16 spell_id;
    u16 spell_category {
        comment = "mangoszero: sets to 0";
    }
    u32 cooldown_in_msecs;
    u32 category_cooldown_in_msecs;
}


struct GossipItem {
    u32 id {
        comment = "vmangos: sets to loop index";
    }
    u8 item_icon;
    Bool coded {
        comment = "vmangos: makes pop up box password";
    }
}

struct QuestItem {
    u32 quest_id;
    u32 quest_icon;
    u32 level;
    CString title {
        comment = "vmangos/cmangos/mangoszero: max 0x200";
    }
}

struct NpcTextUpdateEmote {
    u32 delay;
    u32 emote;
}

struct NpcTextUpdate {
    f32 probability;
    CString[2] texts;
    Language language;
    NpcTextUpdateEmote[3] emotes;
}



struct ListInventoryItem {
    u32 item_stack_count;
    u32 item_id;
    u32 item_display_id;
    u32 max_items {
        comment = "cmangos: 0 for infinity item amount, although they send 0xFFFFFFFF in that case";
    }
    u32 price;
    u32 max_durability;
    u32 durability;
}

enum SellItemResult : u8 {
    CANT_FIND_ITEM = 1;
    CANT_SELL_ITEM = 2 {
        comment = "cmangos/vmangos/mangoszero: merchant doesn't like that item";
    }
    CANT_FIND_VENDOR = 3 {
        comment = "cmangos/vmangos/mangoszero: merchant doesn't like you";
    }
    YOU_DONT_OWN_THAT_ITEM = 4 {
        comment = "cmangos/vmangos/mangoszero: you don't own that item";
    }
    UNK = 5 {
        comment = "cmangos/vmangos/mangoszero: nothing appears...";
    }
    ONLY_EMPTY_BAG = 6 {
        comment = "cmangos/vmangos/mangoszero: can only do with empty bags";
    }
}


enum TrainerSpellState : u8 {
    GREEN = 0;
    RED = 1;
    GRAY = 2;
}

struct TrainerSpell {
    u32 spell {
        comment = "cmangos: learned spell (or cast-spell in profession case)";
    }
    TrainerSpellState state;
    u32 spell_cost;
    u32 talent_point_cost {
        comment = "cmangos: spells don't cost talent points";
        comment = "cmangos: set to 0";
    }
    u32 first_rank {
        comment = "cmangos: must be equal prev. field to have learn button in enabled state";
        comment = "cmangos: 1 for true 0 for false";
    }
    u8 required_level;
    u32 required_skill;
    u32 required_skill_value;
    u32 spell_chain_required;
    u32 spell_chain_previous;
    u32 unknown1 {
        comment = "cmangos/vmangos/mangoszero: all set 0";
    }
}



/* Used for CMSG_GMTICKET_CREATE */
enum GmTicketType : u8 {
    STUCK = 1;
    BEHAVIOR_HARASSMENT = 2;
    GUILD = 3;
    ITEM = 4;
    ENVIRONMENTAL = 5;
    NONQUEST_CREEP = 6;
    QUEST_QUESTNPC = 7;
    TECHNICAL = 8;
    ACCOUNT_BILLING = 9;
    CHARACTER = 10;
} {
    comment = "vmangos: From GMTicketCategory.dbc";
}


enum GmTicketStatus : u32 {
    DBERROR = 0x00;
    HASTEXT = 0x06;
    DEFAULT = 0x0A;
}

enum GmTicketEscalationStatus : u8 {
    GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0 {
        comment = "ticket is not currently assigned to a gm";
    }
    GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1 {
        comment = "ticket is assigned to a normal gm";
    }
    GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2 {
        comment = "ticket is in the escalation queue";
    }
}



struct WorldState {
    u32 state;
    u32 value;
}

struct RaidInfo {
    Map map;
    u32 reset_time;
    u32 instance_id;
}



struct ForcedReaction {
    u32 faction_id {
        comment = "vmangos: faction_id (Faction.dbc)";
    }
    u32 reputation_rank {
        comment = "vmangos: reputation rank";
    }
}

