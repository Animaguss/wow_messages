#tag_all versions "1.12";

enum UnitStandState : u8 {
    STAND = 0;
    SIT = 1;
    SIT_CHAIR = 2;
    SLEEP = 3;
    SIT_LOW_CHAIR = 4;
    SIT_MEDIUM_CHAIR = 5;
    SIT_HIGH_CHAIR = 6;
    DEAD = 7;
    KNEEL = 8;
    CUSTOM = 9 {
        comment = "Used for Cthun according to cmangos.";
    }
}

enum Power : u8 {
    MANA = 0 {
        comment = "The most common one, mobs usually have this or rage";
    }
    RAGE = 1 {
        comment = "This is what warriors use to cast their spells";
    }
    FOCUS = 2 {
        comment = "Used by hunters after Cataclysm (4.x)";
    }
    ENERGY = 3 {
        comment = "Used by rouges to do their spells";
    }
    HAPPINESS = 4 {
        comment = "Hunter's pet's happiness affect their damage";
    }
    MAX_POWERS = 5;
    ALL = 127 {
        comment = "default for class? - need check for TBC";
    }
    /* Correct?
    HEALTH = 0xFFFFFFFE {
        comment = "Health, everyone has this (-2 as signed value)";
    } */
}

flag GroupUpdateFlags : u32 {
    FLAG_NONE = 0x00000000 {
        comment = "nothing";
    }
    FLAG_STATUS = 0x00000001 {
        comment = "uint8, enum GroupMemberOnlineStatus";
    }
    FLAG_CUR_HP = 0x00000002 {
        comment = "uint16";
    }
    FLAG_MAX_HP = 0x00000004 {
        comment = "uint16";
    }
    FLAG_POWER_TYPE = 0x00000008 {
        comment = "uint8, enum Powers";
    }
    FLAG_CUR_POWER = 0x00000010 {
        comment = "uint16";
    }
    FLAG_MAX_POWER = 0x00000020 {
        comment = "uint16";
    }
    FLAG_LEVEL = 0x00000040 {
        comment = "uint16";
    }
    FLAG_ZONE = 0x00000080 {
        comment = "uint16";
    }
    FLAG_POSITION = 0x00000100 {
        comment = "uint16, uint16";
    }
    FLAG_AURAS = 0x00000200 {
        comment = "uint32 mask, for each bit set uint16 spellid";
    }
    FLAG_AURAS_2 = 0x00000400 {
        comment = "uint16 above mask continuation, giving max total of 48 auras possible";
    }
    FLAG_PET_GUID = 0x00000800 {
        comment = "uint64 pet guid";
    }
    FLAG_PET_NAME = 0x00001000 {
        comment = "pet name, NULL terminated string";
    }
    FLAG_PET_MODEL_ID = 0x00002000 {
        comment = "uint16, model id";
    }
    FLAG_PET_CUR_HP = 0x00004000 {
        comment = "uint16 pet cur health";
    }
    FLAG_PET_MAX_HP = 0x00008000 {
        comment = "uint16 pet max health";
    }
    FLAG_PET_POWER_TYPE = 0x00010000 {
        comment = "uint8 pet power type";
    }
    FLAG_PET_CUR_POWER = 0x00020000 {
        comment = "uint16 pet cur power";
    }
    FLAG_PET_MAX_POWER = 0x00040000 {
        comment = "uint16 pet max power";
    }
    FLAG_PET_AURAS = 0x00080000 {
        comment = "uint32 mask, for each bit set uint16 spellid, pet auras...";
    }
    FLAG_PET_AURAS_2 = 0x00100000 {
        comment = "uint16 above mask continuation, giving max total of 48 auras possible";
    }
    MODE_OFFLINE = 0x10000000;
}

flag GroupMemberOnlineStatus : u8 {
    OFFLINE = 0x0000;
    ONLINE = 0x0001 {
        comment = "Lua_UnitIsConnected";
    }
    PVP = 0x0002 {
        comment = "Lua_UnitIsPVP";
    }
    DEAD = 0x0004 {
        comment = "Lua_UnitIsDead";
    }
    GHOST = 0x0008 {
        comment = "Lua_UnitIsGhost";
    }
    PVP_FFA = 0x0010 {
        comment = "Lua_UnitIsPVPFreeForAll";
    }
    ZONE_OUT = 0x0020 {
        comment = "used in calls from Lua_GetPlayerMapPosition/Lua_GetBattlefieldFlagPosition";
    }
    AFK = 0x0040 {
        comment = "Lua_UnitIsAFK";
    }
    DND = 0x0080 {
        comment = "Lua_UnitIsDND";
    }
}

enum AuctionCommandAction : u32 {
    STARTED = 0 {
        comment = "ERR_AUCTION_STARTED";
    }
    REMOVED = 1 {
        comment = "ERR_AUCTION_REMOVED";
    }
    BID_PLACED = 2 {
        comment = "ERR_AUCTION_BID_PLACED";
    }
}

enum AuctionCommandResult : u32 {
    OK = 0 {
        comment = "depends on enum AuctionAction";
    }
    ERR_INVENTORY = 1 {
        comment = "depends on enum InventoryChangeResult";
    }
    ERR_DATABASE = 2 {
        comment = "ERR_AUCTION_DATABASE_ERROR (default)";
    }
    ERR_NOT_ENOUGH_MONEY = 3 {
        comment = "ERR_NOT_ENOUGH_MONEY";
    }
    ERR_ITEM_NOT_FOUND = 4 {
        comment = "ERR_ITEM_NOT_FOUND";
    }
    ERR_HIGHER_BID = 5 {
        comment = "ERR_AUCTION_HIGHER_BID";
    }
    ERR_BID_INCREMENT = 7 {
        comment = "ERR_AUCTION_BID_INCREMENT";
    }
    ERR_BID_OWN = 10 {
        comment = "ERR_AUCTION_BID_OWN";
    }
    ERR_RESTRICTED_ACCOUNT = 13 {
        comment = "ERR_RESTRICTED_ACCOUNT";
    }
}


enum SpellEffect : u32 {
    NONE = 0;
    INSTAKILL = 1;
    SCHOOL_DAMAGE = 2;
    DUMMY = 3;
    PORTAL_TELEPORT = 4;
    TELEPORT_UNITS = 5;
    APPLY_AURA = 6;
    ENVIRONMENTAL_DAMAGE = 7;
    POWER_DRAIN = 8;
    HEALTH_LEECH = 9;
    HEAL = 10;
    BIND = 11;
    PORTAL = 12;
    RITUAL_BASE = 13;
    RITUAL_SPECIALIZE = 14;
    RITUAL_ACTIVATE_PORTAL = 15;
    QUEST_COMPLETE = 16;
    WEAPON_DAMAGE_NOSCHOOL = 17;
    RESURRECT = 18;
    ADD_EXTRA_ATTACKS = 19;
    DODGE = 20;
    EVADE = 21;
    PARRY = 22;
    BLOCK = 23;
    CREATE_ITEM = 24;
    WEAPON = 25;
    DEFENSE = 26;
    PERSISTENT_AREA_AURA = 27;
    SUMMON = 28;
    LEAP = 29;
    ENERGIZE = 30;
    WEAPON_PERCENT_DAMAGE = 31;
    TRIGGER_MISSILE = 32;
    OPEN_LOCK = 33;
    SUMMON_CHANGE_ITEM = 34;
    APPLY_AREA_AURA_PARTY = 35;
    LEARN_SPELL = 36;
    SPELL_DEFENSE = 37;
    DISPEL = 38;
    LANGUAGE = 39;
    DUAL_WIELD = 40;
    SUMMON_WILD = 41;
    SUMMON_GUARDIAN = 42;
    TELEPORT_UNITS_FACE_CASTER= 43;
    SKILL_STEP = 44;
    ADD_HONOR = 45;
    SPAWN = 46;
    TRADE_SKILL = 47;
    STEALTH = 48;
    DETECT = 49;
    TRANS_DOOR = 50;
    FORCE_CRITICAL_HIT = 51;
    GUARANTEE_HIT = 52;
    ENCHANT_ITEM = 53;
    ENCHANT_ITEM_TEMPORARY = 54;
    TAMECREATURE = 55;
    SUMMON_PET = 56;
    LEARN_PET_SPELL = 57;
    WEAPON_DAMAGE = 58;
    OPEN_LOCK_ITEM = 59;
    PROFICIENCY = 60;
    SEND_EVENT = 61;
    POWER_BURN = 62;
    THREAT = 63;
    TRIGGER_SPELL = 64;
    HEALTH_FUNNEL = 65;
    POWER_FUNNEL = 66;
    HEAL_MAX_HEALTH = 67;
    INTERRUPT_CAST = 68;
    DISTRACT = 69;
    PULL = 70;
    PICKPOCKET = 71;
    ADD_FARSIGHT = 72;
    SUMMON_POSSESSED = 73;
    SUMMON_TOTEM = 74;
    HEAL_MECHANICAL = 75;
    SUMMON_OBJECT_WILD = 76;
    SCRIPT_EFFECT = 77;
    ATTACK = 78;
    SANCTUARY = 79;
    ADD_COMBO_POINTS = 80;
    CREATE_HOUSE = 81;
    BIND_SIGHT = 82;
    DUEL = 83;
    STUCK = 84;
    SUMMON_PLAYER = 85;
    ACTIVATE_OBJECT = 86;
    SUMMON_TOTEM_SLOT1 = 87;
    SUMMON_TOTEM_SLOT2 = 88;
    SUMMON_TOTEM_SLOT3 = 89;
    SUMMON_TOTEM_SLOT4 = 90;
    THREAT_ALL = 91;
    ENCHANT_HELD_ITEM = 92;
    SUMMON_PHANTASM = 93;
    SELF_RESURRECT = 94;
    SKINNING = 95;
    CHARGE = 96;
    SUMMON_CRITTER = 97;
    KNOCK_BACK = 98;
    DISENCHANT = 99;
    INEBRIATE = 100;
    FEED_PET = 101;
    DISMISS_PET = 102;
    REPUTATION = 103;
    SUMMON_OBJECT_SLOT1 = 104;
    SUMMON_OBJECT_SLOT2 = 105;
    SUMMON_OBJECT_SLOT3 = 106;
    SUMMON_OBJECT_SLOT4 = 107;
    DISPEL_MECHANIC = 108;
    SUMMON_DEAD_PET = 109;
    DESTROY_ALL_TOTEMS = 110;
    DURABILITY_DAMAGE = 111;
    SUMMON_DEMON = 112;
    RESURRECT_NEW = 113;
    ATTACK_ME = 114;
    DURABILITY_DAMAGE_PCT = 115;
    SKIN_PLAYER_CORPSE = 116;
    SPIRIT_HEAL = 117;
    SKILL = 118;
    APPLY_AREA_AURA_PET = 119;
    TELEPORT_GRAVEYARD = 120;
    NORMALIZED_WEAPON_DMG = 121;
    UNKNOWN122 = 122;
    SEND_TAXI = 123;
    PLAYER_PULL = 124;
    MODIFY_THREAT_PERCENT = 125;
    UNKNOWN126 = 126;
    UNKNOWN127 = 127;
}

struct SpellLog {
    SpellEffect effect;
    u32 amount_of_logs = 1 {
        comment = "vmangos/cmangos/mangoszero: Can be variable but all use constant 1";
    }
    if (effect == POWER_DRAIN) {
        Guid target1;
        u32 unknown1;
        u32 unknown2;
        f32 unknown3;
    } else if (effect == ADD_EXTRA_ATTACKS) {
        Guid target2;
        u32 unknown4;
    } else if (effect == INTERRUPT_CAST) {
        Guid target3;
        Spell interrupted_spell;
    } else if (effect == DURABILITY_DAMAGE) {
        Guid target4;
        u32 unknown5;
        u32 unknown6;
    } else if (effect == CREATE_ITEM) {
        u32 spell_effect_item_type;
    } else if (effect == FEED_PET) {
        u32 item_target_entry;
    } else if (effect == RESURRECT
            || effect == DISPEL
            || effect == THREAT
            || effect == DISTRACT
            || effect == SANCTUARY
            || effect == THREAT_ALL
            || effect == DISPEL_MECHANIC
            || effect == RESURRECT_NEW
            || effect == ATTACK_ME
            || effect == SKIN_PLAYER_CORPSE
            || effect == MODIFY_THREAT_PERCENT
            || effect == UNKNOWN126
            || effect == DISMISS_PET
            || effect == OPEN_LOCK
            || effect == OPEN_LOCK_ITEM
            || effect == INSTAKILL)
    {
        Guid target5;
    }
}


struct ItemDamageType {
    u32 damage_minimum;
    u32 damage_maximum;
    u32 damage_type {
        comment = "mangoszero/vmangos/cmangos: id from Resistances.dbc";
    }
}

struct ItemSpells {
    Spell spell;   
    u32 spell_trigger;
    u32 spell_charges {
        comment = "let the database control the sign here. negative means that the item should be consumed once the charges are consumed.";
    }
    u32 spell_cooldown;
    u32 spell_category;
    u32 spell_category_cooldown;
}


enum GroupType : u8 {
    NORMAL = 0;
    RAID = 1;
}

struct GroupListMember {
    CString name;
    Guid guid;
    Bool is_online;
}



flag SpellCastTargetFlags : u16 {
    SELF = 0x00000000;
    UNUSED1 = 0x00000001 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically)";
    }
    UNIT = 0x00000002 {
        comment = "pguid";
    }
    UNIT_RAID = 0x00000004 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically) - raid member";
    }
    UNIT_PARTY = 0x00000008 {
        comment = "not used in any spells as of 2.4.3 (can be set dynamically) - party member";
    }
    ITEM = 0x00000010 {
        comment = "pguid";
    }
    SOURCE_LOCATION = 0x00000020 {
        comment = "3xfloat";
    }
    DEST_LOCATION = 0x00000040 {
        comment = "3xfloat";
    }
    UNIT_ENEMY = 0x00000080 {
        comment = "CanAttack == true";
    }
    UNIT_ALLY = 0x00000100 {
        comment = "CanAssist == true";
    }
    CORPSE_ENEMY = 0x00000200 {
        comment = "pguid, CanAssist == false";
    }
    UNIT_DEAD = 0x00000400 {
        comment = "skinning-like effects";
    }
    GAMEOBJECT = 0x00000800 {
        comment = "pguid, 0 spells in 2.4.3";
    }
    TRADE_ITEM = 0x00001000 {
        comment = "pguid, 0 spells";
    }
    STRING = 0x00002000 {
        comment = "string, 0 spells";
    }
    LOCKED = 0x00004000 {
        comment = "199 spells, opening object/lock";
    }
    CORPSE_ALLY = 0x00008000 {
        comment = "pguid, CanAssist == true";
    }
} {
    comment = "Also has UNIT_MINIPET = 0x00010000 (pguid, not used in any spells as of 2.4.3 (can be set dynamically)) however this is outside range of u16, which SpellCastTargets needs.";
}



struct SpellCastTargets {
    SpellCastTargetFlags target_flags;
    if (target_flags & UNIT) {
        PackedGuid unit_target1;
    }
    if (target_flags & UNIT_ENEMY) {
        PackedGuid unit_target2;
    }
    if (target_flags & GAMEOBJECT) {
        PackedGuid object_target1;
    }
    if (target_flags & LOCKED) {
        PackedGuid object_target2;
    }
    if (target_flags & ITEM) {
        PackedGuid item_target1;
    }
    if (target_flags & TRADE_ITEM) {
        PackedGuid item_target2;
    }
    if (target_flags & SOURCE_LOCATION) {
        f32 position_x1;
        f32 position_y1;
        f32 position_z1;
    }
    if (target_flags & DEST_LOCATION) {
        f32 position_x2;
        f32 position_y2;
        f32 position_z2;
    }
    if (target_flags & STRING) {
        CString target_string;
    }
    if (target_flags & CORPSE_ALLY) {
        PackedGuid corpse_target1;
    }
    if (target_flags & CORPSE_ENEMY) {
        PackedGuid corpse_target2;
    }
}

enum PowerType : u32 {
    MANA = 0 {
        comment = "UNIT_FIELD_POWER1";
    }
    RAGE = 1 {
        comment = "UNIT_FIELD_POWER2";
    }
    FOCUS = 2 {
        comment = "UNIT_FIELD_POWER3";
    }
    ENERGY = 3 {
        comment = "UNIT_FIELD_POWER4";
    }
    HAPPINESS = 4 {
        comment = "UNIT_FIELD_POWER5";
    }
    HEALTH = 0xFFFFFFFE {
        comment = "(-2 as signed value)";
    }
}






/* TODO Real names?
enum ItemClass : u8 {
    CONSUMABLE = 0;
    CONTAINER = 1;
    WEAPON = 2;
    GEM = 3;
    ARMOR = 4;
    REAGENT = 5;
    PROJECTILE = 6;
    TRADE_GOODS = 7;
    GENERIC = 8;
    RECIPE = 9;
    MONEY = 10;
    QUIVER = 11;
    QUEST = 12;
    KEY = 13;
    PERMANENT = 14;
    JUNK = 15;
}
*/
enum ItemClass : u8 {
    CONSUMABLE = 0;
    CONTAINER = 1;
    WEAPON = 2;
    RESERVED_1 = 3;
    ARMOR = 4;
    REAGENT = 5;
    PROJECTILE = 6;
    TRADE_GOODS = 7;
    RESERVED_2 = 8;
    RECIPE = 9;
    RESERVED_3 = 10;
    QUIVER = 11;
    QUEST = 12;
    KEY = 13;
    RESERVED_4 = 14;
    MISC = 15;
}

enum SpellCastResult : u8 {
    AFFECTING_COMBAT = 0x00;
    ALREADY_AT_FULL_HEALTH = 0x01;
    ALREADY_AT_FULL_MANA = 0x02;
    ALREADY_BEING_TAMED = 0x03;
    ALREADY_HAVE_CHARM = 0x04;
    ALREADY_HAVE_SUMMON = 0x05;
    ALREADY_OPEN = 0x06;
    MORE_POWERFUL_SPELL_ACTIVE = 0x07;
    BAD_IMPLICIT_TARGETS = 0x09;
    BAD_TARGETS = 0x0A;
    CANT_BE_CHARMED = 0x0B;
    CANT_BE_DISENCHANTED = 0x0C;
    CANT_BE_PROSPECTED = 0x0D;
    CANT_CAST_ON_TAPPED = 0x0E;
    CANT_DUEL_WHILE_INVISIBLE = 0x0F;
    CANT_DUEL_WHILE_STEALTHED = 0x10;
    CANT_TOO_CLOSE_TO_ENEMY = 0x11;
    CANT_DO_THAT_YET = 0x12;
    CASTER_DEAD = 0x13;
    CHARMED = 0x14;
    CHEST_IN_USE = 0x15;
    CONFUSED = 0x16;
    DONT_REPORT = 0x17;
    EQUIPPED_ITEM = 0x18;
    EQUIPPED_ITEM_CLASS = 0x19;
    EQUIPPED_ITEM_CLASS_MAINHAND = 0x1A;
    EQUIPPED_ITEM_CLASS_OFFHAND = 0x1B;
    ERROR = 0x1C;
    FIZZLE = 0x1D;
    FLEEING = 0x1E;
    FOOD_LOWLEVEL = 0x1F;
    HIGHLEVEL = 0x20;
    IMMUNE = 0x22;
    INTERRUPTED = 0x23;
    INTERRUPTED_COMBAT = 0x24;
    ITEM_ALREADY_ENCHANTED = 0x25;
    ITEM_GONE = 0x26;
    ENCHANT_NOT_EXISTING_ITEM = 0x27;
    ITEM_NOT_READY = 0x28;
    LEVEL_REQUIREMENT = 0x29;
    LINE_OF_SIGHT = 0x2A;
    LOWLEVEL = 0x2B;
    SKILL_NOT_HIGH_ENOUGH = 0x2C;
    MAINHAND_EMPTY = 0x2D;
    MOVING = 0x2E;
    NEED_AMMO = 0x2F;
    NEED_REQUIRES_SOMETHING = 0x30;
    NEED_EXOTIC_AMMO = 0x31;
    NOPATH = 0x32;
    NOT_BEHIND = 0x33;
    NOT_FISHABLE = 0x34;
    NOT_HERE = 0x35;
    NOT_INFRONT = 0x36;
    NOT_IN_CONTROL = 0x37;
    NOT_KNOWN = 0x38;
    NOT_MOUNTED = 0x39;
    NOT_ON_TAXI = 0x3A;
    NOT_ON_TRANSPORT = 0x3B;
    NOT_READY = 0x3C;
    NOT_SHAPESHIFT = 0x3D;
    NOT_STANDING = 0x3E;
    NOT_TRADEABLE = 0x3F {
        comment = "rogues trying 'enchant' other's weapon with poison";
    }
    NOT_TRADING = 0x40;
    NOT_UNSHEATHED = 0x41;
    NOT_WHILE_GHOST = 0x42;
    NO_AMMO = 0x43;
    NO_CHARGES_REMAIN = 0x44;
    NO_CHAMPION = 0x45;
    NO_COMBO_POINTS = 0x46;
    NO_DUELING = 0x47;
    NO_ENDURANCE = 0x48;
    NO_FISH = 0x49;
    NO_ITEMS_WHILE_SHAPESHIFTED = 0x4A;
    NO_MOUNTS_ALLOWED = 0x4B;
    NO_PET = 0x4C;
    NO_POWER = 0x4D;
    NOTHING_TO_DISPEL = 0x4E;
    NOTHING_TO_STEAL = 0x4F;
    ONLY_ABOVEWATER = 0x50;
    ONLY_DAYTIME = 0x51;
    ONLY_INDOORS = 0x52;
    ONLY_MOUNTED = 0x53;
    ONLY_NIGHTTIME = 0x54;
    ONLY_OUTDOORS = 0x55;
    ONLY_SHAPESHIFT = 0x56;
    ONLY_STEALTHED = 0x57;
    ONLY_UNDERWATER = 0x58;
    OUT_OF_RANGE = 0x59;
    PACIFIED = 0x5A;
    POSSESSED = 0x5B;
    REQUIRES_AREA = 0x5D;
    REQUIRES_SPELL_FOCUS = 0x5E;
    ROOTED = 0x5F;
    SILENCED = 0x60;
    SPELL_IN_PROGRESS = 0x61;
    SPELL_LEARNED = 0x62;
    SPELL_UNAVAILABLE = 0x63;
    STUNNED = 0x64;
    TARGETS_DEAD = 0x65;
    TARGET_AFFECTING_COMBAT = 0x66;
    TARGET_AURASTATE = 0x67;
    TARGET_DUELING = 0x68;
    TARGET_ENEMY = 0x69;
    TARGET_ENRAGED = 0x6A;
    TARGET_FRIENDLY = 0x6B;
    TARGET_IN_COMBAT = 0x6C;
    TARGET_IS_PLAYER = 0x6D;
    TARGET_NOT_DEAD = 0x6E;
    TARGET_NOT_IN_PARTY = 0x6F;
    TARGET_NOT_LOOTED = 0x70;
    TARGET_NOT_PLAYER = 0x71;
    TARGET_NO_POCKETS = 0x72;
    TARGET_NO_WEAPONS = 0x73;
    TARGET_UNSKINNABLE = 0x74;
    THIRST_SATIATED = 0x75;
    TOO_CLOSE = 0x76;
    TOO_MANY_OF_ITEM = 0x77;
    TRAINING_POINTS = 0x79;
    TRY_AGAIN = 0x7A;
    UNIT_NOT_BEHIND = 0x7B;
    UNIT_NOT_INFRONT = 0x7C;
    WRONG_PET_FOOD = 0x7D;
    NOT_WHILE_FATIGUED = 0x7E;
    TARGET_NOT_IN_INSTANCE = 0x7F;
    NOT_WHILE_TRADING = 0x80;
    TARGET_NOT_IN_RAID = 0x81;
    DISENCHANT_WHILE_LOOTING = 0x82;
    PROSPECT_WHILE_LOOTING = 0x83;
    TARGET_FREEFORALL = 0x85;
    NO_EDIBLE_CORPSES = 0x86;
    ONLY_BATTLEGROUNDS = 0x87;
    TARGET_NOT_GHOST = 0x88;
    TOO_MANY_SKILLS = 0x89;
    CANT_USE_NEW_ITEM = 0x8A;
    WRONG_WEATHER = 0x8B;
    DAMAGE_IMMUNE = 0x8C;
    PREVENTED_BY_MECHANIC = 0x8D;
    PLAY_TIME = 0x8E;
    REPUTATION = 0x8F;
    MIN_SKILL = 0x90;
    UNKNOWN = 0x91;
}


enum AiReaction : u32 {
    ALERT = 0 {
        comment = "pre-aggro (used in client packet handler)";
    }
    FRIENDLY = 1 {
        comment = "(NOT used in client packet handler)";
    }
    HOSTILE = 2 {
        comment = "sent on every attack, triggers aggro sound (used in client packet handler)";
    }
    AFRAID = 3 {
        comment = "seen for polymorph (when AI not in control of self?) (NOT used in client packet handler)";
    }
    DESTROY = 4 {
        comment = "used on object destroy (NOT used in client packet handler)";
    }
}


enum LootMethod : u8 {
    CORPSE                 = 1;
    PICKPOCKETING          = 2;
    FISHING                = 3;
    DISENCHANTING          = 4;
    SKINNING               = 6 {
        comment = "unsupported by client, send LOOT_PICKPOCKETING instead";
    }
    FISHINGHOLE            = 20 {
        comment = "unsupported by client, send LOOT_FISHING instead";
    }
    FISHING_FAIL           = 21 {
        comment = "unsupported by client, send LOOT_FISHING instead";
    }
    INSIGNIA               = 22 {
        comment = "unsupported by client, send LOOT_CORPSE instead";
    }
}



enum DuelWinnerReason : u8 {
    WON = 0;
    FLED = 1;
}

enum MountResult : u32 {
    INVALIDMOUNTEE = 0    {
        comment = "You can't mount that unit!";
    }
    TOOFARAWAY = 1    {
        comment = "That mount is too far away!";
    }
    ALREADYMOUNTED = 2    {
        comment = "You're already mounted!";
    }
    NOTMOUNTABLE = 3    {
        comment = "That unit can't be mounted!";
    }
    NOTYOURPET = 4    {
        comment = "That mount isn't your pet!";
    }
    OTHER = 5    {
        comment = "internal";
    }
    LOOTING = 6    {
        comment = "You can't mount while looting!";
    }
    RACECANTMOUNT = 7    {
        comment = "You can't mount because of your race!";
    }
    SHAPESHIFTED = 8    {
        comment = "You can't mount while shapeshifted!";
    }
    FORCEDDISMOUNT = 9    {
        comment = "You dismount before continuing.";
    }
    OK = 10    {
        comment = "no error";
    }
}



enum PetTameFailureReason : u8 {
    INVALIDCREATURE = 1;
    TOOMANY = 2;
    CREATUREALREADYOWNED = 3;
    NOTTAMEABLE = 4;
    ANOTHERSUMMONACTIVE = 5;
    UNITSCANTTAME = 6;
    NOPETAVAILABLE = 7 {
        comment = "not used in taming";
    }
    INTERNALERROR = 8;
    TOOHIGHLEVEL = 9;
    DEAD = 10 {
        comment = "not used in taming";
    }
    NOTDEAD = 11 {
        comment = "not used in taming";
    }
    UNKNOWNERROR = 12;
}



enum PetReactState : u8 {
    PASSIVE = 0;
    DEFENSIVE = 1;
    AGGRESSIVE = 2;
}

enum PetCommandState : u8 {
    STAY = 0;
    FOLLOW = 1;
    ATTACK = 2;
    DISMISS = 3;
}



enum BuyResult : u8 {
    CANT_FIND_ITEM = 0;
    ITEM_ALREADY_SOLD = 1;
    NOT_ENOUGHT_MONEY = 2;
    SELLER_DONT_LIKE_YOU = 4;
    DISTANCE_TOO_FAR = 5;
    ITEM_SOLD_OUT = 7;
    CANT_CARRY_MORE = 8;
    RANK_REQUIRE = 11;
    REPUTATION_REQUIRE = 12;
}


enum ActivateTaxiReply : u32 {
    OK = 0;
    UNSPECIFIEDSERVERERROR = 1;
    NOSUCHPATH = 2;
    NOTENOUGHMONEY = 3;
    TOOFARAWAY = 4;
    NOVENDORNEARBY = 5;
    NOTVISITED = 6;
    PLAYERBUSY = 7;
    PLAYERALREADYMOUNTED = 8;
    PLAYERSHAPESHIFTED = 9;
    PLAYERMOVING = 10;
    SAMENODE = 11;
    NOTSTANDING = 12;
}


enum TrainingFailureReason : u32
{
    UNAVAILABLE = 0 {
        comment = "Trainer service %d unavailable.";
    }
    NOT_ENOUGH_MONEY = 1 {
        comment = "Not enough money for trainer service %d.";
    }
    NOT_ENOUGH_SKILL = 2 {
        comment = "Not enough skill points for trainer service %d.";
    }
} {
    comment = "These errors are only printed in client console.";
}

enum BuyBankSlotResult : u32 {
    FAILED_TOO_MANY = 0;
    INSUFFICIENT_FUNDS = 1;
    NOTBANKER = 2;
    OK = 3;
}


enum PetitionResult : u32 {
    OK = 0;
    ALREADY_SIGNED = 1;
    ALREADY_IN_GUILD = 2;
    CANT_SIGN_OWN = 3;
    NEED_MORE = 4;
    NOT_SERVER = 5;
}

enum PetitionTurnInResult : u32 {
    OK = 0;
    ALREADY_SIGNED = 1;
    ALREADY_IN_GUILD = 2;
    CANT_SIGN_OWN = 3;
    NEED_MORE = 4;
    NOT_SERVER = 5;
}


enum ExperienceAwardType : u8 {
    KILL = 0;
    NON_KILL = 1;
}



enum TimerType : u32 {
    FATIGUE = 0;
    BREATH = 1;
    FEIGNDEATH = 2;
    ENVIRONMENTAL = 3 {
        comment = "Might be a mangos only thing.";
    }
}

enum SheathState : u8 {
    UNARMED = 0;
    MELEE = 1;
    RANGED = 2;
} {
    comment = "According to cmangos: byte value (UNIT_FIELD_BYTES_2,0)";
}



enum EnvironmentalDamageType : u32 {
    EXHAUSTED = 0;
    DROWNING = 1;
    FALL = 2;
    LAVA = 3;
    SLIME = 4;
    FIRE = 5;
}



enum GmTicketResponse : u32 {
    NOT_EXIST = 0;
    ALREADY_EXIST = 1;
    CREATE_SUCCESS = 2;
    CREATE_ERROR = 3;
    UPDATE_SUCCESS = 4;
    UPDATE_ERROR = 5;
    TICKET_DELETED = 9;
}




enum MailAction : u32 {
    SEND = 0;
    MONEY_TAKEN = 1;
    ITEM_TAKEN = 2;
    RETURNED_TO_SENDER = 3;
    DELETED = 4;
    MADE_PERMANENT = 5;
}

enum MailResult : u32 {
    OK = 0;
    ERR_EQUIP_ERROR = 1;
    ERR_CANNOT_SEND_TO_SELF = 2;
    ERR_NOT_ENOUGH_MONEY = 3;
    ERR_RECIPIENT_NOT_FOUND = 4;
    ERR_NOT_YOUR_TEAM = 5;
    ERR_INTERNAL_ERROR = 6;
    ERR_DISABLED_FOR_TRIAL_ACC = 14;
    ERR_RECIPIENT_CAP_REACHED = 15;
    ERR_CANT_SEND_WRAPPED_COD = 16;
    ERR_MAIL_AND_CHAT_SUSPENDED = 17;
    ERR_TOO_MANY_ATTACHMENTS = 18;
    ERR_MAIL_ATTACHMENT_INVALID = 19;
} {
    comment = "mangoszero: in SMSG_SEND_MAIL_RESULT, 7-13 and 16+: 'Mail database error'";
}







enum SpellMissInfo : u32 {
    NONE = 0;
    MISS = 1;
    RESIST = 2;
    DODGE = 3;
    PARRY = 4;
    BLOCK = 5;
    EVADE = 6;
    IMMUNE = 7;
    IMMUNE2 = 8;
    DEFLECT = 9;
    ABSORB = 10;
    REFLECT = 11;
}

struct SpellMiss {
    u64 target_guid;
    SpellMissInfo miss_info;
}

enum LogFormat : u8 {
    DEFAULT = 0;
    DEBUG = 1;
}




enum StableResult : u8 {
    ERR_MONEY = 0x01 {
        comment = "you don't have enough money";
    }
    ERR_STABLE = 0x06 {
        comment = "currently used in most fail cases";
    }
    SUCCESS_STABLE = 0x08 {
        comment = "table success";
    }
    SUCCESS_UNSTABLE = 0x09 {
        comment = "unstable/swap success";
    }
    SUCCESS_BUY_SLOT = 0x0A {
        comment = "buy slot success";
    }
}




enum FarSightOperation : u8 {
    REMOVE = 0;
    ADD = 1;
}

enum RaidGroupError : u32 {
    REQUIRED = 1;
    FULL = 2;
}

enum BuybackSlot : u32 {
    SLOT1 = 69;
    SLOT2 = 70;
    SLOT3 = 71;
    SLOT4 = 72;
    SLOT5 = 73;
    SLOT6 = 74;
    SLOT7 = 75;
    SLOT8 = 76;
    SLOT9 = 77;
    SLOT10 = 78;
    SLOT11 = 79;
    SLOT12 = 80;
    SLOT13 = 81;
}

enum ServerMessageType : u32 {
    SHUTDOWN_TIME = 1;
    RESTART_TIME = 2;
    CUSTOM = 3;
    SHUTDOWN_CANCELLED = 4;
    RESTART_CANCELLED = 5;
}

enum MeetingStoneStatus : u8 {
    LEAVE_QUEUE = 0;
    JOINED_QUEUE = 1;
    PARTY_MEMBER_LEFT_LFG = 2;
    PARTY_MEMBER_REMOVED_PARTY_REMOVED = 3;
    LOOKING_FOR_NEW_PARTY_IN_QUEUE = 4;
    NONE = 5;
}

enum RollVote : u8 {
    PASS = 0;
    NEED = 1;
    GREED = 2;
}

enum MeetingStoneFailure : u8 {
    MEETINGSTONE_FAIL_PARTYLEADER = 1;
    MEETINGSTONE_FAIL_FULL_GROUP = 2;
    MEETINGSTONE_FAIL_RAID_GROUP = 3;
}

enum PetFeedback : u8 {
    PET_DEAD = 1;
    NOTHING_TO_EAT = 2;
    CANT_ATTACK_TARGET = 3;
    NO_PATH_TO = 4;
}

enum BattlefieldPortAction : u8 {
    LEAVE_QUEUE = 0;
    ENTER_BATTLE = 1;
}

enum WeatherType : u32 {
    FINE = 0;
    RAIN = 1;
    SNOW = 2;
    STORM = 3;
}

enum WeatherChangeType : u8 {
    SMOOTH = 0;
    INSTANT = 1;
}

enum RaidInstanceMessage : u32 {
    WARNING_HOURS     = 1 {
        comment = "WARNING! %s is scheduled to reset in %d hour(s).";
    }
    WARNING_MIN       = 2 {
        comment = "WARNING! %s is scheduled to reset in %d minute(s)!";
    }
    WARNING_MIN_SOON  = 3 {
        comment = "WARNING! %s is scheduled to reset in %d minute(s). Please exit the zone or you will be returned to your bind location!";
    }
    WELCOME           = 4 {
        comment = "Welcome to %s. This raid instance is scheduled to reset in %s.";
    }
}

enum InstanceResetFailedReason : u8 {
    GENERAL = 0 {
        comment = "at least one player is in the instance";
    }
    OFFLINE = 1 {
        comment = "at least one player is offline";
    }
    ZONING = 2 {
        comment = "at least one player try to enter the instance (being teleported in)";
    }
    SILENTLY = 3;
}


enum PetTalkReason : u32 {
    SPECIAL_SPELL = 0;
    ATTACK = 1;
}

enum GmTicketStatusResponse : u32 {
    UPDATED = 1;
    CLOSED = 2;
    SURVEY = 3;
}

struct GmSurveyQuestion {
    u32 question_id {
        comment = "cmangos: questions found in GMSurveyQuestions.dbc";
    }
    u8 answer {
        comment = "Rating: hardcoded limit of 0-5 in pre-Wrath, ranges defined in GMSurveyAnswers.dbc Wrath+";
    }
}




enum PvpRank : u8 {
    NO_RANK = 0;
    PARIAH = 1;
    OUTLAW = 2;
    EXILED = 3;
    DISHONORED = 4;
    RANK1 = 5;
    RANK2 = 6;
    RANK3 = 7;
    RANK4 = 8;
    RANK5 = 9;
    RANK6 = 10;
    RANK7 = 11;
    RANK8 = 12;
    RANK9 = 13;
    RANK10 = 14;
    RANK11 = 15;
    RANK12 = 16;
    RANK13 = 17;
    RANK14 = 18;
    FACTION_LEADER = 19;
}



enum BgTypeId : u32 {
    NOT_ELIGIBLE = 0 {
        comment = "Your group has joined a battleground queue, but you are not eligible";
    }
    QUEUED_FOR_AV = 1 {
        comment = "Your group has joined the queue for AV";
    }
    QUEUED_FOR_WSG = 2 {
        comment = "Your group has joined the queue for WS";
    }
    QUEUED_FOR_AB = 3 {
        comment = "Your group has joined the queue for AB";
    }
    REMOVE_FROM_QUEUE = 0xFFFFFFFE {
        comment = "send bg command result to show nice message";
    }
}


/* TODO: RIGHT ? */
enum SpellSchool : u8 {
    NORMAL = 0 {
        comment = "Physical, Armor";
    }
    HOLY = 1;
    FIRE = 2;
    NATURE = 3;
    FROST = 4;
    SHADOW = 5;
    ARCANE = 6;
}

struct PetitionShowlist {
    u32 index;
    u32 charter_entry = 5863 {
        comment = "cmangos/vmangos/mangoszero: statically sets to guild charter item id (5863).";
    }
    u32 charter_display_id = 16161 {
        comment = "cmangos/vmangos/mangoszero: statically sets to guild charter display id (16161).";
    }
    u32 guild_charter_cost {
        comment = "cmangos/vmangos/mangoszero: statically set to 1000 (10 silver).";
    }
    u32 unknown1 {
        comment = "cmangos/vmangos/mangoszero: statically set to 1";
    }
    u32 unknown2 {
        comment = "cmangos/vmangos/mangoszero: statically set to 9";
        comment = "cmangos/vmangos/mangoszero: required signs?";
    }
}

struct TradeSlot {
    u8 trade_slot_number {
        comment = "cmangos/vmangos/mangoszero: sets to index of array";
    }
    u32 item_id;
    u32 display_id;
    u32 stack_count;
    u32 is_wrapped;
    Guid gift_wrapper;
    u32 enchantment;
    Guid item_creator;
    u32 spell_charges;
    u32 item_suffix_factor;
    u32 item_random_properties_id;
    u32 lock_id;
    u32 max_durability;
    u32 durability;
}


struct InitialSpell {
    u16 spell_id {
        comment = "cmangos/mangoszero: only send 'first' part of spell";
    }
    u16 unknown1 {
        comment = "cmangos/mangoszero: sets to 0";
        comment = "cmangos/mangoszero: it's not slot id";
    }
}

struct CooldownSpell {
    u16 spell_id;
    u16 item_id {
        comment = "cmangos/mangoszero: cast item id";
    }
    u16 spell_category;
    u32 cooldown_in_msecs;
    u32 category_cooldown_in_msecs;
}


flag CastFlags : u16 {
    NONE = 0x00000000;
    HIDDEN_COMBATLOG = 0x00000001 {
        comment = "mangoszero/cmangos/vmangos: hide in combat log?";
    }
    UNKNOWN2 = 0x00000002;
    UNKNOWN3 = 0x00000004;
    UNKNOWN4 = 0x00000008;
    UNKNOWN5 = 0x00000010;
    AMMO = 0x00000020 {
        comment = "cmangos/vmangos/mangoszero: Projectiles visual";
    }
    UNKNOWN7 = 0x00000040 {
        comment = "cmangos/vmangos/mangoszero: !0x41 mask used to call CGTradeSkillInfo::DoRecast";
    }
    UNKNOWN8 = 0x00000080;
    UNKNOWN9 = 0x00000100;
}

enum NewItemSource : u32 {
    LOOTED = 0;
    FROM_NPC = 1;
}

enum NewItemCreationType : u32 {
    RECEIVED = 0;
    CREATED = 1;
}

enum NewItemChatAlert : u32 {
    DO_NOT_SHOW = 0;
    SHOW = 1;
}


struct PetSpellCooldown {
    u16 spell_id;
    u16 spell_category {
        comment = "mangoszero: sets to 0";
    }
    u32 cooldown_in_msecs;
    u32 category_cooldown_in_msecs;
}


struct GossipItem {
    u32 id {
        comment = "vmangos: sets to loop index";
    }
    u8 item_icon;
    Bool coded {
        comment = "vmangos: makes pop up box password";
    }
}

struct QuestItem {
    u32 quest_id;
    u32 quest_icon;
    u32 level;
    CString title {
        comment = "vmangos/cmangos/mangoszero: max 0x200";
    }
}

struct NpcTextUpdateEmote {
    u32 delay;
    u32 emote;
}

struct ListInventoryItem {
    u32 item_stack_count;
    u32 item_id;
    u32 item_display_id;
    u32 max_items {
        comment = "cmangos: 0 for infinity item amount, although they send 0xFFFFFFFF in that case";
    }
    u32 price;
    u32 max_durability;
    u32 durability;
}

enum SellItemResult : u8 {
    CANT_FIND_ITEM = 1;
    CANT_SELL_ITEM = 2 {
        comment = "cmangos/vmangos/mangoszero: merchant doesn't like that item";
    }
    CANT_FIND_VENDOR = 3 {
        comment = "cmangos/vmangos/mangoszero: merchant doesn't like you";
    }
    YOU_DONT_OWN_THAT_ITEM = 4 {
        comment = "cmangos/vmangos/mangoszero: you don't own that item";
    }
    UNK = 5 {
        comment = "cmangos/vmangos/mangoszero: nothing appears...";
    }
    ONLY_EMPTY_BAG = 6 {
        comment = "cmangos/vmangos/mangoszero: can only do with empty bags";
    }
}


enum TrainerSpellState : u8 {
    GREEN = 0;
    RED = 1;
    GRAY = 2;
}

struct TrainerSpell {
    u32 spell {
        comment = "cmangos: learned spell (or cast-spell in profession case)";
    }
    TrainerSpellState state;
    u32 spell_cost;
    u32 talent_point_cost {
        comment = "cmangos: spells don't cost talent points";
        comment = "cmangos: set to 0";
    }
    u32 first_rank {
        comment = "cmangos: must be equal prev. field to have learn button in enabled state";
        comment = "cmangos: 1 for true 0 for false";
    }
    u8 required_level;
    u32 required_skill;
    u32 required_skill_value;
    u32 spell_chain_required;
    u32 spell_chain_previous;
    u32 unknown1 {
        comment = "cmangos/vmangos/mangoszero: all set 0";
    }
}



/* Used for CMSG_GMTICKET_CREATE */
enum GmTicketType : u8 {
    STUCK = 1;
    BEHAVIOR_HARASSMENT = 2;
    GUILD = 3;
    ITEM = 4;
    ENVIRONMENTAL = 5;
    NONQUEST_CREEP = 6;
    QUEST_QUESTNPC = 7;
    TECHNICAL = 8;
    ACCOUNT_BILLING = 9;
    CHARACTER = 10;
} {
    comment = "vmangos: From GMTicketCategory.dbc";
}


enum GmTicketStatus : u32 {
    DBERROR = 0x00;
    HASTEXT = 0x06;
    DEFAULT = 0x0A;
}

enum GmTicketEscalationStatus : u8 {
    GMTICKET_ASSIGNEDTOGM_STATUS_NOT_ASSIGNED = 0 {
        comment = "ticket is not currently assigned to a gm";
    }
    GMTICKET_ASSIGNEDTOGM_STATUS_ASSIGNED = 1 {
        comment = "ticket is assigned to a normal gm";
    }
    GMTICKET_ASSIGNEDTOGM_STATUS_ESCALATED = 2 {
        comment = "ticket is in the escalation queue";
    }
}



struct WorldState {
    u32 state;
    u32 value;
}

struct RaidInfo {
    Map map;
    u32 reset_time;
    u32 instance_id;
}



struct ForcedReaction {
    u32 faction_id {
        comment = "vmangos: faction_id (Faction.dbc)";
    }
    u32 reputation_rank {
        comment = "vmangos: reputation rank";
    }
}

