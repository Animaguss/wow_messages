#tag_all versions "1.12";

cmsg CMSG_MOUNTSPECIAL_ANIM = 0x0171 {}

smsg SMSG_MOUNTSPECIAL_ANIM = 0x0172 {
    u64 guid;
}

enum PetTameFailureReason : u8 {
    INVALIDCREATURE = 1;
    TOOMANY = 2;
    CREATUREALREADYOWNED = 3;
    NOTTAMEABLE = 4;
    ANOTHERSUMMONACTIVE = 5;
    UNITSCANTTAME = 6;
    NOPETAVAILABLE = 7 {
        comment = "not used in taming";
    }
    INTERNALERROR = 8;
    TOOHIGHLEVEL = 9;
    DEAD = 10 {
        comment = "not used in taming";
    }
    NOTDEAD = 11 {
        comment = "not used in taming";
    }
    UNKNOWNERROR = 12;
}

smsg SMSG_PET_TAME_FAILURE = 0x0173 {
    PetTameFailureReason reason;
}


cmsg CMSG_PET_ACTION = 0x0175 {
    u64 pet_guid;
    /* data? */
    u32 data;
    u64 target_guid;
}

cmsg CMSG_PET_ABANDON = 0x0176 {
    u64 pet_guid;
}

cmsg CMSG_PET_RENAME = 0x0177 {
    u64 pet_guid;
    CString name;
}

smsg SMSG_PET_NAME_INVALID = 0x0178 {}


enum PetReactState : u8 {
    PASSIVE = 0;
    DEFENSIVE = 1;
    AGGRESSIVE = 2;
}

enum PetCommandState : u8 {
    STAY = 0;
    FOLLOW = 1;
    ATTACK = 2;
    DISMISS = 3;
}

smsg SMSG_PET_MODE = 0x017A {
    u64 guid;
    PetReactState react_state;
    PetCommandState command_state;
    u8 unknown1 {
        comment = "vmangos sets to 0.";
    }
    /* TODO u8 bool */
    u8 pet_enabled {
        comment = "vmangos sets 0 for not enabled and 0x8 for enabled.";
    }
}

cmsg CMSG_GOSSIP_HELLO = 0x017B {
    u64 guid;
}


smsg SMSG_GOSSIP_COMPLETE = 0x017E {}

cmsg CMSG_NPC_TEXT_QUERY = 0x017F {
    u32 text_id;
    u64 guid;
}


cmsg CMSG_QUESTGIVER_STATUS_QUERY = 0x0182 {
    u64 guid;
}

enum QuestGiverStatus : u8 {
    NONE = 0;
    UNAVAILABLE = 1;
    CHAT = 2;
    INCOMPLETE = 3;
    REWARD_REP = 4;
    AVAILABLE = 5;
    REWARD_OLD = 6 {
        comment = "red dot on minimap";
    }
    REWARD2 = 7 {
        comment = "yellow dot on minimap";
    }
}

smsg SMSG_QUESTGIVER_STATUS = 0x0183 {
    u64 guid;
    (u32)QuestGiverStatus status;
}

cmsg CMSG_QUESTGIVER_HELLO = 0x0184 {
    u64 guid;
}


cmsg CMSG_QUESTGIVER_QUERY_QUEST = 0x0186 {
    u64 guid;
    u32 quest_id;
}

cmsg CMSG_QUESTGIVER_QUEST_AUTOLAUNCH = 0x0187 {}


cmsg CMSG_QUESTGIVER_ACCEPT_QUEST = 0x0189 {
    u64 guid;
    u32 quest_id;
}

cmsg CMSG_QUESTGIVER_COMPLETE_QUEST = 0x018A {
    u64 guid;
    u32 quest_id;
}

cmsg CMSG_QUESTGIVER_REQUEST_REWARD = 0x018C {
    u64 guid;
    u32 quest_id;
}

cmsg CMSG_QUESTGIVER_CHOOSE_REWARD = 0x018E {
    u64 guid;
    u32 quest_id;
    u32 reward;
}

enum QuestFailedReason : u32 {
    DONT_HAVE_REQ = 0 {
        comment = "this is default case";
    }
    QUEST_FAILED_LOW_LEVEL = 1 {
        comment = "You are not high enough level for that quest.";
    }
    QUEST_FAILED_REQS = 2 {
        comment = "You don't meet the requirements for that quest.";
    }
    QUEST_FAILED_INVENTORY_FULL = 4 {
        comment = "Inventory is full. (Also 50. From SMSG_QUESTGIVER_QUEST_FAILED)";
    }
    QUEST_FAILED_WRONG_RACE = 6 {
        comment = "That quest is not available to your race.";
    }
    QUEST_ONLY_ONE_TIMED = 12 {
        comment = "You can only be on one timed quest at a time.";
    }
    QUEST_ALREADY_ON = 13 {
        comment = "You are already on that quest.";
    }
    QUEST_FAILED_DUPLICATE_ITEM = 17 {
        comment = "Duplicate item found. (From SMSG_QUESTGIVER_QUEST_FAILED)";
    }
    QUEST_FAILED_MISSING_ITEMS = 20 {
        comment = "You don't have the required items with you. Check storage.";
    }
    QUEST_FAILED_NOT_ENOUGH_MONEY = 22 {
        comment = "You don't have enough money for that quest.";
    }
}

smsg SMSG_QUESTGIVER_QUEST_INVALID = 0x018F {
    QuestFailedReason msg;
}

cmsg CMSG_QUESTGIVER_CANCEL = 0x0190 {}



smsg SMSG_QUESTGIVER_QUEST_FAILED = 0x0192 {
    u32 quest_id;
    QuestFailedReason reason;
}

cmsg CMSG_QUESTLOG_SWAP_QUEST = 0x0193 {
    u8 slot1;
    u8 slot2;
}

cmsg CMSG_QUESTLOG_REMOVE_QUEST = 0x0194 {
    u8 slot;
}

smsg SMSG_QUESTLOG_FULL = 0x0195 {}

smsg SMSG_QUESTUPDATE_FAILED = 0x0196 {
    u32 quest_id;
}

smsg SMSG_QUESTUPDATE_FAILEDTIMER = 0x0197 {
    u32 quest_id;
}

smsg SMSG_QUESTUPDATE_COMPLETE = 0x0198 {
    u32 quest_id;
}

smsg SMSG_QUESTUPDATE_ADD_KILL = 0x0199 {
    u32 quest_id;
    u32 create_id {
        comment = "Unsure of name";
    }
    u32 kill_count;
    u32 required_kill_count;
    u64 guid;
}

smsg SMSG_QUESTUPDATE_ADD_ITEM = 0x019A {
    u32 required_item_id;
    u32 items_required {
        minimum_valid_value = "0";
        maximum_valid_value = "63";
    }
}

cmsg CMSG_QUEST_CONFIRM_ACCEPT = 0x019B {
    u32 quest_id;
}

smsg SMSG_QUEST_CONFIRM_ACCEPT = 0x019C {
    u32 quest_id;
    CString quest_title;
    u64 guid;
}

cmsg CMSG_PUSHQUESTTOPARTY = 0x019D {
    u32 quest_id;
}

cmsg CMSG_LIST_INVENTORY = 0x019E {
    u64 guid;
}

cmsg CMSG_SELL_ITEM = 0x01A0 {
    u64 vendor_guid;
    u64 item_guid;
    u8 amount;
}


cmsg CMSG_BUY_ITEM = 0x01A2 {
    u64 vendor_guid;
    u32 item_id;
    u8 amount;
    u8 unknown1 {
        comment = "cmangos says this is hardcoded to 1 in the TBC client.";
    }
}

cmsg CMSG_BUY_ITEM_IN_SLOT = 0x01A3 {
    u64 vendor_guid;
    u32 item_id;
    u64 bag_guid;
    u8 bag_slot;
    u8 amount;
}

smsg SMSG_BUY_ITEM = 0x01A4 {
    u64 guid;
    u32 vendor_slot;
    u32 amount_for_sale;
    u32 amount_bought;
}


enum BuyResult : u8 {
    CANT_FIND_ITEM = 0;
    ITEM_ALREADY_SOLD = 1;
    NOT_ENOUGHT_MONEY = 2;
    SELLER_DONT_LIKE_YOU = 4;
    DISTANCE_TOO_FAR = 5;
    ITEM_SOLD_OUT = 7;
    CANT_CARRY_MORE = 8;
    RANK_REQUIRE = 11;
    REPUTATION_REQUIRE = 12;
}

smsg SMSG_BUY_FAILED = 0x01A5 {
    u64 guid;
    u32 item_id;
    BuyResult result;
}


cmsg CMSG_TAXIQUERYAVAILABLENODES = 0x01AC {
    u64 guid;
}

cmsg CMSG_ACTIVATETAXI = 0x01AD {
    u64 guid;
    u32[2] nodes;
}

enum ActivateTaxiReply : u32 {
    OK = 0;
    UNSPECIFIEDSERVERERROR = 1;
    NOSUCHPATH = 2;
    NOTENOUGHMONEY = 3;
    TOOFARAWAY = 4;
    NOVENDORNEARBY = 5;
    NOTVISITED = 6;
    PLAYERBUSY = 7;
    PLAYERALREADYMOUNTED = 8;
    PLAYERSHAPESHIFTED = 9;
    PLAYERMOVING = 10;
    SAMENODE = 11;
    NOTSTANDING = 12;
}

smsg SMSG_ACTIVATETAXIREPLY = 0x01AE {
    ActivateTaxiReply reply;
}

smsg SMSG_NEW_TAXI_PATH = 0x01AF {}

cmsg CMSG_TRAINER_LIST = 0x01B0 {
    u64 guid;
}


cmsg CMSG_TRAINER_BUY_SPELL = 0x01B2 {
    u64 guid;
    u32 spell_id;
}

smsg SMSG_TRAINER_BUY_SUCCEEDED = 0x01B3 {
    u64 guid;
    u32 spell_id;
}

enum TrainingFailureReason : u32
{
    UNAVAILABLE = 0 {
        comment = "Trainer service %d unavailable.";
    }
    NOT_ENOUGH_MONEY = 1 {
        comment = "Not enough money for trainer service %d.";
    }
    NOT_ENOUGH_SKILL = 2 {
        comment = "Not enough skill points for trainer service %d.";
    }
} {
    comment = "These errors are only printed in client console.";
}

smsg SMSG_TRAINER_BUY_FAILED = 0x01B4 {
    u64 guid;
    u32 spell_id;
    TrainingFailureReason error;
}

cmsg CMSG_BINDER_ACTIVATE = 0x01B5 {
    u64 guid;
}

cmsg CMSG_BANKER_ACTIVATE = 0x01B7 {
    u64 guid;
}

smsg SMSG_SHOW_BANK = 0x01B8 {
    u64 guid;
}

cmsg CMSG_BUY_BANK_SLOT = 0x01B9 {
    u64 guid;
}

enum BuyBankSlotResult : u32 {
    FAILED_TOO_MANY = 0;
    INSUFFICIENT_FUNDS = 1;
    NOTBANKER = 2;
    OK = 3;
}

smsg SMSG_BUY_BANK_SLOT_RESULT = 0x01BA {
    BuyBankSlotResult result;
}

cmsg CMSG_PETITION_SHOWLIST = 0x01BB {
    u64 guid;
}


cmsg CMSG_PETITION_SHOW_SIGNATURES = 0x01BE {
    u64 item_guid;
}

smsg SMSG_PETITION_SHOW_SIGNATURES = 0x01BF {
    u64 item_guid;
    u64 owner_guid;
    u64 petition_guid;
    u8 amount_of_signatures;
}

cmsg CMSG_PETITION_SIGN = 0x01C0 {
    u64 petition_guid;
    u8 unknown1;
}

enum PetitionResult : u32 {
    OK = 0;
    ALREADY_SIGNED = 1;
    ALREADY_IN_GUILD = 2;
    CANT_SIGN_OWN = 3;
    NEED_MORE = 4;
    NOT_SERVER = 5;
}

smsg SMSG_PETITION_SIGN_RESULTS = 0x01C1 {
    u64 petition_guid;
    u64 owner_guid;
    PetitionResult result;
}

cmsg CMSG_OFFER_PETITION = 0x01C3 {
    u64 petition_guid;
    u64 target_guid;
}

cmsg CMSG_TURN_IN_PETITION = 0x01C4 {
    u64 petition_guid;
}

enum PetitionTurnInResult : u32 {
    OK = 0;
    ALREADY_SIGNED = 1;
    ALREADY_IN_GUILD = 2;
    CANT_SIGN_OWN = 3;
    NEED_MORE = 4;
    NOT_SERVER = 5;
}

smsg SMSG_TURN_IN_PETITION_RESULTS = 0x01C5 {
    PetitionTurnInResult result;
}

cmsg CMSG_PETITION_QUERY = 0x01C6 {
    u32 guild_guid;
    u64 petition_guid;
}

smsg SMSG_FISH_NOT_HOOKED = 0x01C8 {}

smsg SMSG_FISH_ESCAPED = 0x01C9 {}


smsg SMSG_NOTIFICATION = 0x01CB {
    CString notification;
}

cmsg CMSG_PLAYED_TIME = 0x01CC {}

smsg SMSG_PLAYED_TIME = 0x01CD {
    /* TODO: What unit is this? */
    u32 total_played_time;
    u32 level_played_time;
}

cmsg CMSG_QUERY_TIME = 0x01CE {}

smsg SMSG_QUERY_TIME_RESPONSE = 0x01CF {
    /* TODO: What unit is this? */
    u32 time;
}

enum ExperienceAwardType : u8 {
    KILL = 0;
    NON_KILL = 1;
}

smsg SMSG_LOG_XPGAIN = 0x01D0 {
    u64 target_guid;
    u32 total_exp;
    ExperienceAwardType exp_type; 
    if (exp_type == NON_KILL) {
        u32 experience_without_rested;
        f32 exp_group_bonus {
            comment = "mangoszero sets to 1 and comments: 1 - none 0 - 100% group bonus output";
        }
    }
}


cmsg CMSG_RECLAIM_CORPSE = 0x01D2 {
    u64 guid;
}

cmsg CMSG_WRAP_ITEM = 0x01D3 {
    u8 gift_bag_index;
    u8 gift_slot;
    u8 item_bag_index;
    u8 item_slot;
}


enum TimerType : u32 {
    FATIGUE = 0;
    BREATH = 1;
    FEIGNDEATH = 2;
    ENVIRONMENTAL = 3 {
        comment = "Might be a mangos only thing.";
    }
}

smsg SMSG_START_MIRROR_TIMER = 0x01D9 {
    TimerType timer;
    u32 time_remaining;
    u32 duration;
    u32 scale;
    /* TODO: bool */
    u8 is_frozen;
    u32 spell_id;
}

smsg SMSG_PAUSE_MIRROR_TIMER = 0x01DA {
    TimerType timer;
    u8 is_frozen;
} {
    comment = "According to cmangos: 'Default UI handler for this is bugged, args dont match. Gotta do a full update with SMSG_START_MIRROR_TIMER to avoid lua errors.";
}

smsg SMSG_STOP_MIRROR_TIMER = 0x01DB {
    TimerType timer;
}

smsg SMSG_CLEAR_COOLDOWN = 0x01DE {
    u32 spell_id;
    u64 target_guid;
}

smsg SMSG_GAMEOBJECT_PAGETEXT = 0x01DF {
    u64 guid;
}

enum SheathState : u8 {
    UNARMED = 0;
    MELEE = 1;
    RANGED = 2;
} {
    comment = "According to cmangos: byte value (UNIT_FIELD_BYTES_2,0)";
}

cmsg CMSG_SETSHEATHED = 0x01E0 {
    (u32)SheathState sheathed;
}

smsg SMSG_SPELL_DELAYED = 0x01E2 {
    u64 guid;
    u32 delay_time;
}

smsg SMSG_ITEM_TIME_UPDATE = 0x01EA {
    u64 guid;
    u32 duration;
}

smsg SMSG_ITEM_ENCHANT_TIME_UPDATE = 0x01EB {
    u64 item_guid;
    u32 slot {
        comment = "Possibly used with EnchantmentSlot enum.";
    }
    u32 duration;
    u64 player_guid;
}

cmsg CMSG_PET_CAST_SPELL = 0x01F0 {
    u64 guid;
    u32 spell_id;
}


smsg SMSG_PLAY_SPELL_VISUAL = 0x01F3 {
    u64 guid;
    u32 spell_art_kit {
        comment = "mangoszero: index from SpellVisualKit.dbc. Used with 0xB3 when buying spells.";
    }
}

cmsg CMSG_ZONEUPDATE = 0x01F4 {
    /* TODO: Zone or Area? */
    u32 zone_id;
}

smsg SMSG_PARTYKILLLOG = 0x01F5 {
    u64 player_with_killing_blow;
    u64 victim;
}


smsg SMSG_PLAY_SPELL_IMPACT = 0x01F7 {
    u64 guid;
    u32 spell_visual_kit {
        comment = "mangoszero: index from SpellVisualKit.dbc. Used for visual effect on player with 0x016A";
    }
}

smsg SMSG_EXPLORATION_EXPERIENCE = 0x01F8 {
    Area area;
    u32 experience;
}

enum EnvironmentalDamageType : u32 {
    EXHAUSTED = 0;
    DROWNING = 1;
    FALL = 2;
    LAVA = 3;
    SLIME = 4;
    FIRE = 5;
}

smsg SMSG_ENVIRONMENTALDAMAGELOG = 0x01FC {
    u64 guid;
    EnvironmentalDamageType damage_type;
    u32 damage;
    u32 absorb;
    u32 resist;
}


cmsg CMSG_UNLEARN_SKILL = 0x0202 {
    /* TODO: Same as spell_id? */
    u32 skill_id;
}

smsg SMSG_REMOVED_SPELL = 0x0203 {
    /* TODO: cmangos + vmangos cast this to u16, but reserve 4 bytes */
    u16 spell_id;
}


enum GmTicketResponse : u32 {
    NOT_EXIST = 0;
    ALREADY_EXIST = 1;
    CREATE_SUCCESS = 2;
    CREATE_ERROR = 3;
    UPDATE_SUCCESS = 4;
    UPDATE_ERROR = 5;
    TICKET_DELETED = 9;
}

smsg SMSG_GMTICKET_CREATE = 0x0206 {
    GmTicketResponse response;
}

cmsg CMSG_GMTICKET_UPDATETEXT = 0x0207 {
    CString message;
}

smsg SMSG_GMTICKET_UPDATETEXT = 0x0208 {
    GmTicketResponse response;
}

smsg SMSG_ACCOUNT_DATA_TIMES = 0x0209 {
    u32[32] data {
        comment = "cmangos/vmangos/mangoszero sets to all zeros";
    }
}


cmsg CMSG_GMTICKET_GETTICKET = 0x0211 {}

smsg SMSG_GAMEOBJECT_SPAWN_ANIM = 0x0214 {
    u64 guid;
}

smsg SMSG_GAMEOBJECT_DESPAWN_ANIM = 0x0215 {
    u64 guid;
}


cmsg CMSG_GMTICKET_DELETETICKET = 0x0217 {}

smsg SMSG_GMTICKET_DELETETICKET = 0x0218 {
    GmTicketResponse response;
}

smsg SMSG_CHAT_WRONG_FACTION = 0x0219 {}

cmsg CMSG_GMTICKET_SYSTEMSTATUS = 0x021A {}

smsg SMSG_GMTICKET_SYSTEMSTATUS = 0x021B {
    u32 will_accept_tickets {
        comment = "mangoszero/cmangos/vmangos all only send 1 for true and 0 for false. vmangos: Note: This only disables the ticket UI at client side and is not fully reliable are we sure this is a uint32? Should ask Zor";
    }
}

cmsg CMSG_SPIRIT_HEALER_ACTIVATE = 0x021C {
    u64 guid;
}

smsg SMSG_SET_REST_START = 0x021E {
    u32 unknown1 {
        comment = "cmangos/mangoszero: unknown, may be rest state time or experience";
    }
}

smsg SMSG_SPIRIT_HEALER_CONFIRM = 0x0222 {
    u64 guid;
}

smsg SMSG_GOSSIP_POI = 0x0224 {
    u32 flags;
    f32 position_x;
    f32 position_y;
    u32 icon;
    u32 data;
    CString location_name;
}

cmsg CMSG_CHAT_IGNORED = 0x0225 {
    u64 guid;
}

cmsg CMSG_GUILD_RANK = 0x0231 {
    u32 rank_id;
    u32 rights;
    CString rank_name;
}

cmsg CMSG_GUILD_ADD_RANK = 0x0232 {
    CString rank_name;
}

cmsg CMSG_GUILD_DEL_RANK = 0x0233 {}

cmsg CMSG_GUILD_SET_PUBLIC_NOTE = 0x0234 {
    CString player_name;
    CString note;
}

cmsg CMSG_GUILD_SET_OFFICER_NOTE = 0x0235 {
    CString player_name;
    CString note;
}


enum MailAction : u32 {
    SEND = 0;
    MONEY_TAKEN = 1;
    ITEM_TAKEN = 2;
    RETURNED_TO_SENDER = 3;
    DELETED = 4;
    MADE_PERMANENT = 5;
}

enum MailResult : u32 {
    OK = 0;
    ERR_EQUIP_ERROR = 1;
    ERR_CANNOT_SEND_TO_SELF = 2;
    ERR_NOT_ENOUGH_MONEY = 3;
    ERR_RECIPIENT_NOT_FOUND = 4;
    ERR_NOT_YOUR_TEAM = 5;
    ERR_INTERNAL_ERROR = 6;
    ERR_DISABLED_FOR_TRIAL_ACC = 14;
    ERR_RECIPIENT_CAP_REACHED = 15;
    ERR_CANT_SEND_WRAPPED_COD = 16;
    ERR_MAIL_AND_CHAT_SUSPENDED = 17;
    ERR_TOO_MANY_ATTACHMENTS = 18;
    ERR_MAIL_ATTACHMENT_INVALID = 19;
} {
    comment = "mangoszero: in SMSG_SEND_MAIL_RESULT, 7-13 and 16+: 'Mail database error'";
}

cmsg CMSG_GET_MAIL_LIST = 0x023A {
    u64 mailbox_guid;
}


cmsg CMSG_BATTLEFIELD_LIST = 0x023C {
    Map map;
}

cmsg CMSG_BATTLEFIELD_JOIN = 0x023E {
    Map map;
}

cmsg CMSG_ITEM_TEXT_QUERY = 0x0243 {
    u32 item_text_id;
    u32 mail_id {
        comment = "vmangos/cmangos/mangoszero: this value can be item id in bag, but it is also mail id";
    }
    u32 unknown1 {
        comment = "vmangos/cmangos/mangoszero: maybe something like state - 0x70000000";
    }
}

smsg SMSG_ITEM_TEXT_QUERY_RESPONSE = 0x0244 {
    u32 item_text_id;
    CString text {
        comment = "mangoszero: CString TODO: max length 8000";
    }
}

cmsg CMSG_MAIL_TAKE_MONEY = 0x0245 {
    u64 mailbox_guid;
    u32 mail_id;
}

cmsg CMSG_MAIL_TAKE_ITEM = 0x0246 {
    u64 mailbox_guid;
    u32 mail_id;
}

cmsg CMSG_MAIL_MARK_AS_READ = 0x0247 {
    u64 mailbox_guid;
    u32 mail_id;
}

cmsg CMSG_MAIL_RETURN_TO_SENDER = 0x0248 {
    u64 mailbox_id;
    u32 mail_id;
}

cmsg CMSG_MAIL_DELETE = 0x0249 {
    u64 mailbox_id;
    u32 mail_id;
}

cmsg CMSG_MAIL_CREATE_TEXT_ITEM = 0x024A {
    u64 mailbox_guid;
    u32 mail_id;
    u32 mail_template_id {
        comment = "mangoszero/cmangos/vmangos: mailTemplateId, non need, Mail store own 100% correct value anyway";
    }
}





