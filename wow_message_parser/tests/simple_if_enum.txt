use std::convert::{TryFrom, TryInto};
use crate::world::vanilla::SimpleEnum;
use std::io::{Write, Read};

#[derive(Debug, PartialEq, Clone, Default)]
#[derive(Copy)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:85`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L85):
/// ```text
/// struct SimpleIfEnum {
///     SimpleEnum enum;
///     if (enum == ZERO) {
///         u8 basic;
///     }
/// }
/// ```
pub struct SimpleIfEnum {
    pub enum: SimpleIfEnum_SimpleEnum,
}

impl SimpleIfEnum {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // enum: SimpleEnum
        w.write_all(&(self.enum.as_int() as u8).to_le_bytes())?;

        match &self.enum {
            SimpleIfEnum_SimpleEnum::Zero {
                basic,
            } => {
                // basic: u8
                w.write_all(&basic.to_le_bytes())?;

            }
            SimpleIfEnum_SimpleEnum::One => {}
            SimpleIfEnum_SimpleEnum::Two => {}
        }

        Ok(())
    }
}

impl SimpleIfEnum {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // enum: SimpleEnum
        let enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::Zero => {
                // basic: u8
                let basic = crate::util::read_u8_le(r)?;

                SimpleIfEnum_SimpleEnum::Zero {
                    basic,
                }
            }
            SimpleEnum::One => SimpleIfEnum_SimpleEnum::One,
            SimpleEnum::Two => SimpleIfEnum_SimpleEnum::Two,
        };

        Ok(Self {
            enum: enum_if,
        })
    }

}

impl SimpleIfEnum {
    pub(crate) fn size(&self) -> usize {
        self.enum.size() // enum: SimpleIfEnum_SimpleEnum
    }
}

#[derive(Debug, PartialEq, Clone)]
#[derive(Copy)]
pub enum SimpleIfEnum_SimpleEnum {
    Zero {
        basic: u8,
    },
    One,
    Two,
}

impl Default for SimpleIfEnum_SimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::Zero {
            basic: Default::default(),
        }
    }
}

impl SimpleIfEnum_SimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero { .. } => 0,
            Self::One => 1,
            Self::Two => 2,
        }
    }

}

impl SimpleIfEnum_SimpleEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Zero {
                basic,
            } => {
                1
                + 1 // basic: u8
            }
            Self::One => {
                1
            }
            Self::Two => {
                1
            }
        }
    }
}

