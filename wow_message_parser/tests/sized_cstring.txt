use std::convert::{TryFrom, TryInto};
use std::io::{Write, Read};

#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:366`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L366):
/// ```text
/// struct SizedCString {
///     SizedCString s;
/// }
/// ```
pub struct SizedCString {
    pub s: String,
}

impl SizedCString {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // s: SizedCString
        w.write_all(&((self.s.len() + 1) as u32).to_le_bytes())?;
        w.write_all(self.s.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        Ok(())
    }
}

impl SizedCString {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // s: SizedCString
        let s = crate::util::read_u32_le(r)?;
        let s = crate::util::read_sized_c_string_to_vec(r, s)?;
        let s = String::from_utf8(s)?;;
        Ok(Self {
            s,
        })
    }

}

impl SizedCString {
    pub(crate) fn size(&self) -> usize {
        self.s.len() + 5 // s: SizedCString
    }
}

