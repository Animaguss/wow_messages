use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleEnum, SimpleEnumError};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};

#[derive(Debug, PartialEq, Clone, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:93`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L93):
/// ```text
/// struct DoubleVariantEnum {
///     SimpleEnum enum;
///     if (enum == ZERO
///         || enum == ONE) {
///         u8 basic;
///     }
/// }
/// ```
pub struct DoubleVariantEnum {
    pub enum: DoubleVariantEnumSimpleEnum,
}

impl ReadableAndWritable for DoubleVariantEnum {
    type Error = DoubleVariantEnumError;

    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // enum: SimpleEnum
        let enum = SimpleEnum::read(r)?;

        let enum_if = match enum {
            SimpleEnum::ZERO => {
                // basic: u8
                let basic = crate::util::read_u8_le(r)?;

                DoubleVariantEnumSimpleEnum::ZERO {
                    basic,
                }
            }
            SimpleEnum::ONE => {
                // basic: u8
                let basic = crate::util::read_u8_le(r)?;

                DoubleVariantEnumSimpleEnum::ONE {
                    basic,
                }
            }
            SimpleEnum::TWO => DoubleVariantEnumSimpleEnum::TWO,
        };

        Ok(Self {
            enum: enum_if,
        })
    }

    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // enum: SimpleEnum
        self.enum.write(w)?;

        match &self.enum {
            DoubleVariantEnumSimpleEnum::ZERO {
                basic,
            } => {
                // basic: u8
                w.write_all(&basic.to_le_bytes())?;

            }
            DoubleVariantEnumSimpleEnum::ONE {
                basic,
            } => {
                // basic: u8
                w.write_all(&basic.to_le_bytes())?;

            }
            DoubleVariantEnumSimpleEnum::TWO => {}
        }

        Ok(())
    }

}

impl VariableSized for DoubleVariantEnum {
    fn size(&self) -> usize {
        self.enum.size() // enum: SimpleEnum and subfields
    }
}

impl MaximumPossibleSized for DoubleVariantEnum {
    fn maximum_possible_size() -> usize {
        SimpleEnum::maximum_possible_size() // enum: SimpleEnum
    }
}

#[derive(Debug)]
pub enum DoubleVariantEnumError {
    Io(std::io::Error),
    SimpleEnum(SimpleEnumError),
}

impl std::error::Error for DoubleVariantEnumError {}
impl std::fmt::Display for DoubleVariantEnumError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::SimpleEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for DoubleVariantEnumError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<SimpleEnumError> for DoubleVariantEnumError {
    fn from(e: SimpleEnumError) -> Self {
        Self::SimpleEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum DoubleVariantEnumSimpleEnum {
    ZERO {
        basic: u8,
    },
    ONE {
        basic: u8,
    },
    TWO,
}

impl From<&SimpleEnum> for DoubleVariantEnumSimpleEnum {
    fn from(e: &SimpleEnum) -> Self {
        match &e {
            SimpleEnum::ZERO => Self::ZERO {
                basic: Default::default(),
            },
            SimpleEnum::ONE => Self::ONE {
                basic: Default::default(),
            },
            SimpleEnum::TWO => Self::TWO,
        }
    }
}

impl From<&DoubleVariantEnumSimpleEnum> for SimpleEnum {
    fn from(v: &DoubleVariantEnumSimpleEnum) -> Self {
        match &v {
            DoubleVariantEnumSimpleEnum::ZERO { .. } => Self::ZERO,
            DoubleVariantEnumSimpleEnum::ONE { .. } => Self::ONE,
            DoubleVariantEnumSimpleEnum::TWO => Self::TWO,
        }
    }
}

impl Default for DoubleVariantEnumSimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            basic: Default::default(),
        }
    }
}

impl DoubleVariantEnumSimpleEnum {
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write(w)?;
        Ok(())
    }

    pub fn write_u16_le<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write_u16_le(w)
    }

    pub fn write_u16_be<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write_u16_be(w)
    }

    pub fn write_u32_le<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write_u32_le(w)
    }

    pub fn write_u32_be<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write_u32_be(w)
    }

    pub fn write_u64_le<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write_u64_le(w)
    }

    pub fn write_u64_be<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleEnum = self.into();
        a.write_u64_be(w)
    }

}

impl VariableSized for DoubleVariantEnumSimpleEnum {
    fn size(&self) -> usize {
        match self {
            Self::ZERO  {
                basic,
            } => {
                1
                + 1 // basic: u8
            }
            Self::ONE  {
                basic,
            } => {
                1
                + 1 // basic: u8
            }
            Self::TWO =>  {
                1
            }
        }
    }
}

impl MaximumPossibleSized for DoubleVariantEnumSimpleEnum {
    fn maximum_possible_size() -> usize {
        65536 // maximum possible u16 size. TODO value.
    }
}

