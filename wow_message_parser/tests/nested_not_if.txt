use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{NestedEnum, NestedEnumError};
use crate::world::v1::v12::{TEnum, TEnumError};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct NestedNotIf {
    pub t: NestedNotIfTEnum,
}

impl NestedNotIf {
    #[cfg(feature = "sync")]
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, NestedNotIfError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => NestedNotIfTEnum::ZERO,
            TEnum::ONE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::ONE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::TWO => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::TWO {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::THREE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::THREE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FOUR => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FOUR {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FIVE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FIVE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::SIX => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::SIX {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::REST => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::REST {
                    e: e_if,
                    not_zero,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "sync")]
    pub(crate) fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes())?;

        match &self.t {
            NestedNotIfTEnum::ZERO => {}
            NestedNotIfTEnum::ONE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::TWO {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::THREE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FOUR {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FIVE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::SIX {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::REST {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub(crate) async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, NestedNotIfError> {
        // t: TEnum
        let t: TEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => NestedNotIfTEnum::ZERO,
            TEnum::ONE => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::ONE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::TWO => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::TWO {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::THREE => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::THREE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FOUR => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FOUR {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FIVE => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FIVE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::SIX => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::SIX {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::REST => {
                // not_zero: u8
                let not_zero = crate::util::tokio_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::tokio_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::REST {
                    e: e_if,
                    not_zero,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "async_tokio")]
    pub(crate) async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes()).await?;

        match &self.t {
            NestedNotIfTEnum::ZERO => {}
            NestedNotIfTEnum::ONE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::TWO {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::THREE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FOUR {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FIVE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::SIX {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::REST {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
        }

        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub(crate) async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, NestedNotIfError> {
        // t: TEnum
        let t: TEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => NestedNotIfTEnum::ZERO,
            TEnum::ONE => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::ONE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::TWO => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::TWO {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::THREE => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::THREE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FOUR => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FOUR {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FIVE => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FIVE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::SIX => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::SIX {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::REST => {
                // not_zero: u8
                let not_zero = crate::util::astd_read_u8_le(r).await?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::astd_read_u8_le(r).await?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::REST {
                    e: e_if,
                    not_zero,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "async_std")]
    pub(crate) async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes()).await?;

        match &self.t {
            NestedNotIfTEnum::ZERO => {}
            NestedNotIfTEnum::ONE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::TWO {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::THREE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FOUR {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FIVE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::SIX {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::REST {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes()).await?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes()).await?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes()).await?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
        }

        Ok(())
    }

}

impl NestedNotIf {
    pub fn size(&self) -> usize {
        0
        + self.t.size() // t: NestedNotIfTEnum
    }
}

#[derive(Debug)]
pub enum NestedNotIfError {
    Io(std::io::Error),
    NestedEnum(NestedEnumError),
    TEnum(TEnumError),
}

impl std::error::Error for NestedNotIfError {}
impl std::fmt::Display for NestedNotIfError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::NestedEnum(i) => i.fmt(f),
            Self::TEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for NestedNotIfError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<NestedEnumError> for NestedNotIfError {
    fn from(e: NestedEnumError) -> Self {
        Self::NestedEnum(e)
    }
}

impl From<TEnumError> for NestedNotIfError {
    fn from(e: TEnumError) -> Self {
        Self::TEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum NestedNotIfNestedEnum {
    NESTED {
        one: u8,
    },
    NOT_NESTED,
}

impl Default for NestedNotIfNestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            one: Default::default(),
        }
    }
}

impl NestedNotIfNestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::NESTED { .. } => 0,
            Self::NOT_NESTED => 1,
        }
    }

}

impl NestedNotIfNestedEnum {
    pub fn size(&self) -> usize {
        match self {
            Self::NESTED {
                one,
            } => {
                1
                + 1 // one: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum NestedNotIfTEnum {
    ZERO,
    ONE {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    TWO {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    THREE {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    FOUR {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    FIVE {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    SIX {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    REST {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
}

impl Default for NestedNotIfTEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO
    }
}

impl NestedNotIfTEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO => 0,
            Self::ONE { .. } => 1,
            Self::TWO { .. } => 2,
            Self::THREE { .. } => 3,
            Self::FOUR { .. } => 4,
            Self::FIVE { .. } => 5,
            Self::SIX { .. } => 6,
            Self::REST { .. } => 7,
        }
    }

}

impl NestedNotIfTEnum {
    pub fn size(&self) -> usize {
        match self {
            Self::ZERO => {
                1
            }
            Self::ONE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::TWO {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::THREE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::FOUR {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::FIVE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::SIX {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::REST {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
        }
    }
}

