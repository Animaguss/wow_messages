use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{NestedEnum, NestedEnumError};
use crate::world::v1::v12::{TEnum, TEnumError};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct NestedNotIf {
    pub t: NestedNotIfTEnum,
}

impl ReadableAndWritable for NestedNotIf {
    type Error = NestedNotIfError;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // t: TEnum
        let t = TEnum::read(r)?;

        let t_if = match t {
            TEnum::ZERO => NestedNotIfTEnum::ZERO,
            TEnum::ONE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::ONE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::TWO => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::TWO {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::THREE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::THREE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FOUR => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FOUR {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FIVE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::FIVE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::SIX => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::SIX {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::REST => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e = NestedEnum::read(r)?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIfNestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                };

                NestedNotIfTEnum::REST {
                    e: e_if,
                    not_zero,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // t: TEnum
        self.t.write(w)?;

        match &self.t {
            NestedNotIfTEnum::ZERO => {}
            NestedNotIfTEnum::ONE {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::TWO {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::THREE {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FOUR {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::FIVE {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::SIX {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIfTEnum::REST {
                not_zero,
                e,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                e.write(w)?;

                match &e {
                    NestedNotIfNestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIfNestedEnum::NOT_NESTED => {}
                }

            }
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            let t = TEnum::tokio_read(r).await?;

            let t_if = match t {
                TEnum::ZERO => NestedNotIfTEnum::ZERO,
                TEnum::ONE => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::ONE {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::TWO => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::TWO {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::THREE => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::THREE {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::FOUR => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::FOUR {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::FIVE => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::FIVE {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::SIX => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::SIX {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::REST => {
                    // not_zero: u8
                    let not_zero = crate::util::tokio_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::tokio_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::tokio_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::REST {
                        e: e_if,
                        not_zero,
                    }
                }
            };

            Ok(Self {
                t: t_if,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            self.t.tokio_write(w).await?;

            match &self.t {
                NestedNotIfTEnum::ZERO => {}
                NestedNotIfTEnum::ONE {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::TWO {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::THREE {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::FOUR {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::FIVE {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::SIX {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::REST {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.tokio_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
            }

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            let t = TEnum::astd_read(r).await?;

            let t_if = match t {
                TEnum::ZERO => NestedNotIfTEnum::ZERO,
                TEnum::ONE => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::ONE {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::TWO => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::TWO {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::THREE => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::THREE {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::FOUR => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::FOUR {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::FIVE => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::FIVE {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::SIX => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::SIX {
                        e: e_if,
                        not_zero,
                    }
                }
                TEnum::REST => {
                    // not_zero: u8
                    let not_zero = crate::util::astd_read_u8_le(r).await?;

                    // e: NestedEnum
                    let e = NestedEnum::astd_read(r).await?;

                    let e_if = match e {
                        NestedEnum::NESTED => {
                            // one: u8
                            let one = crate::util::astd_read_u8_le(r).await?;

                            NestedNotIfNestedEnum::NESTED {
                                one,
                            }
                        }
                        NestedEnum::NOT_NESTED => NestedNotIfNestedEnum::NOT_NESTED,
                    };

                    NestedNotIfTEnum::REST {
                        e: e_if,
                        not_zero,
                    }
                }
            };

            Ok(Self {
                t: t_if,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            self.t.astd_write(w).await?;

            match &self.t {
                NestedNotIfTEnum::ZERO => {}
                NestedNotIfTEnum::ONE {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::TWO {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::THREE {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::FOUR {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::FIVE {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::SIX {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
                NestedNotIfTEnum::REST {
                    not_zero,
                    e,
                } => {
                    // not_zero: u8
                    w.write_all(&not_zero.to_le_bytes()).await?;

                    // e: NestedEnum
                    e.astd_write(w).await?;

                    match &e {
                        NestedNotIfNestedEnum::NESTED {
                            one,
                        } => {
                            // one: u8
                            w.write_all(&one.to_le_bytes()).await?;

                        }
                        NestedNotIfNestedEnum::NOT_NESTED => {}
                    }

                }
            }

            Ok(())
        })
    }

}

impl VariableSized for NestedNotIf {
    fn size(&self) -> usize {
        0
        + self.t.size() // t: NestedNotIfTEnum
    }
}

impl MaximumPossibleSized for NestedNotIf {
    fn maximum_possible_size() -> usize {
        0
        + 4 // t: NestedNotIfTEnum
    }
}

#[derive(Debug)]
pub enum NestedNotIfError {
    Io(std::io::Error),
    NestedEnum(NestedEnumError),
    TEnum(TEnumError),
}

impl std::error::Error for NestedNotIfError {}
impl std::fmt::Display for NestedNotIfError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::NestedEnum(i) => i.fmt(f),
            Self::TEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for NestedNotIfError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<NestedEnumError> for NestedNotIfError {
    fn from(e: NestedEnumError) -> Self {
        Self::NestedEnum(e)
    }
}

impl From<TEnumError> for NestedNotIfError {
    fn from(e: TEnumError) -> Self {
        Self::TEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum NestedNotIfNestedEnum {
    NESTED {
        one: u8,
    },
    NOT_NESTED,
}

impl From<&NestedEnum> for NestedNotIfNestedEnum {
    fn from(e: &NestedEnum) -> Self {
        match &e {
            NestedEnum::NESTED => Self::NESTED {
                one: Default::default(),
            },
            NestedEnum::NOT_NESTED => Self::NOT_NESTED,
        }
    }
}

impl From<&NestedNotIfNestedEnum> for NestedEnum {
    fn from(v: &NestedNotIfNestedEnum) -> Self {
        match &v {
            NestedNotIfNestedEnum::NESTED { .. } => Self::NESTED,
            NestedNotIfNestedEnum::NOT_NESTED => Self::NOT_NESTED,
        }
    }
}

impl Default for NestedNotIfNestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            one: Default::default(),
        }
    }
}

impl NestedNotIfNestedEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: NestedEnum = self.into();
        a.write(w)?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: NestedEnum = self.into();
        a.tokio_write(w).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: NestedEnum = self.into();
        a.astd_write(w).await?;
        Ok(())
    }

    pub(crate) fn as_int(&self) -> u8 {
        let a: NestedEnum = self.into();
        a.as_int() as u8
    }

}

impl VariableSized for NestedNotIfNestedEnum {
    fn size(&self) -> usize {
        match self {
            Self::NESTED {
                one,
            } => {
                1
                + 1 // one: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

impl MaximumPossibleSized for NestedNotIfNestedEnum {
    fn maximum_possible_size() -> usize {
        1
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum NestedNotIfTEnum {
    ZERO,
    ONE {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    TWO {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    THREE {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    FOUR {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    FIVE {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    SIX {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
    REST {
        e: NestedNotIfNestedEnum,
        not_zero: u8,
    },
}

impl From<&TEnum> for NestedNotIfTEnum {
    fn from(e: &TEnum) -> Self {
        match &e {
            TEnum::ZERO => Self::ZERO,
            TEnum::ONE => Self::ONE {
                e: Default::default(),
                not_zero: Default::default(),
            },
            TEnum::TWO => Self::TWO {
                e: Default::default(),
                not_zero: Default::default(),
            },
            TEnum::THREE => Self::THREE {
                e: Default::default(),
                not_zero: Default::default(),
            },
            TEnum::FOUR => Self::FOUR {
                e: Default::default(),
                not_zero: Default::default(),
            },
            TEnum::FIVE => Self::FIVE {
                e: Default::default(),
                not_zero: Default::default(),
            },
            TEnum::SIX => Self::SIX {
                e: Default::default(),
                not_zero: Default::default(),
            },
            TEnum::REST => Self::REST {
                e: Default::default(),
                not_zero: Default::default(),
            },
        }
    }
}

impl From<&NestedNotIfTEnum> for TEnum {
    fn from(v: &NestedNotIfTEnum) -> Self {
        match &v {
            NestedNotIfTEnum::ZERO => Self::ZERO,
            NestedNotIfTEnum::ONE { .. } => Self::ONE,
            NestedNotIfTEnum::TWO { .. } => Self::TWO,
            NestedNotIfTEnum::THREE { .. } => Self::THREE,
            NestedNotIfTEnum::FOUR { .. } => Self::FOUR,
            NestedNotIfTEnum::FIVE { .. } => Self::FIVE,
            NestedNotIfTEnum::SIX { .. } => Self::SIX,
            NestedNotIfTEnum::REST { .. } => Self::REST,
        }
    }
}

impl Default for NestedNotIfTEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO
    }
}

impl NestedNotIfTEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: TEnum = self.into();
        a.write(w)?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: TEnum = self.into();
        a.tokio_write(w).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: TEnum = self.into();
        a.astd_write(w).await?;
        Ok(())
    }

    pub(crate) fn as_int(&self) -> u8 {
        let a: TEnum = self.into();
        a.as_int() as u8
    }

}

impl VariableSized for NestedNotIfTEnum {
    fn size(&self) -> usize {
        match self {
            Self::ZERO => {
                1
            }
            Self::ONE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::TWO {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::THREE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::FOUR {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::FIVE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::SIX {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
            Self::REST {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIfNestedEnum
                + 1 // not_zero: u8
            }
        }
    }
}

impl MaximumPossibleSized for NestedNotIfTEnum {
    fn maximum_possible_size() -> usize {
        4
    }
}

