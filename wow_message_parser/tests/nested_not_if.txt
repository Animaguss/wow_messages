use std::convert::{TryFrom, TryInto};
use crate::world::version_1_12::NestedEnum;
use crate::world::version_1_12::TEnum;
use std::io::{Write, Read};

#[derive(Debug, PartialEq, Clone, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:258`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L258):
/// ```text
/// struct NestedNotIf {
///     TEnum t;
///     if (t != ZERO) {
///         u8 not_zero;
///         NestedEnum e;
///         if (e == NESTED) {
///             u8 one;
///         }
///     }
/// }
/// ```
pub struct NestedNotIf {
    pub t: NestedNotIf_TEnum,
}

impl NestedNotIf {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes())?;

        match &self.t {
            NestedNotIf_TEnum::ZERO => {}
            NestedNotIf_TEnum::ONE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIf_TEnum::TWO {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIf_TEnum::THREE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIf_TEnum::FOUR {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIf_TEnum::FIVE {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIf_TEnum::SIX {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
            NestedNotIf_TEnum::REST {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&(e.as_int() as u8).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::NESTED {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NOT_NESTED => {}
                }

            }
        }

        Ok(())
    }
}

impl NestedNotIf {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => NestedNotIf_TEnum::ZERO,
            TEnum::ONE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::ONE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::TWO => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::TWO {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::THREE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::THREE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FOUR => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::FOUR {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::FIVE => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::FIVE {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::SIX => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::SIX {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::REST => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::NESTED => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::NESTED {
                            one,
                        }
                    }
                    NestedEnum::NOT_NESTED => NestedNotIf_NestedEnum::NOT_NESTED,
                };

                NestedNotIf_TEnum::REST {
                    e: e_if,
                    not_zero,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

}

impl NestedNotIf {
    pub(crate) fn size(&self) -> usize {
        self.t.size() // t: NestedNotIf_TEnum
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum NestedNotIf_NestedEnum {
    NESTED {
        one: u8,
    },
    NOT_NESTED,
}

impl Default for NestedNotIf_NestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            one: Default::default(),
        }
    }
}

impl NestedNotIf_NestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::NESTED { .. } => 0,
            Self::NOT_NESTED => 1,
        }
    }

}

impl NestedNotIf_NestedEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::NESTED {
                one,
            } => {
                1
                + 1 // one: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum NestedNotIf_TEnum {
    ZERO,
    ONE {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    TWO {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    THREE {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    FOUR {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    FIVE {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    SIX {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    REST {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
}

impl Default for NestedNotIf_TEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO
    }
}

impl NestedNotIf_TEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO => 0,
            Self::ONE { .. } => 1,
            Self::TWO { .. } => 2,
            Self::THREE { .. } => 3,
            Self::FOUR { .. } => 4,
            Self::FIVE { .. } => 5,
            Self::SIX { .. } => 6,
            Self::REST { .. } => 7,
        }
    }

}

impl NestedNotIf_TEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::ZERO => {
                1
            }
            Self::ONE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::TWO {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::THREE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::FOUR {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::FIVE {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::SIX {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::REST {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
        }
    }
}

