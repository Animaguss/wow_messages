use crate::vanilla::NestedEnum;
use crate::vanilla::TEnum;
use std::io::{Write, Read};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:258`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L258):
/// ```text
/// struct NestedNotIf {
///     TEnum t;
///     if (t != ZERO) {
///         u8 not_zero;
///         NestedEnum e;
///         if (e == NESTED) {
///             u8 one;
///         }
///     }
/// }
/// ```
pub struct NestedNotIf {
    pub t: NestedNotIf_TEnum,
}

impl NestedNotIf {
    pub(crate) fn write_into_vec(&self, w: &mut impl std::io::Write) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&u8::from(self.t.as_int()).to_le_bytes())?;

        match &self.t {
            NestedNotIf_TEnum::Zero => {}
            NestedNotIf_TEnum::One {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
            NestedNotIf_TEnum::Two {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
            NestedNotIf_TEnum::Three {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
            NestedNotIf_TEnum::Four {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
            NestedNotIf_TEnum::Five {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
            NestedNotIf_TEnum::Six {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
            NestedNotIf_TEnum::Rest {
                e,
                not_zero,
            } => {
                // not_zero: u8
                w.write_all(&not_zero.to_le_bytes())?;

                // e: NestedEnum
                w.write_all(&u8::from(e.as_int()).to_le_bytes())?;

                match &e {
                    NestedNotIf_NestedEnum::Nested {
                        one,
                    } => {
                        // one: u8
                        w.write_all(&one.to_le_bytes())?;

                    }
                    NestedNotIf_NestedEnum::NotNested => {}
                }

            }
        }

        Ok(())
    }
}

impl NestedNotIf {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::Zero => NestedNotIf_TEnum::Zero,
            TEnum::One => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::One {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::Two => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::Two {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::Three => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::Three {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::Four => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::Four {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::Five => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::Five {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::Six => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::Six {
                    e: e_if,
                    not_zero,
                }
            }
            TEnum::Rest => {
                // not_zero: u8
                let not_zero = crate::util::read_u8_le(r)?;

                // e: NestedEnum
                let e: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

                let e_if = match e {
                    NestedEnum::Nested => {
                        // one: u8
                        let one = crate::util::read_u8_le(r)?;

                        NestedNotIf_NestedEnum::Nested {
                            one,
                        }
                    }
                    NestedEnum::NotNested => NestedNotIf_NestedEnum::NotNested,
                };

                NestedNotIf_TEnum::Rest {
                    e: e_if,
                    not_zero,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

}

impl NestedNotIf {
    pub(crate) fn size(&self) -> usize {
        self.t.size() // t: NestedNotIf_TEnum
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum NestedNotIf_NestedEnum {
    Nested {
        one: u8,
    },
    NotNested,
}

impl Default for NestedNotIf_NestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NotNested
    }
}

impl NestedNotIf_NestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Nested { .. } => 0,
            Self::NotNested => 1,
        }
    }

}

impl NestedNotIf_NestedEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Nested {
                one,
            } => {
                1
                + 1 // one: u8
            }
            Self::NotNested => {
                1
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum NestedNotIf_TEnum {
    Zero,
    One {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    Two {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    Three {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    Four {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    Five {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    Six {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
    Rest {
        e: NestedNotIf_NestedEnum,
        not_zero: u8,
    },
}

impl Default for NestedNotIf_TEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::Zero
    }
}

impl NestedNotIf_TEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero => 0,
            Self::One { .. } => 1,
            Self::Two { .. } => 2,
            Self::Three { .. } => 3,
            Self::Four { .. } => 4,
            Self::Five { .. } => 5,
            Self::Six { .. } => 6,
            Self::Rest { .. } => 7,
        }
    }

}

impl NestedNotIf_TEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Zero => {
                1
            }
            Self::One {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::Two {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::Three {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::Four {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::Five {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::Six {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
            Self::Rest {
                e,
                not_zero,
            } => {
                1
                + e.size() // e: NestedNotIf_NestedEnum
                + 1 // not_zero: u8
            }
        }
    }
}

