use std::convert::{TryFrom, TryInto};
use crate::world::version_1_12::SimpleFlag;
use crate::world::version_1_12::UpdateFlag;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct FlagIfElseIf {
    pub flags: FlagIfElseIf_UpdateFlag,
}

impl FlagIfElseIf {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // flags: UpdateFlag
        w.write_all(&(self.flags.as_int() as u8).to_le_bytes())?;

        if let Some(if_statement) = &self.flags.one_if {
            match if_statement {
                FlagIfElseIf_UpdateFlag_ONE_IF::ONE_IF {
                    b_if,
                } => {
                    // b_if: u8
                    w.write_all(&b_if.to_le_bytes())?;

                }
                FlagIfElseIf_UpdateFlag_ONE_IF::TWO_ELSEIF {
                    s,
                } => {
                    // s: SimpleFlag
                    w.write_all(&(s.as_int() as u8).to_le_bytes())?;

                    if let Some(if_statement) = &s.one {
                        // if_one: u8
                        w.write_all(&if_statement.if_one.to_le_bytes())?;

                    }

                }
                FlagIfElseIf_UpdateFlag_ONE_IF::FOUR_ELSEIF {
                    elseif2,
                } => {
                    // elseif2: u8
                    w.write_all(&elseif2.to_le_bytes())?;

                }
            }
        }

        if let Some(if_statement) = &self.flags.eight_if {
            // last_if: u8
            w.write_all(&if_statement.last_if.to_le_bytes())?;

        }

        Ok(())
    }
}

impl FlagIfElseIf {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // flags: UpdateFlag
        let flags = UpdateFlag::new(crate::util::read_u8_le(r)?);

        let flags_ONE_IF = if flags.is_ONE_IF() {
            // b_if: u8
            let b_if = crate::util::read_u8_le(r)?;

            Some(FlagIfElseIf_UpdateFlag_ONE_IF::ONE_IF {
                b_if,
            })
        }
        else if flags.is_TWO_ELSEIF() {
            // s: SimpleFlag
            let s = SimpleFlag::new(crate::util::read_u8_le(r)?);

            let s_ONE = if s.is_ONE() {
                // if_one: u8
                let if_one = crate::util::read_u8_le(r)?;

                Some(FlagIfElseIf_SimpleFlag_ONE {
                    if_one,
                })
            }
            else {
                None
            };

            let s = FlagIfElseIf_SimpleFlag {
                inner: s.as_int(),
                one: s_ONE,
            };

            Some(FlagIfElseIf_UpdateFlag_ONE_IF::TWO_ELSEIF {
                s,
            })
        }
        else if flags.is_FOUR_ELSEIF() {
            // elseif2: u8
            let elseif2 = crate::util::read_u8_le(r)?;

            Some(FlagIfElseIf_UpdateFlag_ONE_IF::FOUR_ELSEIF {
                elseif2,
            })
        }
        else {
            None
        };

        let flags_EIGHT_IF = if flags.is_EIGHT_IF() {
            // last_if: u8
            let last_if = crate::util::read_u8_le(r)?;

            Some(FlagIfElseIf_UpdateFlag_EIGHT_IF {
                last_if,
            })
        }
        else {
            None
        };

        let flags = FlagIfElseIf_UpdateFlag {
            inner: flags.as_int(),
            one_if: flags_ONE_IF,
            eight_if: flags_EIGHT_IF,
        };

        Ok(Self {
            flags,
        })
    }

}

impl FlagIfElseIf {
    pub(crate) fn size(&self) -> usize {
        self.flags.size() // flags: FlagIfElseIf_UpdateFlag
    }
}

#[derive(Default, Debug, PartialEq, Clone)]
pub struct FlagIfElseIf_SimpleFlag {
    inner: u8,
    one: Option<FlagIfElseIf_SimpleFlag_ONE>,
}

impl FlagIfElseIf_SimpleFlag {
    pub const fn empty() -> Self {
        Self {
            inner: 0,
            one: None,
        }
    }

    pub const fn is_empty(&self) -> bool {
        self.inner == 0
        && self.one.is_none()
    }

    pub const fn new_ONE(one: FlagIfElseIf_SimpleFlag_ONE) -> Self {
        Self {
            inner: SimpleFlag::ONE,
            one: Some(one),
        }
    }

    pub fn set_ONE(&mut self, one: FlagIfElseIf_SimpleFlag_ONE) -> Self {
        self.inner |= SimpleFlag::ONE;
        self.one = Some(one);
        self.clone()
    }

    pub const fn get_ONE(&self) -> Option<&FlagIfElseIf_SimpleFlag_ONE> {
        self.one.as_ref()
    }

    pub fn clear_ONE(mut self) -> Self {
        self.inner &= SimpleFlag::ONE.reverse_bits();
        self.one = None;
        self
    }

    pub const fn new_TWO() -> Self {
        Self {
            inner: SimpleFlag::TWO,
            one: None,
        }
    }

    pub fn set_TWO(&mut self) -> Self {
        self.inner |= SimpleFlag::TWO;
        self.clone()
    }

    pub const fn get_TWO(&self) -> bool {
        (self.inner & SimpleFlag::TWO) != 0
    }

    pub fn clear_TWO(mut self) -> Self {
        self.inner &= SimpleFlag::TWO.reverse_bits();
        self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}
impl FlagIfElseIf_SimpleFlag {
    pub(crate) fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.one {
                s.size()
            } else {
                0
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub struct FlagIfElseIf_SimpleFlag_ONE {
    pub if_one: u8,
}

impl FlagIfElseIf_SimpleFlag_ONE {
    pub(crate) fn size(&self) -> usize {
        1 // if_one: u8
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum FlagIfElseIf_UpdateFlag_ONE_IF {
    ONE_IF {
        b_if: u8,
    },
    TWO_ELSEIF {
        s: FlagIfElseIf_SimpleFlag,
    },
    FOUR_ELSEIF {
        elseif2: u8,
    },
}

impl FlagIfElseIf_UpdateFlag_ONE_IF {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ONE_IF { .. } => 1,
            Self::TWO_ELSEIF { .. } => 2,
            Self::FOUR_ELSEIF { .. } => 4,
        }
    }

}

impl FlagIfElseIf_UpdateFlag_ONE_IF {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::ONE_IF {
                b_if,
            } => {
                // Not an actual enum sent over the wire
                1 // b_if: u8
            }
            Self::TWO_ELSEIF {
                s,
            } => {
                // Not an actual enum sent over the wire
                s.size() // s: FlagIfElseIf_SimpleFlag
            }
            Self::FOUR_ELSEIF {
                elseif2,
            } => {
                // Not an actual enum sent over the wire
                1 // elseif2: u8
            }
        }
    }
}

#[derive(Default, Debug, PartialEq, Clone)]
pub struct FlagIfElseIf_UpdateFlag {
    inner: u8,
    one_if: Option<FlagIfElseIf_UpdateFlag_ONE_IF>,
    eight_if: Option<FlagIfElseIf_UpdateFlag_EIGHT_IF>,
}

impl FlagIfElseIf_UpdateFlag {
    pub const fn empty() -> Self {
        Self {
            inner: 0,
            one_if: None,
            eight_if: None,
        }
    }

    pub const fn is_empty(&self) -> bool {
        self.inner == 0
        && self.one_if.is_none()
        && self.eight_if.is_none()
    }

    pub const fn new_ONE_IF(one_if: FlagIfElseIf_UpdateFlag_ONE_IF) -> Self {
        Self {
            inner: one_if.as_int(),
            one_if: Some(one_if),
            eight_if: None,
        }
    }

    pub fn set_ONE_IF(&mut self, one_if: FlagIfElseIf_UpdateFlag_ONE_IF) -> Self {
        self.inner |= one_if.as_int();
        self.one_if = Some(one_if);
        self.clone()
    }

    pub const fn get_ONE_IF(&self) -> Option<&FlagIfElseIf_UpdateFlag_ONE_IF> {
        self.one_if.as_ref()
    }

    pub fn clear_ONE_IF(mut self) -> Self {
        self.inner &= UpdateFlag::ONE_IF.reverse_bits();
        self.one_if = None;
        self
    }

    pub const fn new_EIGHT_IF(eight_if: FlagIfElseIf_UpdateFlag_EIGHT_IF) -> Self {
        Self {
            inner: UpdateFlag::EIGHT_IF,
            one_if: None,
            eight_if: Some(eight_if),
        }
    }

    pub fn set_EIGHT_IF(&mut self, eight_if: FlagIfElseIf_UpdateFlag_EIGHT_IF) -> Self {
        self.inner |= UpdateFlag::EIGHT_IF;
        self.eight_if = Some(eight_if);
        self.clone()
    }

    pub const fn get_EIGHT_IF(&self) -> Option<&FlagIfElseIf_UpdateFlag_EIGHT_IF> {
        self.eight_if.as_ref()
    }

    pub fn clear_EIGHT_IF(mut self) -> Self {
        self.inner &= UpdateFlag::EIGHT_IF.reverse_bits();
        self.eight_if = None;
        self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}
impl FlagIfElseIf_UpdateFlag {
    pub(crate) fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.one_if {
                s.size()
            } else {
                0
            }
        }
        + {
            if let Some(s) = &self.eight_if {
                s.size()
            } else {
                0
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub struct FlagIfElseIf_UpdateFlag_EIGHT_IF {
    pub last_if: u8,
}

impl FlagIfElseIf_UpdateFlag_EIGHT_IF {
    pub(crate) fn size(&self) -> usize {
        1 // last_if: u8
    }
}

