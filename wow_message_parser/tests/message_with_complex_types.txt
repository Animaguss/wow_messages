use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::SimpleEnum;
use crate::world::v1::v12::SimpleFlag;
use crate::world::v1::v12::StructWithAllBuiltInTypes;
use crate::{ClientMessage, ServerMessage};
use wow_srp::header_crypto::Encrypter;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct MessageWithComplexTypes {
    pub simple_enum: SimpleEnum,
    pub simple_flag: SimpleFlag,
    pub simple_struct: StructWithAllBuiltInTypes,
}

impl ClientMessage for MessageWithComplexTypes {
    fn as_bytes(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // simple_enum: SimpleEnum
        w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes())?;

        // simple_flag: SimpleFlag
        w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes())?;

        // simple_struct: StructWithAllBuiltInTypes
        &self.simple_struct.as_bytes(w)?;;

        Ok(())
    }
    const OPCODE: u16 = 0x0003;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        self.size() as u16
    }

    type Error = crate::errors::ParseError;

    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, Self::Error> {
        // simple_enum: SimpleEnum
        let simple_enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        // simple_flag: SimpleFlag
        let simple_flag = SimpleFlag::new(crate::util::read_u8_le(r)?);

        // simple_struct: StructWithAllBuiltInTypes
        let simple_struct = StructWithAllBuiltInTypes::read(r)?;

        Ok(Self {
            simple_enum,
            simple_flag,
            simple_struct,
        })
    }

}

impl ServerMessage for MessageWithComplexTypes {
    fn as_bytes(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // simple_enum: SimpleEnum
        w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes())?;

        // simple_flag: SimpleFlag
        w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes())?;

        // simple_struct: StructWithAllBuiltInTypes
        &self.simple_struct.as_bytes(w)?;;

        Ok(())
    }
    const OPCODE: u16 = 0x0003;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        self.size() as u16
    }

    type Error = crate::errors::ParseError;

    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, Self::Error> {
        // simple_enum: SimpleEnum
        let simple_enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        // simple_flag: SimpleFlag
        let simple_flag = SimpleFlag::new(crate::util::read_u8_le(r)?);

        // simple_struct: StructWithAllBuiltInTypes
        let simple_struct = StructWithAllBuiltInTypes::read(r)?;

        Ok(Self {
            simple_enum,
            simple_flag,
            simple_struct,
        })
    }

}

impl MessageWithComplexTypes {
    pub fn size(&self) -> usize {
        0
        + 1 // simple_enum: SimpleEnum
        + 1 // simple_flag: SimpleFlag
        + self.simple_struct.size() // simple_struct: StructWithAllBuiltInTypes
    }
}

