use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleEnum, SimpleEnumError};
use crate::world::v1::v12::{SimpleFlag};
use crate::world::v1::v12::{StructWithAllBuiltInTypes, StructWithAllBuiltInTypesError};
use crate::helper::{WorldClientMessageWrite, WorldServerMessageWrite, WorldMessageBody};
use wow_srp::header_crypto::Encrypter;
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};

#[derive(Debug, PartialEq, Clone, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:61`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L61):
/// ```text
/// msg MessageWithComplexTypes = 0x3 {
///     SimpleEnum simple_enum;
///     SimpleFlag simple_flag;
///     StructWithAllBuiltInTypes simple_struct;
/// }
/// ```
pub struct MessageWithComplexTypes {
    pub simple_enum: SimpleEnum,
    pub simple_flag: SimpleFlag,
    pub simple_struct: StructWithAllBuiltInTypes,
}

impl WorldClientMessageWrite for MessageWithComplexTypes {
    const OPCODE: u32 = 0x03;

    fn write_unencrypted_client<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // size: u16_be, and opcode: u32
        crate::util::write_u16_be(w, (self.size() + 4) as u16)?;
        crate::util::write_u32_le(w, <Self as WorldClientMessageWrite>::OPCODE)?;

        self.write_body(w)?;
        Ok(())
    }

    fn write_encrypted_client<W: std::io::Write, E: Encrypter>(&self, w: &mut W, e: &mut E) -> std::result::Result<(), std::io::Error> {
        // size: u16_be, and opcode: u32
        e.write_encrypted_client_header(w, (self.size() + 4) as u16, <Self as WorldClientMessageWrite>::OPCODE)?;

        self.write_body(w)?;
        Ok(())
    }
}
impl WorldServerMessageWrite for MessageWithComplexTypes {
    const OPCODE: u16 = 0x03;

    fn write_unencrypted_server<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // size: u16_be, and opcode: u16
        crate::util::write_u16_be(w, (self.size() + 2) as u16)?;
        crate::util::write_u16_le(w, <Self as WorldServerMessageWrite>::OPCODE)?;

        self.write_body(w)?;
        Ok(())
    }

    fn write_encrypted_server<W: std::io::Write, E: Encrypter>(&self, w: &mut W, e: &mut E) -> std::result::Result<(), std::io::Error> {
        // size: u16_be, and opcode: u16
        e.write_encrypted_server_header(w, (self.size() + 2) as u16, <Self as WorldServerMessageWrite>::OPCODE)?;

        self.write_body(w)?;
        Ok(())
    }
}
impl WorldMessageBody for MessageWithComplexTypes {
    type Error = MessageWithComplexTypesError;

    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, Self::Error> {
        // simple_enum: SimpleEnum
        let simple_enum = SimpleEnum::read(r)?;

        // simple_flag: SimpleFlag
        let simple_flag = SimpleFlag::read(r)?;

        // simple_struct: StructWithAllBuiltInTypes
        let simple_struct = StructWithAllBuiltInTypes::read(r)?;

        Ok(Self {
            simple_enum,
            simple_flag,
            simple_struct,
        })
    }

    fn write_body<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // simple_enum: SimpleEnum
        self.simple_enum.write(w)?;

        // simple_flag: SimpleFlag
        self.simple_flag.write(w)?;

        // simple_struct: StructWithAllBuiltInTypes
        self.simple_struct.write(w)?;

        Ok(())
    }
}

impl VariableSized for MessageWithComplexTypes {
    fn size(&self) -> usize {
        SimpleEnum::size() // simple_enum: SimpleEnum
        + SimpleFlag::size() // simple_flag: SimpleFlag
        + self.simple_struct.size() // simple_struct: StructWithAllBuiltInTypes
    }
}

impl MaximumPossibleSized for MessageWithComplexTypes {
    fn maximum_possible_size() -> usize {
        SimpleEnum::maximum_possible_size() // simple_enum: SimpleEnum
        + SimpleFlag::maximum_possible_size() // simple_flag: SimpleFlag
        + StructWithAllBuiltInTypes::maximum_possible_size() // simple_struct: StructWithAllBuiltInTypes
    }
}

#[derive(Debug)]
pub enum MessageWithComplexTypesError {
    Io(std::io::Error),
    SimpleEnum(SimpleEnumError),
    StructWithAllBuiltInTypes(StructWithAllBuiltInTypesError),
}

impl std::error::Error for MessageWithComplexTypesError {}
impl std::fmt::Display for MessageWithComplexTypesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::SimpleEnum(i) => i.fmt(f),
            Self::StructWithAllBuiltInTypes(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for MessageWithComplexTypesError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<SimpleEnumError> for MessageWithComplexTypesError {
    fn from(e: SimpleEnumError) -> Self {
        Self::SimpleEnum(e)
    }
}

impl From<StructWithAllBuiltInTypesError> for MessageWithComplexTypesError {
    fn from(e: StructWithAllBuiltInTypesError) -> Self {
        Self::StructWithAllBuiltInTypes(e)
    }
}

