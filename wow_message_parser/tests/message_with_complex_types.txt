use std::convert::{TryFrom, TryInto};
use crate::world::version_1_12::SimpleEnum;
use crate::world::version_1_12::SimpleFlag;
use crate::world::version_1_12::StructWithAllBuiltInTypes;
use crate::{ClientMessage, ServerMessage};
use wow_srp::header_crypto::Encrypter;
use std::io::{Write, Read};

#[derive(Debug, PartialEq, Clone, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:61`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L61):
/// ```text
/// msg MessageWithComplexTypes = 0x0003 {
///     SimpleEnum simple_enum;
///     SimpleFlag simple_flag;
///     StructWithAllBuiltInTypes simple_struct;
/// }
/// ```
pub struct MessageWithComplexTypes {
    pub simple_enum: SimpleEnum,
    pub simple_flag: SimpleFlag,
    pub simple_struct: StructWithAllBuiltInTypes,
}

impl ClientMessage for MessageWithComplexTypes {
    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // simple_enum: SimpleEnum
        w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes())?;

        // simple_flag: SimpleFlag
        w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes())?;

        // simple_struct: StructWithAllBuiltInTypes
        self.simple_struct.write_into_vec(w)?;

        Ok(())
    }
    const OPCODE: u16 = 0x0003;

    fn client_size(&self) -> u16 {
        (self.size() + 6) as u16
    }

    fn read_body(r: &mut &[u8], body_size: u32) -> std::result::Result<Self, crate::errors::ParseError> {
        // simple_enum: SimpleEnum
        let simple_enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        // simple_flag: SimpleFlag
        let simple_flag = SimpleFlag::new(crate::util::read_u8_le(r)?);

        // simple_struct: StructWithAllBuiltInTypes
        let simple_struct = StructWithAllBuiltInTypes::read(r)?;

        Ok(Self {
            simple_enum,
            simple_flag,
            simple_struct,
        })
    }

}

impl ServerMessage for MessageWithComplexTypes {
    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // simple_enum: SimpleEnum
        w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes())?;

        // simple_flag: SimpleFlag
        w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes())?;

        // simple_struct: StructWithAllBuiltInTypes
        self.simple_struct.write_into_vec(w)?;

        Ok(())
    }
    const OPCODE: u16 = 0x0003;

    fn server_size(&self) -> u16 {
        (self.size() + 4) as u16
    }

    fn read_body(r: &mut &[u8], body_size: u32) -> std::result::Result<Self, crate::errors::ParseError> {
        // simple_enum: SimpleEnum
        let simple_enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        // simple_flag: SimpleFlag
        let simple_flag = SimpleFlag::new(crate::util::read_u8_le(r)?);

        // simple_struct: StructWithAllBuiltInTypes
        let simple_struct = StructWithAllBuiltInTypes::read(r)?;

        Ok(Self {
            simple_enum,
            simple_flag,
            simple_struct,
        })
    }

}

impl MessageWithComplexTypes {
    pub(crate) fn size(&self) -> usize {
        1 // simple_enum: SimpleEnum
        + 1 // simple_flag: SimpleFlag
        + self.simple_struct.size() // simple_struct: StructWithAllBuiltInTypes
    }
}

