use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleEnum, SimpleEnumError};
use crate::world::v1::v12::{SimpleFlag};
use crate::world::v1::v12::{StructWithAllBuiltInTypes, StructWithAllBuiltInTypesError};
use crate::{ClientMessageWrite, ServerMessageWrite, MessageBody};
use wow_srp::header_crypto::Encrypter;
use crate::{ConstantSized, MaximumPossibleSized, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct MessageWithComplexTypes {
    pub simple_enum: SimpleEnum,
    pub simple_flag: SimpleFlag,
    pub simple_struct: StructWithAllBuiltInTypes,
}

impl ClientMessageWrite for MessageWithComplexTypes {}

impl ServerMessageWrite for MessageWithComplexTypes {}

impl MessageBody for MessageWithComplexTypes {
    const OPCODE: u16 = 0x0003;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        self.size() as u16
    }

    type Error = MessageWithComplexTypesError;

    #[cfg(feature = "sync")]
    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, Self::Error> {
        // simple_enum: SimpleEnum
        let simple_enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        // simple_flag: SimpleFlag
        let simple_flag = SimpleFlag::new(crate::util::read_u8_le(r)?);

        // simple_struct: StructWithAllBuiltInTypes
        let simple_struct = StructWithAllBuiltInTypes::read(r)?;

        Ok(Self {
            simple_enum,
            simple_flag,
            simple_struct,
        })
    }

    #[cfg(feature = "sync")]
    fn write_body<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // simple_enum: SimpleEnum
        w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes())?;

        // simple_flag: SimpleFlag
        w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes())?;

        // simple_struct: StructWithAllBuiltInTypes
        self.simple_struct.write(w)?;

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read_body<'life0, 'async_trait, R>(
        r: &'life0 mut R,
        body_size: u32,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // simple_enum: SimpleEnum
            let simple_enum: SimpleEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

            // simple_flag: SimpleFlag
            let simple_flag = SimpleFlag::new(crate::util::tokio_read_u8_le(r).await?);

            // simple_struct: StructWithAllBuiltInTypes
            let simple_struct = StructWithAllBuiltInTypes::tokio_read(r).await?;

            Ok(Self {
                simple_enum,
                simple_flag,
                simple_struct,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write_body<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // simple_enum: SimpleEnum
            w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes()).await?;

            // simple_flag: SimpleFlag
            w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes()).await?;

            // simple_struct: StructWithAllBuiltInTypes
            self.simple_struct.tokio_write(w).await?;

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read_body<'life0, 'async_trait, R>(
        r: &'life0 mut R,
        body_size: u32,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // simple_enum: SimpleEnum
            let simple_enum: SimpleEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

            // simple_flag: SimpleFlag
            let simple_flag = SimpleFlag::new(crate::util::astd_read_u8_le(r).await?);

            // simple_struct: StructWithAllBuiltInTypes
            let simple_struct = StructWithAllBuiltInTypes::astd_read(r).await?;

            Ok(Self {
                simple_enum,
                simple_flag,
                simple_struct,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write_body<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // simple_enum: SimpleEnum
            w.write_all(&(self.simple_enum.as_int() as u8).to_le_bytes()).await?;

            // simple_flag: SimpleFlag
            w.write_all(&(self.simple_flag.as_int() as u8).to_le_bytes()).await?;

            // simple_struct: StructWithAllBuiltInTypes
            self.simple_struct.astd_write(w).await?;

            Ok(())
        })
    }

}

impl VariableSized for MessageWithComplexTypes {
    fn size(&self) -> usize {
        0
        + 1 // simple_enum: SimpleEnum
        + 1 // simple_flag: SimpleFlag
        + self.simple_struct.size() // simple_struct: StructWithAllBuiltInTypes
    }
}

impl MaximumPossibleSized for MessageWithComplexTypes {
    fn maximum_possible_size() -> usize {
        0
        + 1 // simple_enum: SimpleEnum
        + 1 // simple_flag: SimpleFlag
        + 565 // simple_struct: StructWithAllBuiltInTypes
    }
}

#[derive(Debug)]
pub enum MessageWithComplexTypesError {
    Io(std::io::Error),
    SimpleEnum(SimpleEnumError),
    StructWithAllBuiltInTypes(StructWithAllBuiltInTypesError),
}

impl std::error::Error for MessageWithComplexTypesError {}
impl std::fmt::Display for MessageWithComplexTypesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::SimpleEnum(i) => i.fmt(f),
            Self::StructWithAllBuiltInTypes(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for MessageWithComplexTypesError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<SimpleEnumError> for MessageWithComplexTypesError {
    fn from(e: SimpleEnumError) -> Self {
        Self::SimpleEnum(e)
    }
}

impl From<StructWithAllBuiltInTypesError> for MessageWithComplexTypesError {
    fn from(e: StructWithAllBuiltInTypesError) -> Self {
        Self::StructWithAllBuiltInTypes(e)
    }
}

