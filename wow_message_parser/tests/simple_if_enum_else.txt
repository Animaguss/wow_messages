use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleEnum, SimpleEnumError};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct SimpleIfEnumElse {
    pub enum: SimpleIfEnumElseSimpleEnum,
}

impl ReadableAndWritable for SimpleIfEnumElse {
    type Error = SimpleIfEnumElseError;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // enum: SimpleEnum
        let enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::ZERO => {
                // basic: u8
                let basic = crate::util::read_u8_le(r)?;

                SimpleIfEnumElseSimpleEnum::ZERO {
                    basic,
                }
            }
            SimpleEnum::ONE => {
                // other: u16
                let other = crate::util::read_u16_le(r)?;

                SimpleIfEnumElseSimpleEnum::ONE {
                    other,
                }
            }
            SimpleEnum::TWO => {
                // other: u16
                let other = crate::util::read_u16_le(r)?;

                SimpleIfEnumElseSimpleEnum::TWO {
                    other,
                }
            }
        };

        Ok(Self {
            enum: enum_if,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // enum: SimpleEnum
        crate::util::write_u8_le(w, self.enum.as_int() as u8)?;

        match &self.enum {
            SimpleIfEnumElseSimpleEnum::ZERO {
                basic,
            } => {
                // basic: u8
                w.write_all(&basic.to_le_bytes())?;

            }
            SimpleIfEnumElseSimpleEnum::ONE {
                other,
            } => {
                // other: u16
                w.write_all(&other.to_le_bytes())?;

            }
            SimpleIfEnumElseSimpleEnum::TWO {
                other,
            } => {
                // other: u16
                w.write_all(&other.to_le_bytes())?;

            }
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // enum: SimpleEnum
            let enum: SimpleEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

            let enum_if = match enum {
                SimpleEnum::ZERO => {
                    // basic: u8
                    let basic = crate::util::tokio_read_u8_le(r).await?;

                    SimpleIfEnumElseSimpleEnum::ZERO {
                        basic,
                    }
                }
                SimpleEnum::ONE => {
                    // other: u16
                    let other = crate::util::tokio_read_u16_le(r).await?;

                    SimpleIfEnumElseSimpleEnum::ONE {
                        other,
                    }
                }
                SimpleEnum::TWO => {
                    // other: u16
                    let other = crate::util::tokio_read_u16_le(r).await?;

                    SimpleIfEnumElseSimpleEnum::TWO {
                        other,
                    }
                }
            };

            Ok(Self {
                enum: enum_if,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // enum: SimpleEnum
            crate::util::tokio_write_u8_le(w, self.enum.as_int() as u8).await?;

            match &self.enum {
                SimpleIfEnumElseSimpleEnum::ZERO {
                    basic,
                } => {
                    // basic: u8
                    w.write_all(&basic.to_le_bytes()).await?;

                }
                SimpleIfEnumElseSimpleEnum::ONE {
                    other,
                } => {
                    // other: u16
                    w.write_all(&other.to_le_bytes()).await?;

                }
                SimpleIfEnumElseSimpleEnum::TWO {
                    other,
                } => {
                    // other: u16
                    w.write_all(&other.to_le_bytes()).await?;

                }
            }

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // enum: SimpleEnum
            let enum: SimpleEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

            let enum_if = match enum {
                SimpleEnum::ZERO => {
                    // basic: u8
                    let basic = crate::util::astd_read_u8_le(r).await?;

                    SimpleIfEnumElseSimpleEnum::ZERO {
                        basic,
                    }
                }
                SimpleEnum::ONE => {
                    // other: u16
                    let other = crate::util::astd_read_u16_le(r).await?;

                    SimpleIfEnumElseSimpleEnum::ONE {
                        other,
                    }
                }
                SimpleEnum::TWO => {
                    // other: u16
                    let other = crate::util::astd_read_u16_le(r).await?;

                    SimpleIfEnumElseSimpleEnum::TWO {
                        other,
                    }
                }
            };

            Ok(Self {
                enum: enum_if,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // enum: SimpleEnum
            crate::util::astd_write_u8_le(w, self.enum.as_int() as u8).await?;

            match &self.enum {
                SimpleIfEnumElseSimpleEnum::ZERO {
                    basic,
                } => {
                    // basic: u8
                    w.write_all(&basic.to_le_bytes()).await?;

                }
                SimpleIfEnumElseSimpleEnum::ONE {
                    other,
                } => {
                    // other: u16
                    w.write_all(&other.to_le_bytes()).await?;

                }
                SimpleIfEnumElseSimpleEnum::TWO {
                    other,
                } => {
                    // other: u16
                    w.write_all(&other.to_le_bytes()).await?;

                }
            }

            Ok(())
        })
    }

}

impl VariableSized for SimpleIfEnumElse {
    fn size(&self) -> usize {
        0
        + self.enum.size() // enum: SimpleIfEnumElseSimpleEnum
    }
}

impl MaximumPossibleSized for SimpleIfEnumElse {
    fn maximum_possible_size() -> usize {
        0
        + 3 // enum: SimpleIfEnumElseSimpleEnum
    }
}

#[derive(Debug)]
pub enum SimpleIfEnumElseError {
    Io(std::io::Error),
    SimpleEnum(SimpleEnumError),
}

impl std::error::Error for SimpleIfEnumElseError {}
impl std::fmt::Display for SimpleIfEnumElseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::SimpleEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for SimpleIfEnumElseError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<SimpleEnumError> for SimpleIfEnumElseError {
    fn from(e: SimpleEnumError) -> Self {
        Self::SimpleEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum SimpleIfEnumElseSimpleEnum {
    ZERO {
        basic: u8,
    },
    ONE {
        other: u16,
    },
    TWO {
        other: u16,
    },
}

impl Default for SimpleIfEnumElseSimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            basic: Default::default(),
        }
    }
}

impl SimpleIfEnumElseSimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO { .. } => 0,
            Self::ONE { .. } => 1,
            Self::TWO { .. } => 2,
        }
    }

}

impl VariableSized for SimpleIfEnumElseSimpleEnum {
    fn size(&self) -> usize {
        match self {
            Self::ZERO {
                basic,
            } => {
                1
                + 1 // basic: u8
            }
            Self::ONE {
                other,
            } => {
                1
                + 2 // other: u16
            }
            Self::TWO {
                other,
            } => {
                1
                + 2 // other: u16
            }
        }
    }
}

impl MaximumPossibleSized for SimpleIfEnumElseSimpleEnum {
    fn maximum_possible_size() -> usize {
        3
    }
}

