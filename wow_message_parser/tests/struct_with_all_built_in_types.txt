use std::convert::{TryFrom, TryInto};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct StructWithAllBuiltInTypes {
    pub basic16: u16,
    pub basic32: u32,
    pub basic64: u64,
    pub basic16_be: u16,
    pub basic32_be: u32,
    pub basic64_be: u64,
    pub decimal32: f32,
    pub decimal32_be: f32,
    pub decimal64: f64,
    pub decimal64_be: f64,
    pub simple_cstring: String,
    pub simple_string: String,
}

impl ReadableAndWritable for StructWithAllBuiltInTypes {
    type Error = StructWithAllBuiltInTypesError;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // basic8: u8
        let basic8 = crate::util::read_u8_le(r)?;

        // basic16: u16
        let basic16 = crate::util::read_u16_le(r)?;

        // basic32: u32
        let basic32 = crate::util::read_u32_le(r)?;

        // basic64: u64
        let basic64 = crate::util::read_u64_le(r)?;

        // basic16_be: u16_be
        let basic16_be = crate::util::read_u16_be(r)?;

        // basic32_be: u32_be
        let basic32_be = crate::util::read_u32_be(r)?;

        // basic64_be: u64_be
        let basic64_be = crate::util::read_u64_be(r)?;

        // decimal32: f32
        let decimal32 = crate::util::read_f32_le(r)?;
        // decimal32_be: f32_be
        let decimal32_be = crate::util::read_f32_be(r)?;
        // decimal64: f64
        let decimal64 = crate::util::read_f64_le(r)?;
        // decimal64_be: f64_be
        let decimal64_be = crate::util::read_f64_be(r)?;
        // simple_cstring: CString
        let simple_cstring = crate::util::read_c_string_to_vec(r)?;
        let simple_cstring = String::from_utf8(simple_cstring)?;

        // simple_string: String[basic8]
        let simple_string = crate::util::read_fixed_string_to_vec(r, basic8 as usize)?;
        let simple_string = String::from_utf8(simple_string)?;

        Ok(Self {
            basic16,
            basic32,
            basic64,
            basic16_be,
            basic32_be,
            basic64_be,
            decimal32,
            decimal32_be,
            decimal64,
            decimal64_be,
            simple_cstring,
            simple_string,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // basic8: u8
        w.write_all(&(self.simple_string.len() as u8).to_le_bytes())?;

        // basic16: u16
        w.write_all(&self.basic16.to_le_bytes())?;

        // basic32: u32
        w.write_all(&self.basic32.to_le_bytes())?;

        // basic64: u64
        w.write_all(&self.basic64.to_le_bytes())?;

        // basic16_be: u16_be
        w.write_all(&self.basic16_be.to_be_bytes())?;

        // basic32_be: u32_be
        w.write_all(&self.basic32_be.to_be_bytes())?;

        // basic64_be: u64_be
        w.write_all(&self.basic64_be.to_be_bytes())?;

        // decimal32: f32
        w.write_all(&self.decimal32.to_le_bytes())?;

        // decimal32_be: f32_be
        w.write_all(&self.decimal32_be.to_be_bytes())?;

        // decimal64: f64
        w.write_all(&self.decimal64.to_le_bytes())?;

        // decimal64_be: f64_be
        w.write_all(&self.decimal64_be.to_be_bytes())?;

        // simple_cstring: CString
        w.write_all(self.simple_cstring.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // simple_string: String[basic8]
        w.write_all(self.simple_string.as_bytes())?;

        Ok(())
    }

    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // basic8: u8
            let basic8 = crate::util::tokio_read_u8_le(r).await?;

            // basic16: u16
            let basic16 = crate::util::tokio_read_u16_le(r).await?;

            // basic32: u32
            let basic32 = crate::util::tokio_read_u32_le(r).await?;

            // basic64: u64
            let basic64 = crate::util::tokio_read_u64_le(r).await?;

            // basic16_be: u16_be
            let basic16_be = crate::util::tokio_read_u16_be(r).await?;

            // basic32_be: u32_be
            let basic32_be = crate::util::tokio_read_u32_be(r).await?;

            // basic64_be: u64_be
            let basic64_be = crate::util::tokio_read_u64_be(r).await?;

            // decimal32: f32
            let decimal32 = crate::util::tokio_read_f32_le(r).await?;
            // decimal32_be: f32_be
            let decimal32_be = crate::util::tokio_read_f32_be(r).await?;
            // decimal64: f64
            let decimal64 = crate::util::tokio_read_f64_le(r).await?;
            // decimal64_be: f64_be
            let decimal64_be = crate::util::tokio_read_f64_be(r).await?;
            // simple_cstring: CString
            let simple_cstring = crate::util::tokio_read_c_string_to_vec(r).await?;
            let simple_cstring = String::from_utf8(simple_cstring)?;

            // simple_string: String[basic8]
            let simple_string = crate::util::tokio_read_fixed_string_to_vec(r, basic8 as usize).await?;
            let simple_string = String::from_utf8(simple_string)?;

            Ok(Self {
                basic16,
                basic32,
                basic64,
                basic16_be,
                basic32_be,
                basic64_be,
                decimal32,
                decimal32_be,
                decimal64,
                decimal64_be,
                simple_cstring,
                simple_string,
            })
        })
    }

    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // basic8: u8
            w.write_all(&(self.simple_string.len() as u8).to_le_bytes()).await?;

            // basic16: u16
            w.write_all(&self.basic16.to_le_bytes()).await?;

            // basic32: u32
            w.write_all(&self.basic32.to_le_bytes()).await?;

            // basic64: u64
            w.write_all(&self.basic64.to_le_bytes()).await?;

            // basic16_be: u16_be
            w.write_all(&self.basic16_be.to_be_bytes()).await?;

            // basic32_be: u32_be
            w.write_all(&self.basic32_be.to_be_bytes()).await?;

            // basic64_be: u64_be
            w.write_all(&self.basic64_be.to_be_bytes()).await?;

            // decimal32: f32
            w.write_all(&self.decimal32.to_le_bytes()).await?;

            // decimal32_be: f32_be
            w.write_all(&self.decimal32_be.to_be_bytes()).await?;

            // decimal64: f64
            w.write_all(&self.decimal64.to_le_bytes()).await?;

            // decimal64_be: f64_be
            w.write_all(&self.decimal64_be.to_be_bytes()).await?;

            // simple_cstring: CString
            w.write_all(self.simple_cstring.as_bytes()).await?;
            // Null terminator
            w.write_all(&[0]).await?;

            // simple_string: String[basic8]
            w.write_all(self.simple_string.as_bytes()).await?;

            Ok(())
        })
    }

    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // basic8: u8
            let basic8 = crate::util::astd_read_u8_le(r).await?;

            // basic16: u16
            let basic16 = crate::util::astd_read_u16_le(r).await?;

            // basic32: u32
            let basic32 = crate::util::astd_read_u32_le(r).await?;

            // basic64: u64
            let basic64 = crate::util::astd_read_u64_le(r).await?;

            // basic16_be: u16_be
            let basic16_be = crate::util::astd_read_u16_be(r).await?;

            // basic32_be: u32_be
            let basic32_be = crate::util::astd_read_u32_be(r).await?;

            // basic64_be: u64_be
            let basic64_be = crate::util::astd_read_u64_be(r).await?;

            // decimal32: f32
            let decimal32 = crate::util::astd_read_f32_le(r).await?;
            // decimal32_be: f32_be
            let decimal32_be = crate::util::astd_read_f32_be(r).await?;
            // decimal64: f64
            let decimal64 = crate::util::astd_read_f64_le(r).await?;
            // decimal64_be: f64_be
            let decimal64_be = crate::util::astd_read_f64_be(r).await?;
            // simple_cstring: CString
            let simple_cstring = crate::util::astd_read_c_string_to_vec(r).await?;
            let simple_cstring = String::from_utf8(simple_cstring)?;

            // simple_string: String[basic8]
            let simple_string = crate::util::astd_read_fixed_string_to_vec(r, basic8 as usize).await?;
            let simple_string = String::from_utf8(simple_string)?;

            Ok(Self {
                basic16,
                basic32,
                basic64,
                basic16_be,
                basic32_be,
                basic64_be,
                decimal32,
                decimal32_be,
                decimal64,
                decimal64_be,
                simple_cstring,
                simple_string,
            })
        })
    }

    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // basic8: u8
            w.write_all(&(self.simple_string.len() as u8).to_le_bytes()).await?;

            // basic16: u16
            w.write_all(&self.basic16.to_le_bytes()).await?;

            // basic32: u32
            w.write_all(&self.basic32.to_le_bytes()).await?;

            // basic64: u64
            w.write_all(&self.basic64.to_le_bytes()).await?;

            // basic16_be: u16_be
            w.write_all(&self.basic16_be.to_be_bytes()).await?;

            // basic32_be: u32_be
            w.write_all(&self.basic32_be.to_be_bytes()).await?;

            // basic64_be: u64_be
            w.write_all(&self.basic64_be.to_be_bytes()).await?;

            // decimal32: f32
            w.write_all(&self.decimal32.to_le_bytes()).await?;

            // decimal32_be: f32_be
            w.write_all(&self.decimal32_be.to_be_bytes()).await?;

            // decimal64: f64
            w.write_all(&self.decimal64.to_le_bytes()).await?;

            // decimal64_be: f64_be
            w.write_all(&self.decimal64_be.to_be_bytes()).await?;

            // simple_cstring: CString
            w.write_all(self.simple_cstring.as_bytes()).await?;
            // Null terminator
            w.write_all(&[0]).await?;

            // simple_string: String[basic8]
            w.write_all(self.simple_string.as_bytes()).await?;

            Ok(())
        })
    }

}

impl VariableSized for StructWithAllBuiltInTypes {
    fn size(&self) -> usize {
        0
        + 1 // basic8: u8
        + 2 // basic16: u16
        + 4 // basic32: u32
        + 8 // basic64: u64
        + 2 // basic16_be: u16_be
        + 4 // basic32_be: u32_be
        + 8 // basic64_be: u64_be
        + 4 // decimal32: f32
        + 4 // decimal32_be: f32_be
        + 8 // decimal64: f64
        + 8 // decimal64_be: f64_be
        + self.simple_cstring.len() + 1 // simple_cstring: CString
        + self.simple_string.len() // simple_string: String
    }
}

impl MaximumPossibleSized for StructWithAllBuiltInTypes {
    fn maximum_possible_size() -> usize {
        0
        + 1 // basic8: u8
        + 2 // basic16: u16
        + 4 // basic32: u32
        + 8 // basic64: u64
        + 2 // basic16_be: u16_be
        + 4 // basic32_be: u32_be
        + 8 // basic64_be: u64_be
        + 4 // decimal32: f32
        + 4 // decimal32_be: f32_be
        + 8 // decimal64: f64
        + 8 // decimal64_be: f64_be
        + 256 // simple_cstring: CString
        + 256 // simple_string: String
    }
}

#[derive(Debug)]
pub enum StructWithAllBuiltInTypesError {
    Io(std::io::Error),
    String(std::string::FromUtf8Error),
}

impl std::error::Error for StructWithAllBuiltInTypesError {}
impl std::fmt::Display for StructWithAllBuiltInTypesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::String(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for StructWithAllBuiltInTypesError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<std::string::FromUtf8Error> for StructWithAllBuiltInTypesError {
    fn from(e: std::string::FromUtf8Error) -> Self {
        Self::String(e)
    }
}

