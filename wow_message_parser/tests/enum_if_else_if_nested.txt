use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{NestedEnum, NestedEnumError};
use crate::world::v1::v12::{SimpleEnum, SimpleEnumError};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct EnumIfElseIfNested {
    pub e: EnumIfElseIfNestedSimpleEnum,
    pub n: EnumIfElseIfNestedNestedEnum,
}

impl ReadableAndWritable for EnumIfElseIfNested {
    type Error = EnumIfElseIfNestedError;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // e: SimpleEnum
        let e = SimpleEnum::read(r)?;

        // n: NestedEnum
        let n = NestedEnum::read(r)?;

        let e_if = match e {
            SimpleEnum::ZERO => {
                // zero: u8
                let zero = crate::util::read_u8_le(r)?;

                EnumIfElseIfNestedSimpleEnum::ZERO {
                    zero,
                }
            }
            SimpleEnum::ONE => EnumIfElseIfNestedSimpleEnum::ONE,
            SimpleEnum::TWO => EnumIfElseIfNestedSimpleEnum::TWO,
        };

        Ok(Self {
            e: e_if,
            n: n_if,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // e: SimpleEnum
        self.e.write(w)?;

        // n: NestedEnum
        self.n.write(w)?;

        match &self.e {
            EnumIfElseIfNestedSimpleEnum::ZERO {
                zero,
            } => {
                // zero: u8
                w.write_all(&zero.to_le_bytes())?;

            }
            EnumIfElseIfNestedSimpleEnum::ONE => {}
            EnumIfElseIfNestedSimpleEnum::TWO => {}
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // e: SimpleEnum
            let e = SimpleEnum::tokio_read(r).await?;

            // n: NestedEnum
            let n = NestedEnum::tokio_read(r).await?;

            let e_if = match e {
                SimpleEnum::ZERO => {
                    // zero: u8
                    let zero = crate::util::tokio_read_u8_le(r).await?;

                    EnumIfElseIfNestedSimpleEnum::ZERO {
                        zero,
                    }
                }
                SimpleEnum::ONE => EnumIfElseIfNestedSimpleEnum::ONE,
                SimpleEnum::TWO => EnumIfElseIfNestedSimpleEnum::TWO,
            };

            Ok(Self {
                e: e_if,
                n: n_if,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // e: SimpleEnum
            self.e.tokio_write(w).await?;

            // n: NestedEnum
            self.n.tokio_write(w).await?;

            match &self.e {
                EnumIfElseIfNestedSimpleEnum::ZERO {
                    zero,
                } => {
                    // zero: u8
                    w.write_all(&zero.to_le_bytes()).await?;

                }
                EnumIfElseIfNestedSimpleEnum::ONE => {}
                EnumIfElseIfNestedSimpleEnum::TWO => {}
            }

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // e: SimpleEnum
            let e = SimpleEnum::astd_read(r).await?;

            // n: NestedEnum
            let n = NestedEnum::astd_read(r).await?;

            let e_if = match e {
                SimpleEnum::ZERO => {
                    // zero: u8
                    let zero = crate::util::astd_read_u8_le(r).await?;

                    EnumIfElseIfNestedSimpleEnum::ZERO {
                        zero,
                    }
                }
                SimpleEnum::ONE => EnumIfElseIfNestedSimpleEnum::ONE,
                SimpleEnum::TWO => EnumIfElseIfNestedSimpleEnum::TWO,
            };

            Ok(Self {
                e: e_if,
                n: n_if,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // e: SimpleEnum
            self.e.astd_write(w).await?;

            // n: NestedEnum
            self.n.astd_write(w).await?;

            match &self.e {
                EnumIfElseIfNestedSimpleEnum::ZERO {
                    zero,
                } => {
                    // zero: u8
                    w.write_all(&zero.to_le_bytes()).await?;

                }
                EnumIfElseIfNestedSimpleEnum::ONE => {}
                EnumIfElseIfNestedSimpleEnum::TWO => {}
            }

            Ok(())
        })
    }

}

impl VariableSized for EnumIfElseIfNested {
    fn size(&self) -> usize {
        0
        + self.e.size() // e: EnumIfElseIfNestedSimpleEnum
        + self.n.size() // n: EnumIfElseIfNestedNestedEnum
    }
}

impl MaximumPossibleSized for EnumIfElseIfNested {
    fn maximum_possible_size() -> usize {
        0
        + 2 // e: EnumIfElseIfNestedSimpleEnum
        + 1 // n: EnumIfElseIfNestedNestedEnum
    }
}

#[derive(Debug)]
pub enum EnumIfElseIfNestedError {
    Io(std::io::Error),
    NestedEnum(NestedEnumError),
    SimpleEnum(SimpleEnumError),
}

impl std::error::Error for EnumIfElseIfNestedError {}
impl std::fmt::Display for EnumIfElseIfNestedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::NestedEnum(i) => i.fmt(f),
            Self::SimpleEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for EnumIfElseIfNestedError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<NestedEnumError> for EnumIfElseIfNestedError {
    fn from(e: NestedEnumError) -> Self {
        Self::NestedEnum(e)
    }
}

impl From<SimpleEnumError> for EnumIfElseIfNestedError {
    fn from(e: SimpleEnumError) -> Self {
        Self::SimpleEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumIfElseIfNestedSimpleEnum {
    ZERO {
        zero: u8,
    },
    ONE,
    TWO,
}

impl Default for EnumIfElseIfNestedSimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            zero: Default::default(),
        }
    }
}

impl EnumIfElseIfNestedSimpleEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes())?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes()).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes()).await?;
        Ok(())
    }

    pub(crate) fn as_int(&self) -> u8 {
        match self {
            Self::ZERO{ .. } => 0,
            Self::ONE => 1,
            Self::TWO => 2,
        }
    }

}

impl VariableSized for EnumIfElseIfNestedSimpleEnum {
    fn size(&self) -> usize {
        match self {
            Self::ZERO {
                zero,
            } => {
                1
                + 1 // zero: u8
            }
            Self::ONE => {
                1
            }
            Self::TWO => {
                1
            }
        }
    }
}

impl MaximumPossibleSized for EnumIfElseIfNestedSimpleEnum {
    fn maximum_possible_size() -> usize {
        2
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumIfElseIfNestedNestedEnum {
    NESTED {
        nested: u8,
    },
    NOT_NESTED,
}

impl Default for EnumIfElseIfNestedNestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            nested: Default::default(),
        }
    }
}

impl EnumIfElseIfNestedNestedEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes())?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes()).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes()).await?;
        Ok(())
    }

    pub(crate) fn as_int(&self) -> u8 {
        match self {
            Self::NESTED{ .. } => 0,
            Self::NOT_NESTED => 1,
        }
    }

}

impl VariableSized for EnumIfElseIfNestedNestedEnum {
    fn size(&self) -> usize {
        match self {
            Self::NESTED {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

impl MaximumPossibleSized for EnumIfElseIfNestedNestedEnum {
    fn maximum_possible_size() -> usize {
        1
    }
}

