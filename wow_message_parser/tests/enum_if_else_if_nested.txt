use std::io::{Read, Write};

use crate::vanilla::{
    NestedEnum, SimpleEnum,
};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:317`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L317):
/// ```text
/// struct EnumIfElseIfNested {
///     SimpleEnum e;
///     NestedEnum n;
///     if (e == ZERO) {
///         u8 zero;
///     }
///     else {
///         if (n == NESTED) {
///             u8 nested;
///         }
///     }
/// }
/// ```
pub struct EnumIfElseIfNested {
    pub e: EnumIfElseIfNested_SimpleEnum,
    pub n: EnumIfElseIfNested_NestedEnum,
}

impl EnumIfElseIfNested {
    pub(crate) fn write_into_vec(&self, mut w: impl std::io::Write) -> Result<(), std::io::Error> {
        // e: SimpleEnum
        w.write_all(&u8::from(self.e.as_int()).to_le_bytes())?;

        // n: NestedEnum
        w.write_all(&u8::from(self.n.as_int()).to_le_bytes())?;

        match &self.e {
            EnumIfElseIfNested_SimpleEnum::Zero {
                zero,
            } => {
                // zero: u8
                w.write_all(&zero.to_le_bytes())?;

            }
            _ => {}
        }

        Ok(())
    }
}

impl EnumIfElseIfNested {
    pub(crate) fn read<R: std::io::Read>(mut r: R) -> std::result::Result<Self, crate::errors::ParseError> {
        // e: SimpleEnum
        let e: SimpleEnum = crate::util::read_u8_le(&mut r)?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::read_u8_le(&mut r)?.try_into()?;

        let e_if = match e {
            SimpleEnum::Zero => {
                // zero: u8
                let zero = crate::util::read_u8_le(&mut r)?;

                EnumIfElseIfNested_SimpleEnum::Zero {
                    zero,
                }
            }
            SimpleEnum::One => EnumIfElseIfNested_SimpleEnum::One,
            SimpleEnum::Two => EnumIfElseIfNested_SimpleEnum::Two,
        };

        Ok(Self {
            e: e_if,
            n: n_if,
        })
    }

}

impl EnumIfElseIfNested {
    pub(crate) fn size(&self) -> usize {
        self.e.size() // e: EnumIfElseIfNested_SimpleEnum
        + self.n.size() // n: EnumIfElseIfNested_NestedEnum
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum EnumIfElseIfNested_SimpleEnum {
    Zero {
        zero: u8,
    },
    One,
    Two,
}

impl Default for EnumIfElseIfNested_SimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::One
    }
}

impl EnumIfElseIfNested_SimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero { .. } => 0,
            Self::One => 1,
            Self::Two => 2,
        }
    }

}

impl EnumIfElseIfNested_SimpleEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Zero {
                zero,
            } => {
                1
                + 1 // zero: u8
            }
            Self::One => {
                1
            }
            Self::Two => {
                1
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum EnumIfElseIfNested_NestedEnum {
    Nested {
        nested: u8,
    },
    NotNested,
}

impl Default for EnumIfElseIfNested_NestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NotNested
    }
}

impl EnumIfElseIfNested_NestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Nested { .. } => 0,
            Self::NotNested => 1,
        }
    }

}

impl EnumIfElseIfNested_NestedEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Nested {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NotNested => {
                1
            }
        }
    }
}

