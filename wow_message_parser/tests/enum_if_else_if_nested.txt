use std::convert::{TryFrom, TryInto};
use crate::world::version_1_12::NestedEnum;
use crate::world::version_1_12::SimpleEnum;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct EnumIfElseIfNested {
    pub e: EnumIfElseIfNestedSimpleEnum,
    pub n: EnumIfElseIfNestedNestedEnum,
}

impl EnumIfElseIfNested {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // e: SimpleEnum
        w.write_all(&(self.e.as_int() as u8).to_le_bytes())?;

        // n: NestedEnum
        w.write_all(&(self.n.as_int() as u8).to_le_bytes())?;

        match &self.e {
            EnumIfElseIfNestedSimpleEnum::ZERO {
                zero,
            } => {
                // zero: u8
                w.write_all(&zero.to_le_bytes())?;

            }
            EnumIfElseIfNestedSimpleEnum::ONE => {}
            EnumIfElseIfNestedSimpleEnum::TWO => {}
        }

        Ok(())
    }
}

impl EnumIfElseIfNested {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // e: SimpleEnum
        let e: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

        let e_if = match e {
            SimpleEnum::ZERO => {
                // zero: u8
                let zero = crate::util::read_u8_le(r)?;

                EnumIfElseIfNestedSimpleEnum::ZERO {
                    zero,
                }
            }
            SimpleEnum::ONE => EnumIfElseIfNestedSimpleEnum::ONE,
            SimpleEnum::TWO => EnumIfElseIfNestedSimpleEnum::TWO,
        };

        Ok(Self {
            e: e_if,
            n: n_if,
        })
    }

}

impl EnumIfElseIfNested {
    pub(crate) fn size(&self) -> usize {
        self.e.size() // e: EnumIfElseIfNestedSimpleEnum
        + self.n.size() // n: EnumIfElseIfNestedNestedEnum
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumIfElseIfNestedSimpleEnum {
    ZERO {
        zero: u8,
    },
    ONE,
    TWO,
}

impl Default for EnumIfElseIfNestedSimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            zero: Default::default(),
        }
    }
}

impl EnumIfElseIfNestedSimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO { .. } => 0,
            Self::ONE => 1,
            Self::TWO => 2,
        }
    }

}

impl EnumIfElseIfNestedSimpleEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::ZERO {
                zero,
            } => {
                1
                + 1 // zero: u8
            }
            Self::ONE => {
                1
            }
            Self::TWO => {
                1
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumIfElseIfNestedNestedEnum {
    NESTED {
        nested: u8,
    },
    NOT_NESTED,
}

impl Default for EnumIfElseIfNestedNestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            nested: Default::default(),
        }
    }
}

impl EnumIfElseIfNestedNestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::NESTED { .. } => 0,
            Self::NOT_NESTED => 1,
        }
    }

}

impl EnumIfElseIfNestedNestedEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::NESTED {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

