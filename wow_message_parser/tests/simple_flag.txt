/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:12`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L12):
/// ```text
/// flag SimpleFlag : u8 {
///     ZERO = 0;
///     ONE = 1;
///     TWO = 2;
/// }
/// ```
#[derive(Debug, PartialEq, Eq, Hash, Ord, PartialOrd, Copy, Clone, Default)]
#[cfg_attr(feature = "serde", derive(serde::Deserialize, serde::Serialize))]
pub struct SimpleFlag {
    inner: u8,
}

impl SimpleFlag {
    pub const fn new(inner: u8) -> Self {
        Self { inner }
    }

    pub const ZERO: u8 = 0x00;
    pub const ONE: u8 = 0x01;
    pub const TWO: u8 = 0x02;

    pub const fn empty() -> Self {
        Self { inner: 0 }
    }

    pub const fn is_empty(&self) -> bool {
        self.inner == 0
    }

    pub const fn all() -> Self {
        Self {
            inner: Self::ZERO
                | Self::ONE
                | Self::TWO
        }
    }

    pub const fn is_ONE(&self) -> bool {
        (self.inner & Self::ONE) != 0
    }

    pub const fn new_ONE() -> Self {
        Self { inner: Self::ONE }
    }

    pub fn set_ONE(&mut self) -> Self {
        self.inner |= Self::ONE;
        *self
    }

    pub fn clear_ONE(&mut self) -> Self {
        self.inner &= Self::ONE.reverse_bits();
        *self
    }

    pub const fn is_TWO(&self) -> bool {
        (self.inner & Self::TWO) != 0
    }

    pub const fn new_TWO() -> Self {
        Self { inner: Self::TWO }
    }

    pub fn set_TWO(&mut self) -> Self {
        self.inner |= Self::TWO;
        *self
    }

    pub fn clear_TWO(&mut self) -> Self {
        self.inner &= Self::TWO.reverse_bits();
        *self
    }

    pub const fn as_int(&self) -> u8 {
        self.inner
    }

}

impl std::fmt::UpperHex for SimpleFlag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        std::fmt::UpperHex::fmt(&self.inner, f)
    }
}

impl std::fmt::LowerHex for SimpleFlag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        std::fmt::LowerHex::fmt(&self.inner, f)
    }
}

impl std::fmt::Octal for SimpleFlag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        std::fmt::Octal::fmt(&self.inner, f)
    }
}

impl std::fmt::Binary for SimpleFlag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        std::fmt::Binary::fmt(&self.inner, f)
    }
}

impl std::ops::BitAnd for SimpleFlag {
    type Output = Self;
    fn bitand(self, rhs: Self) -> Self::Output {
        Self { inner: self.inner.bitand(rhs.inner), }
    }
}

impl std::ops::BitAndAssign for SimpleFlag {
    fn bitand_assign(&mut self, rhs: Self) {
        self.inner.bitand_assign(rhs.inner)
    }
}

impl std::ops::BitOr for SimpleFlag {
    type Output = Self;
    fn bitor(self, rhs: Self) -> Self::Output {
        Self { inner: self.inner.bitor(rhs.inner), }
    }
}

impl std::ops::BitOrAssign for SimpleFlag {
    fn bitor_assign(&mut self, rhs: Self) {
        self.inner.bitor_assign(rhs.inner)
    }
}

impl std::ops::BitXor for SimpleFlag {
    type Output = Self;
    fn bitxor(self, rhs: Self) -> Self::Output {
        Self { inner: self.inner.bitxor(rhs.inner), }
    }
}

impl std::ops::BitXorAssign for SimpleFlag {
    fn bitxor_assign(&mut self, rhs: Self) {
        self.inner.bitxor_assign(rhs.inner)
    }
}

