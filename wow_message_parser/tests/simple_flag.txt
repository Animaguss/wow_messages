use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable};

#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};
#[derive(Debug, PartialEq, Eq, Hash, Copy, Clone, Default)]
pub struct SimpleFlag {
    inner: u8,
}

impl SimpleFlag {
    pub const fn new(inner: u8) -> Self {
        Self { inner }
    }

}

impl SimpleFlag {
    pub const ZERO: u8 = 0x00;
    pub const ONE: u8 = 0x01;
    pub const TWO: u8 = 0x02;

    pub const fn empty() -> Self {
        Self { inner: 0 }
    }

    pub const fn all() -> Self {
        Self {
            inner: Self::ZERO
                | Self::ONE
                | Self::TWO
        }
    }

    pub const fn is_ZERO(&self) -> bool {
        // Underlying value is 0
        self.inner == Self::ZERO
    }

    pub const fn new_ZERO() -> Self {
        Self { inner: Self::ZERO }
    }

    pub fn set_ZERO(&mut self) -> Self {
        self.inner |= Self::ZERO;
        *self
    }

    pub fn clear_ZERO(&mut self) -> Self {
        self.inner &= Self::ZERO.reverse_bits();
        *self
    }

    pub const fn is_ONE(&self) -> bool {
        (self.inner & Self::ONE) != 0
    }

    pub const fn new_ONE() -> Self {
        Self { inner: Self::ONE }
    }

    pub fn set_ONE(&mut self) -> Self {
        self.inner |= Self::ONE;
        *self
    }

    pub fn clear_ONE(&mut self) -> Self {
        self.inner &= Self::ONE.reverse_bits();
        *self
    }

    pub const fn is_TWO(&self) -> bool {
        (self.inner & Self::TWO) != 0
    }

    pub const fn new_TWO() -> Self {
        Self { inner: Self::TWO }
    }

    pub fn set_TWO(&mut self) -> Self {
        self.inner |= Self::TWO;
        *self
    }

    pub fn clear_TWO(&mut self) -> Self {
        self.inner &= Self::TWO.reverse_bits();
        *self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}

impl ConstantSized for SimpleFlag {}

impl MaximumPossibleSized for SimpleFlag {
    fn maximum_possible_size() -> usize {
        1
    }
}

