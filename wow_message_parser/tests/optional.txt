use std::convert::{TryFrom, TryInto};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};

#[derive(Debug, PartialEq, Clone, Default)]
#[derive(Copy)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:217`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm):
/// ```text
/// struct Optional {
///     u8 basic;
/// }
/// ```
pub struct Optional {
    pub basic: u8,
}

impl ReadableAndWritable for Optional {
    type Error = std::io::Error;

    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // basic: u8
        let basic = crate::util::read_u8_le(r)?;

        Ok(Self {
            basic,
        })
    }

    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // basic: u8
        w.write_all(&self.basic.to_le_bytes())?;

        Ok(())
    }

}

impl ConstantSized for Optional {
    fn size() -> usize {
        Self::maximum_possible_size()
    }
}

impl MaximumPossibleSized for Optional {
    fn maximum_possible_size() -> usize {
        1 // basic: u8
    }
}

