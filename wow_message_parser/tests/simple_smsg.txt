use std::convert::{TryFrom, TryInto};
use crate::ServerMessage;
use wow_srp::header_crypto::Encrypter;
use std::io::{Write, Read};

#[derive(Debug, PartialEq, Clone, Default)]
#[derive(Copy)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:46`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L46):
/// ```text
/// smsg SimpleSmsg = 0x0000 {
///     u8 basic;
/// }
/// ```
pub struct SimpleSmsg {
    pub basic: u8,
}

impl ServerMessage for SimpleSmsg {
    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // basic: u8
        w.write_all(&self.basic.to_le_bytes())?;

        Ok(())
    }
    const OPCODE: u16 = 0x0000;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        1
    }

    fn read_body(r: &mut &[u8], body_size: u32) -> std::result::Result<Self, crate::errors::ParseError> {
        if body_size != 1 {
            return Err(crate::errors::ParseError::InvalidSize(body_size as u32));
        }

        // basic: u8
        let basic = crate::util::read_u8_le(r)?;

        Ok(Self {
            basic,
        })
    }

}

