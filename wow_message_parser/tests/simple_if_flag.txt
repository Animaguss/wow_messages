use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleFlag};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(any(feature = "async_tokio", feature = "async_std"))]
use async_trait::async_trait;
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct SimpleIfFlag {
    pub flag: SimpleIfFlagSimpleFlag,
}

#[cfg_attr(any(feature = "async_tokio", feature = "async_std"), async_trait)]
impl ReadableAndWritable for SimpleIfFlag {
    type Error = std::io::Error;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // flag: SimpleFlag
        let flag = SimpleFlag::read(r)?;

        let flag_ZERO = if flag.is_ZERO() {
            // basic: u8
            let basic = crate::util::read_u8_le(r)?;

            Some(SimpleIfFlagSimpleFlagZERO {
                basic,
            })
        } else {
            None
        };

        let flag = SimpleIfFlagSimpleFlag {
            inner: flag.as_u8(),
            zero: flag_ZERO,
        };

        Ok(Self {
            flag,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // flag: SimpleFlag
        self.flag.write(w)?;

        if let Some(s) = &self.flag.zero {
            s.write(w)?;
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // flag: SimpleFlag
        let flag = SimpleFlag::tokio_read(r).await?;

        let flag_ZERO = if flag.is_ZERO() {
            // basic: u8
            let basic = crate::util::tokio_read_u8_le(r).await?;

            Some(SimpleIfFlagSimpleFlagZERO {
                basic,
            })
        } else {
            None
        };

        let flag = SimpleIfFlagSimpleFlag {
            inner: flag.as_u8(),
            zero: flag_ZERO,
        };

        Ok(Self {
            flag,
        })
    }

    #[cfg(feature = "async_tokio")]
    async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // flag: SimpleFlag
        self.flag.tokio_write(w).await?;

        if let Some(s) = &self.flag.zero {
            s.tokio_write(w).await?;
        }

        Ok(())
    }

    #[cfg(feature = "async_std")]
    async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // flag: SimpleFlag
        let flag = SimpleFlag::astd_read(r).await?;

        let flag_ZERO = if flag.is_ZERO() {
            // basic: u8
            let basic = crate::util::astd_read_u8_le(r).await?;

            Some(SimpleIfFlagSimpleFlagZERO {
                basic,
            })
        } else {
            None
        };

        let flag = SimpleIfFlagSimpleFlag {
            inner: flag.as_u8(),
            zero: flag_ZERO,
        };

        Ok(Self {
            flag,
        })
    }

    #[cfg(feature = "async_std")]
    async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // flag: SimpleFlag
        self.flag.astd_write(w).await?;

        if let Some(s) = &self.flag.zero {
            s.astd_write(w).await?;
        }

        Ok(())
    }

}

impl VariableSized for SimpleIfFlag {
    fn size(&self) -> usize {
        self.flag.size() // flag: SimpleFlag and subfields
    }
}

impl MaximumPossibleSized for SimpleIfFlag {
    fn maximum_possible_size() -> usize {
        SimpleFlag::maximum_possible_size() // flag: SimpleFlag
    }
}

#[derive(Default, Debug, PartialEq, Clone)]
pub struct SimpleIfFlagSimpleFlag {
    inner: u8,
    zero: Option<SimpleIfFlagSimpleFlagZERO>,
}

impl From<&SimpleIfFlagSimpleFlag> for SimpleFlag {
    fn from(e: &SimpleIfFlagSimpleFlag) -> Self {
        Self::new(e.inner)
    }
}

impl SimpleIfFlagSimpleFlag {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleFlag = self.into();
        a.write(w)?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleFlag = self.into();
        a.tokio_write(w).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleFlag = self.into();
        a.astd_write(w).await?;
        Ok(())
    }

    pub const fn empty() -> Self {
        Self {
            inner: 0,
            zero: None,
        }
    }

    pub const fn new_ZERO(zero: SimpleIfFlagSimpleFlagZERO) -> Self {
        Self {
            inner: SimpleFlag::ZERO,
            zero: Some(zero),
        }
    }

    pub fn set_ZERO(&mut self, zero: SimpleIfFlagSimpleFlagZERO) -> Self {
        self.inner |= SimpleFlag::ZERO;
        self.zero = Some(zero);
        self.clone()
    }

    pub const fn get_ZERO(&self) -> Option<&SimpleIfFlagSimpleFlagZERO> {
        self.zero.as_ref()
    }

    pub fn clear_ZERO(&mut self) -> Self {
        self.inner &= SimpleFlag::ZERO.reverse_bits();
        self.zero = None;
        // TODO: Cloning like this is not conductive to good performance but it is
        // temporarily necessary due to test syntax
        self.clone()
    }

    pub const fn new_ONE() -> Self {
        Self {
            inner: SimpleFlag::ONE,
            zero: None,
        }
    }

    pub fn set_ONE(&mut self) -> Self {
        self.inner |= SimpleFlag::ONE;
        self.clone()
    }

    pub const fn get_ONE(&self) -> bool {
        (self.inner & SimpleFlag::ONE) != 0
    }

    pub fn clear_ONE(&mut self) -> Self {
        self.inner &= SimpleFlag::ONE.reverse_bits();
        // TODO: Cloning like this is not conductive to good performance but it is
        // temporarily necessary due to test syntax
        self.clone()
    }

    pub const fn new_TWO() -> Self {
        Self {
            inner: SimpleFlag::TWO,
            zero: None,
        }
    }

    pub fn set_TWO(&mut self) -> Self {
        self.inner |= SimpleFlag::TWO;
        self.clone()
    }

    pub const fn get_TWO(&self) -> bool {
        (self.inner & SimpleFlag::TWO) != 0
    }

    pub fn clear_TWO(&mut self) -> Self {
        self.inner &= SimpleFlag::TWO.reverse_bits();
        // TODO: Cloning like this is not conductive to good performance but it is
        // temporarily necessary due to test syntax
        self.clone()
    }

}
impl VariableSized for SimpleIfFlagSimpleFlag {
    fn size(&self) -> usize {
        1 // inner: SimpleFlag (u8)
        + {
            if let Some(s) = &self.zero {
                s.size()
            } else {
                0
            }
        }
    }
}

impl MaximumPossibleSized for SimpleIfFlagSimpleFlag {
    fn maximum_possible_size() -> usize {
        1 // inner: SimpleFlag (u8)
        + SimpleIfFlagSimpleFlagZERO::maximum_possible_size() // ZERO enumerator
    }
}

#[derive(Debug, PartialEq, Clone)]
pub struct SimpleIfFlagSimpleFlagZERO {
    pub basic: u8,
}

impl VariableSized for SimpleIfFlagSimpleFlagZERO {
    fn size(&self) -> usize {
        1 // basic: u8
    }
}

impl MaximumPossibleSized for SimpleIfFlagSimpleFlagZERO {
    fn maximum_possible_size() -> usize {
        1 // basic: u8
    }
}

impl SimpleIfFlagSimpleFlagZERO {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.basic.to_le_bytes())?;

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.basic.to_le_bytes()).await?;

        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.basic.to_le_bytes()).await?;

        Ok(())
    }

}

