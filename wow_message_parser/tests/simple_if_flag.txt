use std::convert::{TryFrom, TryInto};
use crate::world::version_1_12::SimpleFlag;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct SimpleIfFlag {
    pub flag: SimpleIfFlagSimpleFlag,
}

impl SimpleIfFlag {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // flag: SimpleFlag
        w.write_all(&(self.flag.as_int() as u8).to_le_bytes())?;

        if let Some(if_statement) = &self.flag.zero {
            // basic: u8
            w.write_all(&if_statement.basic.to_le_bytes())?;

        }

        Ok(())
    }
}

impl SimpleIfFlag {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // flag: SimpleFlag
        let flag = SimpleFlag::new(crate::util::read_u8_le(r)?);

        let flag_ZERO = if flag.is_ZERO() {
            // basic: u8
            let basic = crate::util::read_u8_le(r)?;

            Some(SimpleIfFlagSimpleFlagZERO {
                basic,
            })
        }
        else {
            None
        };

        let flag = SimpleIfFlagSimpleFlag {
            inner: flag.as_int(),
            zero: flag_ZERO,
        };

        Ok(Self {
            flag,
        })
    }

}

impl SimpleIfFlag {
    pub(crate) fn size(&self) -> usize {
        self.flag.size() // flag: SimpleIfFlagSimpleFlag
    }
}

#[derive(Default, Debug, PartialEq, Clone)]
pub struct SimpleIfFlagSimpleFlag {
    inner: u8,
    zero: Option<SimpleIfFlagSimpleFlagZERO>,
}

impl SimpleIfFlagSimpleFlag {
    pub const fn empty() -> Self {
        Self {
            inner: 0,
            zero: None,
        }
    }

    pub const fn new_ZERO(zero: SimpleIfFlagSimpleFlagZERO) -> Self {
        Self {
            inner: SimpleFlag::ZERO,
            zero: Some(zero),
        }
    }

    pub fn set_ZERO(&mut self, zero: SimpleIfFlagSimpleFlagZERO) -> Self {
        self.inner |= SimpleFlag::ZERO;
        self.zero = Some(zero);
        self.clone()
    }

    pub const fn get_ZERO(&self) -> Option<&SimpleIfFlagSimpleFlagZERO> {
        self.zero.as_ref()
    }

    pub fn clear_ZERO(mut self) -> Self {
        self.inner &= SimpleFlag::ZERO.reverse_bits();
        self.zero = None;
        self
    }

    pub const fn new_ONE() -> Self {
        Self {
            inner: SimpleFlag::ONE,
            zero: None,
        }
    }

    pub fn set_ONE(&mut self) -> Self {
        self.inner |= SimpleFlag::ONE;
        self.clone()
    }

    pub const fn get_ONE(&self) -> bool {
        (self.inner & SimpleFlag::ONE) != 0
    }

    pub fn clear_ONE(mut self) -> Self {
        self.inner &= SimpleFlag::ONE.reverse_bits();
        self
    }

    pub const fn new_TWO() -> Self {
        Self {
            inner: SimpleFlag::TWO,
            zero: None,
        }
    }

    pub fn set_TWO(&mut self) -> Self {
        self.inner |= SimpleFlag::TWO;
        self.clone()
    }

    pub const fn get_TWO(&self) -> bool {
        (self.inner & SimpleFlag::TWO) != 0
    }

    pub fn clear_TWO(mut self) -> Self {
        self.inner &= SimpleFlag::TWO.reverse_bits();
        self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}
impl SimpleIfFlagSimpleFlag {
    pub(crate) fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.zero {
                s.size()
            } else {
                0
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub struct SimpleIfFlagSimpleFlagZERO {
    pub basic: u8,
}

impl SimpleIfFlagSimpleFlagZERO {
    pub(crate) fn size(&self) -> usize {
        1 // basic: u8
    }
}

