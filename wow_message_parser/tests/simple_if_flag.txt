use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleFlag};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct SimpleIfFlag {
    pub flag: SimpleIfFlagSimpleFlag,
}

impl ReadableAndWritable for SimpleIfFlag {
    type Error = std::io::Error;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // flag: SimpleFlag
        let flag = SimpleFlag::read(r)?;

        let flag_ZERO = if flag.is_ZERO() {
            // basic: u8
            let basic = crate::util::read_u8_le(r)?;

            Some(SimpleIfFlagSimpleFlagZERO {
                basic,
            })
        }
        else {
            None
        };

        let flag = SimpleIfFlagSimpleFlag {
            inner: flag.as_int(),
            zero: flag_ZERO,
        };

        Ok(Self {
            flag,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // flag: SimpleFlag
        self.flag.write(w)?;

        if let Some(s) = &self.flag.zero {
            // basic: u8
            w.write_all(&s.basic.to_le_bytes())?;

        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // flag: SimpleFlag
            let flag = SimpleFlag::tokio_read(r).await?;

            let flag_ZERO = if flag.is_ZERO() {
                // basic: u8
                let basic = crate::util::tokio_read_u8_le(r).await?;

                Some(SimpleIfFlagSimpleFlagZERO {
                    basic,
                })
            }
            else {
                None
            };

            let flag = SimpleIfFlagSimpleFlag {
                inner: flag.as_int(),
                zero: flag_ZERO,
            };

            Ok(Self {
                flag,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // flag: SimpleFlag
            self.flag.tokio_write(w).await?;

            if let Some(s) = &self.flag.zero {
                // basic: u8
                w.write_all(&s.basic.to_le_bytes()).await?;

            }

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // flag: SimpleFlag
            let flag = SimpleFlag::astd_read(r).await?;

            let flag_ZERO = if flag.is_ZERO() {
                // basic: u8
                let basic = crate::util::astd_read_u8_le(r).await?;

                Some(SimpleIfFlagSimpleFlagZERO {
                    basic,
                })
            }
            else {
                None
            };

            let flag = SimpleIfFlagSimpleFlag {
                inner: flag.as_int(),
                zero: flag_ZERO,
            };

            Ok(Self {
                flag,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // flag: SimpleFlag
            self.flag.astd_write(w).await?;

            if let Some(s) = &self.flag.zero {
                // basic: u8
                w.write_all(&s.basic.to_le_bytes()).await?;

            }

            Ok(())
        })
    }

}

impl VariableSized for SimpleIfFlag {
    fn size(&self) -> usize {
        0
        + self.flag.size() // flag: SimpleIfFlagSimpleFlag
    }
}

impl MaximumPossibleSized for SimpleIfFlag {
    fn maximum_possible_size() -> usize {
        0
        + 2 // flag: SimpleIfFlagSimpleFlag
    }
}

#[derive(Default, Debug, PartialEq, Clone)]
pub struct SimpleIfFlagSimpleFlag {
    inner: u8,
    zero: Option<SimpleIfFlagSimpleFlagZERO>,
}

impl From<&SimpleIfFlagSimpleFlag> for SimpleFlag {
    fn from(e: &SimpleIfFlagSimpleFlag) -> Self {
        Self::new(e.inner)
    }
}

impl SimpleIfFlagSimpleFlag {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleFlag = self.into();
        a.write(w)?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleFlag = self.into();
        a.tokio_write(w).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: SimpleFlag = self.into();
        a.astd_write(w).await?;
        Ok(())
    }

    pub const fn empty() -> Self {
        Self {
            inner: 0,
            zero: None,
        }
    }

    pub const fn new_ZERO(zero: SimpleIfFlagSimpleFlagZERO) -> Self {
        Self {
            inner: SimpleFlag::ZERO,
            zero: Some(zero),
        }
    }

    pub fn set_ZERO(&mut self, zero: SimpleIfFlagSimpleFlagZERO) -> Self {
        self.inner |= SimpleFlag::ZERO;
        self.zero = Some(zero);
        self.clone()
    }

    pub const fn get_ZERO(&self) -> Option<&SimpleIfFlagSimpleFlagZERO> {
        self.zero.as_ref()
    }

    pub fn clear_ZERO(&mut self) -> Self {
        self.inner &= SimpleFlag::ZERO.reverse_bits();
        self.zero = None;
        // TODO: Cloning like this is not conductive to good performance but it is
        // temporarily necessary due to test syntax
        self.clone()
    }

    pub const fn new_ONE() -> Self {
        Self {
            inner: SimpleFlag::ONE,
            zero: None,
        }
    }

    pub fn set_ONE(&mut self) -> Self {
        self.inner |= SimpleFlag::ONE;
        self.clone()
    }

    pub const fn get_ONE(&self) -> bool {
        (self.inner & SimpleFlag::ONE) != 0
    }

    pub fn clear_ONE(&mut self) -> Self {
        self.inner &= SimpleFlag::ONE.reverse_bits();
        // TODO: Cloning like this is not conductive to good performance but it is
        // temporarily necessary due to test syntax
        self.clone()
    }

    pub const fn new_TWO() -> Self {
        Self {
            inner: SimpleFlag::TWO,
            zero: None,
        }
    }

    pub fn set_TWO(&mut self) -> Self {
        self.inner |= SimpleFlag::TWO;
        self.clone()
    }

    pub const fn get_TWO(&self) -> bool {
        (self.inner & SimpleFlag::TWO) != 0
    }

    pub fn clear_TWO(&mut self) -> Self {
        self.inner &= SimpleFlag::TWO.reverse_bits();
        // TODO: Cloning like this is not conductive to good performance but it is
        // temporarily necessary due to test syntax
        self.clone()
    }

}
impl VariableSized for SimpleIfFlagSimpleFlag {
    fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.zero {
                s.size()
            } else {
                0
            }
        }
    }
}

impl MaximumPossibleSized for SimpleIfFlagSimpleFlag {
    fn maximum_possible_size() -> usize {
        1 // inner
        + SimpleIfFlagSimpleFlagZERO::maximum_possible_size() // ZERO enumerator
    }
}

#[derive(Debug, PartialEq, Clone)]
pub struct SimpleIfFlagSimpleFlagZERO {
    pub basic: u8,
}

impl VariableSized for SimpleIfFlagSimpleFlagZERO {
    fn size(&self) -> usize {
        1 // basic: u8
    }
}

impl MaximumPossibleSized for SimpleIfFlagSimpleFlagZERO {
    fn maximum_possible_size() -> usize {
        1 // basic: u8
    }
}

