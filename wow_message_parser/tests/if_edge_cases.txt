use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{TEnum, TEnumError};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct IfEdgeCases {
    pub t: IfEdgeCasesTEnum,
}

impl ReadableAndWritable for IfEdgeCases {
    type Error = IfEdgeCasesError;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // t: TEnum
        let t = TEnum::read(r)?;

        let t_if = match t {
            TEnum::ZERO => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::ZERO {
                    basic1,
                }
            }
            TEnum::ONE => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::ONE {
                    basic1,
                }
            }
            TEnum::TWO => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::TWO {
                    basic1,
                }
            }
            TEnum::THREE => {
                // basic3: u8
                let basic3 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::THREE {
                    basic3,
                }
            }
            TEnum::FOUR => {
                // basic3: u8
                let basic3 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::FOUR {
                    basic3,
                }
            }
            TEnum::FIVE => {
                // basic5: u8
                let basic5 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::FIVE {
                    basic5,
                }
            }
            TEnum::SIX => {
                // basic5: u8
                let basic5 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::SIX {
                    basic5,
                }
            }
            TEnum::REST => {
                // rest: u8
                let rest = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::REST {
                    rest,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // t: TEnum
        self.t.write(w)?;

        match &self.t {
            IfEdgeCasesTEnum::ZERO {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::ONE {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::TWO {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::THREE {
                basic3,
            } => {
                // basic3: u8
                w.write_all(&basic3.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::FOUR {
                basic3,
            } => {
                // basic3: u8
                w.write_all(&basic3.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::FIVE {
                basic5,
            } => {
                // basic5: u8
                w.write_all(&basic5.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::SIX {
                basic5,
            } => {
                // basic5: u8
                w.write_all(&basic5.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::REST {
                rest,
            } => {
                // rest: u8
                w.write_all(&rest.to_le_bytes())?;

            }
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            let t = TEnum::tokio_read(r).await?;

            let t_if = match t {
                TEnum::ZERO => {
                    // basic1: u8
                    let basic1 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::ZERO {
                        basic1,
                    }
                }
                TEnum::ONE => {
                    // basic1: u8
                    let basic1 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::ONE {
                        basic1,
                    }
                }
                TEnum::TWO => {
                    // basic1: u8
                    let basic1 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::TWO {
                        basic1,
                    }
                }
                TEnum::THREE => {
                    // basic3: u8
                    let basic3 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::THREE {
                        basic3,
                    }
                }
                TEnum::FOUR => {
                    // basic3: u8
                    let basic3 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::FOUR {
                        basic3,
                    }
                }
                TEnum::FIVE => {
                    // basic5: u8
                    let basic5 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::FIVE {
                        basic5,
                    }
                }
                TEnum::SIX => {
                    // basic5: u8
                    let basic5 = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::SIX {
                        basic5,
                    }
                }
                TEnum::REST => {
                    // rest: u8
                    let rest = crate::util::tokio_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::REST {
                        rest,
                    }
                }
            };

            Ok(Self {
                t: t_if,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            self.t.tokio_write(w).await?;

            match &self.t {
                IfEdgeCasesTEnum::ZERO {
                    basic1,
                } => {
                    // basic1: u8
                    w.write_all(&basic1.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::ONE {
                    basic1,
                } => {
                    // basic1: u8
                    w.write_all(&basic1.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::TWO {
                    basic1,
                } => {
                    // basic1: u8
                    w.write_all(&basic1.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::THREE {
                    basic3,
                } => {
                    // basic3: u8
                    w.write_all(&basic3.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::FOUR {
                    basic3,
                } => {
                    // basic3: u8
                    w.write_all(&basic3.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::FIVE {
                    basic5,
                } => {
                    // basic5: u8
                    w.write_all(&basic5.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::SIX {
                    basic5,
                } => {
                    // basic5: u8
                    w.write_all(&basic5.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::REST {
                    rest,
                } => {
                    // rest: u8
                    w.write_all(&rest.to_le_bytes()).await?;

                }
            }

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            let t = TEnum::astd_read(r).await?;

            let t_if = match t {
                TEnum::ZERO => {
                    // basic1: u8
                    let basic1 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::ZERO {
                        basic1,
                    }
                }
                TEnum::ONE => {
                    // basic1: u8
                    let basic1 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::ONE {
                        basic1,
                    }
                }
                TEnum::TWO => {
                    // basic1: u8
                    let basic1 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::TWO {
                        basic1,
                    }
                }
                TEnum::THREE => {
                    // basic3: u8
                    let basic3 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::THREE {
                        basic3,
                    }
                }
                TEnum::FOUR => {
                    // basic3: u8
                    let basic3 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::FOUR {
                        basic3,
                    }
                }
                TEnum::FIVE => {
                    // basic5: u8
                    let basic5 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::FIVE {
                        basic5,
                    }
                }
                TEnum::SIX => {
                    // basic5: u8
                    let basic5 = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::SIX {
                        basic5,
                    }
                }
                TEnum::REST => {
                    // rest: u8
                    let rest = crate::util::astd_read_u8_le(r).await?;

                    IfEdgeCasesTEnum::REST {
                        rest,
                    }
                }
            };

            Ok(Self {
                t: t_if,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            self.t.astd_write(w).await?;

            match &self.t {
                IfEdgeCasesTEnum::ZERO {
                    basic1,
                } => {
                    // basic1: u8
                    w.write_all(&basic1.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::ONE {
                    basic1,
                } => {
                    // basic1: u8
                    w.write_all(&basic1.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::TWO {
                    basic1,
                } => {
                    // basic1: u8
                    w.write_all(&basic1.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::THREE {
                    basic3,
                } => {
                    // basic3: u8
                    w.write_all(&basic3.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::FOUR {
                    basic3,
                } => {
                    // basic3: u8
                    w.write_all(&basic3.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::FIVE {
                    basic5,
                } => {
                    // basic5: u8
                    w.write_all(&basic5.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::SIX {
                    basic5,
                } => {
                    // basic5: u8
                    w.write_all(&basic5.to_le_bytes()).await?;

                }
                IfEdgeCasesTEnum::REST {
                    rest,
                } => {
                    // rest: u8
                    w.write_all(&rest.to_le_bytes()).await?;

                }
            }

            Ok(())
        })
    }

}

impl ConstantSized for IfEdgeCases {}

impl MaximumPossibleSized for IfEdgeCases {
    fn maximum_possible_size() -> usize {
        0
        + 2 // t: IfEdgeCasesTEnum
    }
}

#[derive(Debug)]
pub enum IfEdgeCasesError {
    Io(std::io::Error),
    TEnum(TEnumError),
}

impl std::error::Error for IfEdgeCasesError {}
impl std::fmt::Display for IfEdgeCasesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::TEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for IfEdgeCasesError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<TEnumError> for IfEdgeCasesError {
    fn from(e: TEnumError) -> Self {
        Self::TEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum IfEdgeCasesTEnum {
    ZERO {
        basic1: u8,
    },
    ONE {
        basic1: u8,
    },
    TWO {
        basic1: u8,
    },
    THREE {
        basic3: u8,
    },
    FOUR {
        basic3: u8,
    },
    FIVE {
        basic5: u8,
    },
    SIX {
        basic5: u8,
    },
    REST {
        rest: u8,
    },
}

impl Default for IfEdgeCasesTEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            basic1: Default::default(),
        }
    }
}

impl IfEdgeCasesTEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes())?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes()).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        w.write_all(&self.as_int().to_le_bytes()).await?;
        Ok(())
    }

    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO { .. } => 0,
            Self::ONE { .. } => 1,
            Self::TWO { .. } => 2,
            Self::THREE { .. } => 3,
            Self::FOUR { .. } => 4,
            Self::FIVE { .. } => 5,
            Self::SIX { .. } => 6,
            Self::REST { .. } => 7,
        }
    }

}

impl VariableSized for IfEdgeCasesTEnum {
    fn size(&self) -> usize {
        match self {
            Self::ZERO {
                basic1,
            } => {
                1
                + 1 // basic1: u8
            }
            Self::ONE {
                basic1,
            } => {
                1
                + 1 // basic1: u8
            }
            Self::TWO {
                basic1,
            } => {
                1
                + 1 // basic1: u8
            }
            Self::THREE {
                basic3,
            } => {
                1
                + 1 // basic3: u8
            }
            Self::FOUR {
                basic3,
            } => {
                1
                + 1 // basic3: u8
            }
            Self::FIVE {
                basic5,
            } => {
                1
                + 1 // basic5: u8
            }
            Self::SIX {
                basic5,
            } => {
                1
                + 1 // basic5: u8
            }
            Self::REST {
                rest,
            } => {
                1
                + 1 // rest: u8
            }
        }
    }
}

impl MaximumPossibleSized for IfEdgeCasesTEnum {
    fn maximum_possible_size() -> usize {
        2
    }
}

