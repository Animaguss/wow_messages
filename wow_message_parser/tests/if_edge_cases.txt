use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::TEnum;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct IfEdgeCases {
    pub t: IfEdgeCasesTEnum,
}

impl IfEdgeCases {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes())?;

        match &self.t {
            IfEdgeCasesTEnum::ZERO {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::ONE {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::TWO {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::THREE {
                basic3,
            } => {
                // basic3: u8
                w.write_all(&basic3.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::FOUR {
                basic3,
            } => {
                // basic3: u8
                w.write_all(&basic3.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::FIVE {
                basic5,
            } => {
                // basic5: u8
                w.write_all(&basic5.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::SIX {
                basic5,
            } => {
                // basic5: u8
                w.write_all(&basic5.to_le_bytes())?;

            }
            IfEdgeCasesTEnum::REST {
                rest,
            } => {
                // rest: u8
                w.write_all(&rest.to_le_bytes())?;

            }
        }

        Ok(())
    }
}

impl IfEdgeCases {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::ZERO {
                    basic1,
                }
            }
            TEnum::ONE => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::ONE {
                    basic1,
                }
            }
            TEnum::TWO => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::TWO {
                    basic1,
                }
            }
            TEnum::THREE => {
                // basic3: u8
                let basic3 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::THREE {
                    basic3,
                }
            }
            TEnum::FOUR => {
                // basic3: u8
                let basic3 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::FOUR {
                    basic3,
                }
            }
            TEnum::FIVE => {
                // basic5: u8
                let basic5 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::FIVE {
                    basic5,
                }
            }
            TEnum::SIX => {
                // basic5: u8
                let basic5 = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::SIX {
                    basic5,
                }
            }
            TEnum::REST => {
                // rest: u8
                let rest = crate::util::read_u8_le(r)?;

                IfEdgeCasesTEnum::REST {
                    rest,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "tokio")]
    pub(crate) async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => {
                // basic1: u8
                let basic1 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::ZERO {
                    basic1,
                }
            }
            TEnum::ONE => {
                // basic1: u8
                let basic1 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::ONE {
                    basic1,
                }
            }
            TEnum::TWO => {
                // basic1: u8
                let basic1 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::TWO {
                    basic1,
                }
            }
            TEnum::THREE => {
                // basic3: u8
                let basic3 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::THREE {
                    basic3,
                }
            }
            TEnum::FOUR => {
                // basic3: u8
                let basic3 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::FOUR {
                    basic3,
                }
            }
            TEnum::FIVE => {
                // basic5: u8
                let basic5 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::FIVE {
                    basic5,
                }
            }
            TEnum::SIX => {
                // basic5: u8
                let basic5 = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::SIX {
                    basic5,
                }
            }
            TEnum::REST => {
                // rest: u8
                let rest = crate::util::tokio_read_u8_le(r).await?;

                IfEdgeCasesTEnum::REST {
                    rest,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

    #[cfg(feature = "async-std")]
    pub(crate) async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => {
                // basic1: u8
                let basic1 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::ZERO {
                    basic1,
                }
            }
            TEnum::ONE => {
                // basic1: u8
                let basic1 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::ONE {
                    basic1,
                }
            }
            TEnum::TWO => {
                // basic1: u8
                let basic1 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::TWO {
                    basic1,
                }
            }
            TEnum::THREE => {
                // basic3: u8
                let basic3 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::THREE {
                    basic3,
                }
            }
            TEnum::FOUR => {
                // basic3: u8
                let basic3 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::FOUR {
                    basic3,
                }
            }
            TEnum::FIVE => {
                // basic5: u8
                let basic5 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::FIVE {
                    basic5,
                }
            }
            TEnum::SIX => {
                // basic5: u8
                let basic5 = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::SIX {
                    basic5,
                }
            }
            TEnum::REST => {
                // rest: u8
                let rest = crate::util::astd_read_u8_le(r).await?;

                IfEdgeCasesTEnum::REST {
                    rest,
                }
            }
        };

        Ok(Self {
            t: t_if,
        })
    }

}

#[derive(Debug, PartialEq, Clone)]
pub enum IfEdgeCasesTEnum {
    ZERO {
        basic1: u8,
    },
    ONE {
        basic1: u8,
    },
    TWO {
        basic1: u8,
    },
    THREE {
        basic3: u8,
    },
    FOUR {
        basic3: u8,
    },
    FIVE {
        basic5: u8,
    },
    SIX {
        basic5: u8,
    },
    REST {
        rest: u8,
    },
}

impl Default for IfEdgeCasesTEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            basic1: Default::default(),
        }
    }
}

impl IfEdgeCasesTEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO { .. } => 0,
            Self::ONE { .. } => 1,
            Self::TWO { .. } => 2,
            Self::THREE { .. } => 3,
            Self::FOUR { .. } => 4,
            Self::FIVE { .. } => 5,
            Self::SIX { .. } => 6,
            Self::REST { .. } => 7,
        }
    }

}

impl IfEdgeCasesTEnum {
    pub fn size(&self) -> usize {
        match self {
            Self::ZERO {
                basic1,
            } => {
                1
                + 1 // basic1: u8
            }
            Self::ONE {
                basic1,
            } => {
                1
                + 1 // basic1: u8
            }
            Self::TWO {
                basic1,
            } => {
                1
                + 1 // basic1: u8
            }
            Self::THREE {
                basic3,
            } => {
                1
                + 1 // basic3: u8
            }
            Self::FOUR {
                basic3,
            } => {
                1
                + 1 // basic3: u8
            }
            Self::FIVE {
                basic5,
            } => {
                1
                + 1 // basic5: u8
            }
            Self::SIX {
                basic5,
            } => {
                1
                + 1 // basic5: u8
            }
            Self::REST {
                rest,
            } => {
                1
                + 1 // rest: u8
            }
        }
    }
}

