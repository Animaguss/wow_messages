use std::convert::{TryFrom, TryInto};
use crate::AuraMask;
use crate::UpdateMask;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CustomMasks {
    pub update_mask: UpdateMask,
    pub aura_mask: AuraMask,
}

impl CustomMasks {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.write_into_vec(w)?;

        // aura_mask: AuraMask
        self.aura_mask.write_into_vec(w)?;

        Ok(())
    }
}

impl CustomMasks {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::read(r)?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::read(r)?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

}

impl CustomMasks {
    pub(crate) fn size(&self) -> usize {
        self.update_mask.size() // update_mask: UpdateMask
        + self.aura_mask.size() // aura_mask: AuraMask
    }
}

