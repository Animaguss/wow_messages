use std::convert::{TryFrom, TryInto};
use crate::AuraMask;
use crate::UpdateMask;
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CustomMasks {
    pub update_mask: UpdateMask,
    pub aura_mask: AuraMask,
}

impl ReadableAndWritable for CustomMasks {
    type Error = std::io::Error;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::read(r)?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::read(r)?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.write(w)?;

        // aura_mask: AuraMask
        self.aura_mask.write(w)?;

        Ok(())
    }

    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // update_mask: UpdateMask
            let update_mask = UpdateMask::tokio_read(r).await?;

            // aura_mask: AuraMask
            let aura_mask = AuraMask::tokio_read(r).await?;

            Ok(Self {
                update_mask,
                aura_mask,
            })
        })
    }

    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // update_mask: UpdateMask
            self.update_mask.tokio_write(w).await?;

            // aura_mask: AuraMask
            self.aura_mask.tokio_write(w).await?;

            Ok(())
        })
    }

    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // update_mask: UpdateMask
            let update_mask = UpdateMask::astd_read(r).await?;

            // aura_mask: AuraMask
            let aura_mask = AuraMask::astd_read(r).await?;

            Ok(Self {
                update_mask,
                aura_mask,
            })
        })
    }

    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // update_mask: UpdateMask
            self.update_mask.astd_write(w).await?;

            // aura_mask: AuraMask
            self.aura_mask.astd_write(w).await?;

            Ok(())
        })
    }

}

impl VariableSized for CustomMasks {
    fn size(&self) -> usize {
        0
        + self.update_mask.size() // update_mask: UpdateMask
        + self.aura_mask.size() // aura_mask: AuraMask
    }
}

impl MaximumPossibleSized for CustomMasks {
    fn maximum_possible_size() -> usize {
        0
        + 1446 // update_mask: UpdateMask
        + 132 // aura_mask: AuraMask
    }
}

