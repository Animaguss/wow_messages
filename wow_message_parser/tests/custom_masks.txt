use std::convert::{TryFrom, TryInto};
use crate::AuraMask;
use crate::UpdateMask;
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CustomMasks {
    pub update_mask: UpdateMask,
    pub aura_mask: AuraMask,
}

impl CustomMasks {
    #[cfg(feature = "sync")]
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, std::io::Error> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::read(r)?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::read(r)?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

    #[cfg(feature = "sync")]
    pub(crate) fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.write(w)?;

        // aura_mask: AuraMask
        self.aura_mask.write(w)?;

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub(crate) async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, std::io::Error> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::tokio_read(r).await?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::tokio_read(r).await?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

    #[cfg(feature = "async_tokio")]
    pub(crate) async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.tokio_write(w).await?;

        // aura_mask: AuraMask
        self.aura_mask.tokio_write(w).await?;

        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub(crate) async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, std::io::Error> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::astd_read(r).await?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::astd_read(r).await?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

    #[cfg(feature = "async_std")]
    pub(crate) async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.astd_write(w).await?;

        // aura_mask: AuraMask
        self.aura_mask.astd_write(w).await?;

        Ok(())
    }

}

impl CustomMasks {
    pub fn size(&self) -> usize {
        0
        + self.update_mask.size() // update_mask: UpdateMask
        + self.aura_mask.size() // aura_mask: AuraMask
    }
}

