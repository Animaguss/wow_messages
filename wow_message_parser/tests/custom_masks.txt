use std::convert::{TryFrom, TryInto};
use crate::AuraMask;
use crate::UpdateMask;
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(any(feature = "async_tokio", feature = "async_std"))]
use crate::AsyncReadWrite;
#[cfg(any(feature = "async_tokio", feature = "async_std"))]
use async_trait::async_trait;
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CustomMasks {
    pub update_mask: UpdateMask,
    pub aura_mask: AuraMask,
}

impl ReadableAndWritable for CustomMasks {
    type Error = std::io::Error;

    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::read(r)?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::read(r)?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.write(w)?;

        // aura_mask: AuraMask
        self.aura_mask.write(w)?;

        Ok(())
    }

}

#[cfg(any(feature = "async_tokio", feature = "async_std"))]
#[async_trait]
impl AsyncReadWrite for CustomMasks {
    type Error = std::io::Error;

    #[cfg(feature = "async_tokio")]
    async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // update_mask: UpdateMask
        let update_mask = UpdateMask::tokio_read(r).await?;

        // aura_mask: AuraMask
        let aura_mask = AuraMask::tokio_read(r).await?;

        Ok(Self {
            update_mask,
            aura_mask,
        })
    }

    #[cfg(feature = "async_tokio")]
    async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // update_mask: UpdateMask
        self.update_mask.tokio_write(w).await?;

        // aura_mask: AuraMask
        self.aura_mask.tokio_write(w).await?;

        Ok(())
    }

}

impl VariableSized for CustomMasks {
    fn size(&self) -> usize {
        self.update_mask.size() // update_mask: UpdateMask
        + self.aura_mask.size() // aura_mask: AuraMask
    }
}

impl MaximumPossibleSized for CustomMasks {
    fn maximum_possible_size() -> usize {
        65536 // update_mask: UpdateMask
        + 65536 // aura_mask: AuraMask
    }
}

