use std::io::{Read, Write};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:50`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L50):
/// ```text
/// msg SimpleMsg = 0x0002 {
///     u8 basic;
/// }
/// ```
pub struct SimpleMsg {
    pub basic: u8,
}

#[cfg(feature = "print-testcase")]
impl SimpleMsg {
    pub fn to_test_case_string(&self) -> Option<String> {
        panic!("MSG types not supported");
    }

}

impl crate::private::Sealed for SimpleMsg {}
impl crate::Message for SimpleMsg {
    const OPCODE: u32 = 0x0002;

    #[cfg(feature = "print-testcase")]
    fn to_test_case_string(&self) -> Option<String> {
        SimpleMsg::to_test_case_string(self)
    }

    fn size_without_header(&self) -> u32 {
        1
    }

    fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // basic: u8
        w.write_all(&self.basic.to_le_bytes())?;

        Ok(())
    }

    fn read_body<S: crate::private::Sealed>(mut r: &mut &[u8], body_size: u32) -> Result<Self, crate::errors::ParseError> {
        if body_size != 1 {
            return Err(crate::errors::ParseError::InvalidSize { opcode: 0x0002, size: body_size });
        }

        // basic: u8
        let basic = crate::util::read_u8_le(&mut r)?;

        Ok(Self {
            basic,
        })
    }

}

#[cfg(feature = "vanilla")]
impl crate::vanilla::ClientMessage for SimpleMsg {}

#[cfg(feature = "vanilla")]
impl crate::vanilla::ServerMessage for SimpleMsg {}

