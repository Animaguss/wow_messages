use std::convert::{TryFrom, TryInto};
use std::io::{Write, Read};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:56`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L56):
/// ```text
/// msg SimpleMsg = 0x0002 {
///     u8 basic;
/// }
/// ```
pub struct SimpleMsg {
    pub basic: u8,
}

impl crate::Message for SimpleMsg {
    const OPCODE: u32 = 0x0002;

    fn size_without_header(&self) -> u32 {
        1
    }

    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // basic: u8
        w.write_all(&self.basic.to_le_bytes())?;

        Ok(())
    }
    fn read_body(r: &mut &[u8], body_size: u32) -> std::result::Result<Self, crate::errors::ParseError> {
        if body_size != 1 {
            return Err(crate::errors::ParseError::InvalidSize { opcode: 0x0002, size: body_size as u32 });
        }

        // basic: u8
        let basic = crate::util::read_u8_le(r)?;

        Ok(Self {
            basic,
        })
    }

}
#[cfg(feature = "vanilla")]
impl crate::world::vanilla::ClientMessage for SimpleMsg {}

#[cfg(feature = "vanilla")]
impl crate::world::vanilla::ServerMessage for SimpleMsg {}

