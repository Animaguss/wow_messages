use std::io::{Read, Write};

use crate::vanilla::SimpleEnum;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:129`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L129):
/// ```text
/// struct SimpleIfEnumNot {
///     SimpleEnum enum;
///     if (enum != ZERO) {
///         u8 others;
///     }
/// }
/// ```
pub struct SimpleIfEnumNot {
    pub enum: SimpleIfEnumNot_SimpleEnum,
}

impl SimpleIfEnumNot {
    pub(crate) fn write_into_vec(&self, mut w: impl std::io::Write) -> Result<(), std::io::Error> {
        // enum: SimpleEnum
        w.write_all(&u8::from(self.enum.as_int()).to_le_bytes())?;

        match &self.enum {
            SimpleIfEnumNot_SimpleEnum::Zero => {}
            SimpleIfEnumNot_SimpleEnum::One {
                others,
            } => {
                // others: u8
                w.write_all(&others.to_le_bytes())?;

            }
            SimpleIfEnumNot_SimpleEnum::Two {
                others,
            } => {
                // others: u8
                w.write_all(&others.to_le_bytes())?;

            }
        }

        Ok(())
    }
}

impl SimpleIfEnumNot {
    pub(crate) fn read<R: std::io::Read>(mut r: R) -> std::result::Result<Self, crate::errors::ParseError> {
        // enum: SimpleEnum
        let enum: SimpleEnum = crate::util::read_u8_le(&mut r)?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::Zero => SimpleIfEnumNot_SimpleEnum::Zero,
            SimpleEnum::One => {
                // others: u8
                let others = crate::util::read_u8_le(&mut r)?;

                SimpleIfEnumNot_SimpleEnum::One {
                    others,
                }
            }
            SimpleEnum::Two => {
                // others: u8
                let others = crate::util::read_u8_le(&mut r)?;

                SimpleIfEnumNot_SimpleEnum::Two {
                    others,
                }
            }
        };

        Ok(Self {
            enum: enum_if,
        })
    }

}

impl SimpleIfEnumNot {
    pub(crate) fn size(&self) -> usize {
        self.enum.size() // enum: SimpleIfEnumNot_SimpleEnum
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum SimpleIfEnumNot_SimpleEnum {
    Zero,
    One {
        others: u8,
    },
    Two {
        others: u8,
    },
}

impl Default for SimpleIfEnumNot_SimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::Zero
    }
}

impl SimpleIfEnumNot_SimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero => 0,
            Self::One { .. } => 1,
            Self::Two { .. } => 2,
        }
    }

}

impl SimpleIfEnumNot_SimpleEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Zero => {
                1
            }
            Self::One {
                others,
            } => {
                1
                + 1 // others: u8
            }
            Self::Two {
                others,
            } => {
                1
                + 1 // others: u8
            }
        }
    }
}

