use std::convert::{TryFrom, TryInto};
use crate::ClientMessage;
use wow_srp::header_crypto::Encrypter;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CMSG_TEST_ENDLESS_U8 {
    pub c_string: String,
    pub b_u8: u8,
    pub endless: Vec<u8>,
}

impl ClientMessage for CMSG_TEST_ENDLESS_U8 {
    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // c_string: CString
        w.write_all(self.c_string.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // b_u8: u8
        w.write_all(&self.b_u8.to_le_bytes())?;

        // endless: u8[-]
        for i in self.endless.iter() {
            w.write_all(&i.to_le_bytes())?;
        }

        Ok(())
    }
    const OPCODE: u16 = 0x1337;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        self.size() as u16
    }

    type Error = crate::errors::ParseError;

    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, Self::Error> {
        // c_string: CString
        let c_string = crate::util::read_c_string_to_vec(r)?;
        let c_string = String::from_utf8(c_string)?;

        // b_u8: u8
        let b_u8 = crate::util::read_u8_le(r)?;

        // endless: u8[-]
        let mut current_size = {
            c_string.len() + 1 // c_string: CString
            + 1 // b_u8: u8
        };
        let mut endless = Vec::with_capacity(body_size as usize - current_size);
        while current_size < (body_size as usize) {
            endless.push(crate::util::read_u8_le(r)?);
            current_size += 1;
        }

        Ok(Self {
            c_string,
            b_u8,
            endless,
        })
    }

}

impl CMSG_TEST_ENDLESS_U8 {
    pub fn size(&self) -> usize {
        0
        + self.c_string.len() + 1 // c_string: CString
        + 1 // b_u8: u8
        + self.endless.len() * core::mem::size_of::<u8>() // endless: u8[-]
    }
}

