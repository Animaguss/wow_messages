/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:5`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L5):
/// ```text
/// enum SimpleEnum : u8 {
///     ZERO = 0;
///     ONE = 1;
///     TWO = 2;
/// }
/// ```
#[derive(Debug, PartialEq, Eq, Hash, Ord, PartialOrd, Copy, Clone)]
#[cfg_attr(feature = "serde", derive(serde::Deserialize, serde::Serialize))]
pub enum SimpleEnum {
    Zero,
    One,
    Two,
}

impl SimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero => 0x0,
            Self::One => 0x1,
            Self::Two => 0x2,
        }
    }

}

#[cfg(feature = "print-testcase")]
impl SimpleEnum {
    pub const fn as_test_case_value(&self) -> &'static str {
        match self {
            Self::Zero => "ZERO",
            Self::One => "ONE",
            Self::Two => "TWO",
        }
    }

}

impl Default for SimpleEnum {
    fn default() -> Self {
        Self::Zero
    }
}

impl std::fmt::Display for SimpleEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Zero => f.write_str("Zero"),
            Self::One => f.write_str("One"),
            Self::Two => f.write_str("Two"),
        }
    }
}

impl TryFrom<u8> for SimpleEnum {
    type Error = crate::errors::EnumError;
    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::Zero),
            1 => Ok(Self::One),
            2 => Ok(Self::Two),
            v => Err(crate::errors::EnumError::new("SimpleEnum", v as u64),)
        }
    }
}

