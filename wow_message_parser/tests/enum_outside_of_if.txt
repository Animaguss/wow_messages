use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::NestedEnum;
use crate::world::v1::v12::TEnum;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct EnumOutsideOfIf {
    pub t: EnumOutsideOfIfTEnum,
    pub n: EnumOutsideOfIfNestedEnum,
}

impl EnumOutsideOfIf {
    pub(crate) fn as_bytes(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes())?;

        // n: NestedEnum
        w.write_all(&(self.n.as_int() as u8).to_le_bytes())?;

        match &self.t {
            EnumOutsideOfIfTEnum::ZERO => {}
            EnumOutsideOfIfTEnum::ONE => {}
            EnumOutsideOfIfTEnum::TWO => {}
            EnumOutsideOfIfTEnum::THREE => {}
            EnumOutsideOfIfTEnum::FOUR => {}
            EnumOutsideOfIfTEnum::FIVE => {}
            EnumOutsideOfIfTEnum::SIX => {}
            EnumOutsideOfIfTEnum::REST => {}
        }

        Ok(())
    }
}

impl EnumOutsideOfIf {
    #[cfg(feature = "sync")]
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => EnumOutsideOfIfTEnum::ZERO,
            TEnum::ONE => EnumOutsideOfIfTEnum::ONE,
            TEnum::TWO => EnumOutsideOfIfTEnum::TWO,
            TEnum::THREE => EnumOutsideOfIfTEnum::THREE,
            TEnum::FOUR => EnumOutsideOfIfTEnum::FOUR,
            TEnum::FIVE => EnumOutsideOfIfTEnum::FIVE,
            TEnum::SIX => EnumOutsideOfIfTEnum::SIX,
            TEnum::REST => EnumOutsideOfIfTEnum::REST,
        };

        Ok(Self {
            t: t_if,
            n: n_if,
        })
    }

    #[cfg(feature = "tokio")]
    pub(crate) async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => EnumOutsideOfIfTEnum::ZERO,
            TEnum::ONE => EnumOutsideOfIfTEnum::ONE,
            TEnum::TWO => EnumOutsideOfIfTEnum::TWO,
            TEnum::THREE => EnumOutsideOfIfTEnum::THREE,
            TEnum::FOUR => EnumOutsideOfIfTEnum::FOUR,
            TEnum::FIVE => EnumOutsideOfIfTEnum::FIVE,
            TEnum::SIX => EnumOutsideOfIfTEnum::SIX,
            TEnum::REST => EnumOutsideOfIfTEnum::REST,
        };

        Ok(Self {
            t: t_if,
            n: n_if,
        })
    }

    #[cfg(feature = "async-std")]
    pub(crate) async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => EnumOutsideOfIfTEnum::ZERO,
            TEnum::ONE => EnumOutsideOfIfTEnum::ONE,
            TEnum::TWO => EnumOutsideOfIfTEnum::TWO,
            TEnum::THREE => EnumOutsideOfIfTEnum::THREE,
            TEnum::FOUR => EnumOutsideOfIfTEnum::FOUR,
            TEnum::FIVE => EnumOutsideOfIfTEnum::FIVE,
            TEnum::SIX => EnumOutsideOfIfTEnum::SIX,
            TEnum::REST => EnumOutsideOfIfTEnum::REST,
        };

        Ok(Self {
            t: t_if,
            n: n_if,
        })
    }

}

impl EnumOutsideOfIf {
    pub fn size(&self) -> usize {
        0
        + self.t.size() // t: EnumOutsideOfIfTEnum
        + self.n.size() // n: EnumOutsideOfIfNestedEnum
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumOutsideOfIfTEnum {
    ZERO,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE,
    SIX,
    REST,
}

impl Default for EnumOutsideOfIfTEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO
    }
}

impl EnumOutsideOfIfTEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO => 0,
            Self::ONE => 1,
            Self::TWO => 2,
            Self::THREE => 3,
            Self::FOUR => 4,
            Self::FIVE => 5,
            Self::SIX => 6,
            Self::REST => 7,
        }
    }

}

impl EnumOutsideOfIfTEnum {
    pub fn size(&self) -> usize {
        match self {
            Self::ZERO => {
                1
            }
            Self::ONE => {
                1
            }
            Self::TWO => {
                1
            }
            Self::THREE => {
                1
            }
            Self::FOUR => {
                1
            }
            Self::FIVE => {
                1
            }
            Self::SIX => {
                1
            }
            Self::REST => {
                1
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumOutsideOfIfNestedEnum {
    NESTED {
        nested: u8,
    },
    NOT_NESTED,
}

impl Default for EnumOutsideOfIfNestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            nested: Default::default(),
        }
    }
}

impl EnumOutsideOfIfNestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::NESTED { .. } => 0,
            Self::NOT_NESTED => 1,
        }
    }

}

impl EnumOutsideOfIfNestedEnum {
    pub fn size(&self) -> usize {
        match self {
            Self::NESTED {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

