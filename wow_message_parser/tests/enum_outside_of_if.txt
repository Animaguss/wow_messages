use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{NestedEnum, NestedEnumError};
use crate::world::v1::v12::{TEnum, TEnumError};
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct EnumOutsideOfIf {
    pub t: EnumOutsideOfIfTEnum,
    pub n: EnumOutsideOfIfNestedEnum,
}

impl ReadableAndWritable for EnumOutsideOfIf {
    type Error = EnumOutsideOfIfError;

    #[cfg(feature = "sync")]
    fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, Self::Error> {
        // t: TEnum
        let t = TEnum::read(r)?;

        // n: NestedEnum
        let n = NestedEnum::read(r)?;

        let t_if = match t {
            TEnum::ZERO => EnumOutsideOfIfTEnum::ZERO,
            TEnum::ONE => EnumOutsideOfIfTEnum::ONE,
            TEnum::TWO => EnumOutsideOfIfTEnum::TWO,
            TEnum::THREE => EnumOutsideOfIfTEnum::THREE,
            TEnum::FOUR => EnumOutsideOfIfTEnum::FOUR,
            TEnum::FIVE => EnumOutsideOfIfTEnum::FIVE,
            TEnum::SIX => EnumOutsideOfIfTEnum::SIX,
            TEnum::REST => EnumOutsideOfIfTEnum::REST,
        };

        Ok(Self {
            t: t_if,
            n: n_if,
        })
    }

    #[cfg(feature = "sync")]
    fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // t: TEnum
        self.t.write(w)?;

        // n: NestedEnum
        self.n.write(w)?;

        match &self.t {
            EnumOutsideOfIfTEnum::ZERO {
            } => {
                match &self.n {
                    EnumOutsideOfIfNestedEnum::NESTED {
                        nested,
                    } => {
                        // nested: u8
                        w.write_all(&nested.to_le_bytes())?;

                    }
                    EnumOutsideOfIfNestedEnum::NOT_NESTED => {}
                }

            }
            EnumOutsideOfIfTEnum::ONE => {}
            EnumOutsideOfIfTEnum::TWO => {}
            EnumOutsideOfIfTEnum::THREE => {}
            EnumOutsideOfIfTEnum::FOUR => {}
            EnumOutsideOfIfTEnum::FIVE => {}
            EnumOutsideOfIfTEnum::SIX => {}
            EnumOutsideOfIfTEnum::REST => {}
        }

        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            let t = TEnum::tokio_read(r).await?;

            // n: NestedEnum
            let n = NestedEnum::tokio_read(r).await?;

            let t_if = match t {
                TEnum::ZERO => EnumOutsideOfIfTEnum::ZERO,
                TEnum::ONE => EnumOutsideOfIfTEnum::ONE,
                TEnum::TWO => EnumOutsideOfIfTEnum::TWO,
                TEnum::THREE => EnumOutsideOfIfTEnum::THREE,
                TEnum::FOUR => EnumOutsideOfIfTEnum::FOUR,
                TEnum::FIVE => EnumOutsideOfIfTEnum::FIVE,
                TEnum::SIX => EnumOutsideOfIfTEnum::SIX,
                TEnum::REST => EnumOutsideOfIfTEnum::REST,
            };

            Ok(Self {
                t: t_if,
                n: n_if,
            })
        })
    }

    #[cfg(feature = "async_tokio")]
    fn tokio_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            self.t.tokio_write(w).await?;

            // n: NestedEnum
            self.n.tokio_write(w).await?;

            match &self.t {
                EnumOutsideOfIfTEnum::ZERO {
                } => {
                    match &self.n {
                        EnumOutsideOfIfNestedEnum::NESTED {
                            nested,
                        } => {
                            // nested: u8
                            w.write_all(&nested.to_le_bytes()).await?;

                        }
                        EnumOutsideOfIfNestedEnum::NOT_NESTED => {}
                    }

                }
                EnumOutsideOfIfTEnum::ONE => {}
                EnumOutsideOfIfTEnum::TWO => {}
                EnumOutsideOfIfTEnum::THREE => {}
                EnumOutsideOfIfTEnum::FOUR => {}
                EnumOutsideOfIfTEnum::FIVE => {}
                EnumOutsideOfIfTEnum::SIX => {}
                EnumOutsideOfIfTEnum::REST => {}
            }

            Ok(())
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_read<'life0, 'async_trait, R>(
        r: &'life0 mut R,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            let t = TEnum::astd_read(r).await?;

            // n: NestedEnum
            let n = NestedEnum::astd_read(r).await?;

            let t_if = match t {
                TEnum::ZERO => EnumOutsideOfIfTEnum::ZERO,
                TEnum::ONE => EnumOutsideOfIfTEnum::ONE,
                TEnum::TWO => EnumOutsideOfIfTEnum::TWO,
                TEnum::THREE => EnumOutsideOfIfTEnum::THREE,
                TEnum::FOUR => EnumOutsideOfIfTEnum::FOUR,
                TEnum::FIVE => EnumOutsideOfIfTEnum::FIVE,
                TEnum::SIX => EnumOutsideOfIfTEnum::SIX,
                TEnum::REST => EnumOutsideOfIfTEnum::REST,
            };

            Ok(Self {
                t: t_if,
                n: n_if,
            })
        })
    }

    #[cfg(feature = "async_std")]
    fn astd_write<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // t: TEnum
            self.t.astd_write(w).await?;

            // n: NestedEnum
            self.n.astd_write(w).await?;

            match &self.t {
                EnumOutsideOfIfTEnum::ZERO {
                } => {
                    match &self.n {
                        EnumOutsideOfIfNestedEnum::NESTED {
                            nested,
                        } => {
                            // nested: u8
                            w.write_all(&nested.to_le_bytes()).await?;

                        }
                        EnumOutsideOfIfNestedEnum::NOT_NESTED => {}
                    }

                }
                EnumOutsideOfIfTEnum::ONE => {}
                EnumOutsideOfIfTEnum::TWO => {}
                EnumOutsideOfIfTEnum::THREE => {}
                EnumOutsideOfIfTEnum::FOUR => {}
                EnumOutsideOfIfTEnum::FIVE => {}
                EnumOutsideOfIfTEnum::SIX => {}
                EnumOutsideOfIfTEnum::REST => {}
            }

            Ok(())
        })
    }

}

impl VariableSized for EnumOutsideOfIf {
    fn size(&self) -> usize {
        0
        + self.t.size() // t: EnumOutsideOfIfTEnum
        + self.n.size() // n: EnumOutsideOfIfNestedEnum
    }
}

impl MaximumPossibleSized for EnumOutsideOfIf {
    fn maximum_possible_size() -> usize {
        0
        + 2 // t: EnumOutsideOfIfTEnum
        + 1 // n: EnumOutsideOfIfNestedEnum
    }
}

#[derive(Debug)]
pub enum EnumOutsideOfIfError {
    Io(std::io::Error),
    NestedEnum(NestedEnumError),
    TEnum(TEnumError),
}

impl std::error::Error for EnumOutsideOfIfError {}
impl std::fmt::Display for EnumOutsideOfIfError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::NestedEnum(i) => i.fmt(f),
            Self::TEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for EnumOutsideOfIfError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<NestedEnumError> for EnumOutsideOfIfError {
    fn from(e: NestedEnumError) -> Self {
        Self::NestedEnum(e)
    }
}

impl From<TEnumError> for EnumOutsideOfIfError {
    fn from(e: TEnumError) -> Self {
        Self::TEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumOutsideOfIfTEnum {
    ZERO,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE,
    SIX,
    REST,
}

impl From<&TEnum> for EnumOutsideOfIfTEnum {
    fn from(e: &TEnum) -> Self {
        match &e {
            TEnum::ZERO => Self::ZERO,
            TEnum::ONE => Self::ONE,
            TEnum::TWO => Self::TWO,
            TEnum::THREE => Self::THREE,
            TEnum::FOUR => Self::FOUR,
            TEnum::FIVE => Self::FIVE,
            TEnum::SIX => Self::SIX,
            TEnum::REST => Self::REST,
        }
    }
}

impl From<&EnumOutsideOfIfTEnum> for TEnum {
    fn from(v: &EnumOutsideOfIfTEnum) -> Self {
        match &v {
            EnumOutsideOfIfTEnum::ZERO => Self::ZERO,
            EnumOutsideOfIfTEnum::ONE => Self::ONE,
            EnumOutsideOfIfTEnum::TWO => Self::TWO,
            EnumOutsideOfIfTEnum::THREE => Self::THREE,
            EnumOutsideOfIfTEnum::FOUR => Self::FOUR,
            EnumOutsideOfIfTEnum::FIVE => Self::FIVE,
            EnumOutsideOfIfTEnum::SIX => Self::SIX,
            EnumOutsideOfIfTEnum::REST => Self::REST,
        }
    }
}

impl Default for EnumOutsideOfIfTEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO
    }
}

impl EnumOutsideOfIfTEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: TEnum = self.into();
        a.write(w)?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: TEnum = self.into();
        a.tokio_write(w).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: TEnum = self.into();
        a.astd_write(w).await?;
        Ok(())
    }

    pub(crate) fn as_int(&self) -> u8 {
        let a: TEnum = self.into();
        a.as_int() as u8
    }

}

impl VariableSized for EnumOutsideOfIfTEnum {
    fn size(&self) -> usize {
        match self {
            Self::ZERO => {
                1
            }
            Self::ONE => {
                1
            }
            Self::TWO => {
                1
            }
            Self::THREE => {
                1
            }
            Self::FOUR => {
                1
            }
            Self::FIVE => {
                1
            }
            Self::SIX => {
                1
            }
            Self::REST => {
                1
            }
        }
    }
}

impl MaximumPossibleSized for EnumOutsideOfIfTEnum {
    fn maximum_possible_size() -> usize {
        2
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumOutsideOfIfNestedEnum {
    NESTED {
        nested: u8,
    },
    NOT_NESTED,
}

impl From<&NestedEnum> for EnumOutsideOfIfNestedEnum {
    fn from(e: &NestedEnum) -> Self {
        match &e {
            NestedEnum::NESTED => Self::NESTED {
                nested: Default::default(),
            },
            NestedEnum::NOT_NESTED => Self::NOT_NESTED,
        }
    }
}

impl From<&EnumOutsideOfIfNestedEnum> for NestedEnum {
    fn from(v: &EnumOutsideOfIfNestedEnum) -> Self {
        match &v {
            EnumOutsideOfIfNestedEnum::NESTED { .. } => Self::NESTED,
            EnumOutsideOfIfNestedEnum::NOT_NESTED => Self::NOT_NESTED,
        }
    }
}

impl Default for EnumOutsideOfIfNestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            nested: Default::default(),
        }
    }
}

impl EnumOutsideOfIfNestedEnum {
    #[cfg(feature = "sync")]
    pub fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: NestedEnum = self.into();
        a.write(w)?;
        Ok(())
    }

    #[cfg(feature = "async_tokio")]
    pub async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: NestedEnum = self.into();
        a.tokio_write(w).await?;
        Ok(())
    }

    #[cfg(feature = "async_std")]
    pub async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        let a: NestedEnum = self.into();
        a.astd_write(w).await?;
        Ok(())
    }

    pub(crate) fn as_int(&self) -> u8 {
        let a: NestedEnum = self.into();
        a.as_int() as u8
    }

}

impl VariableSized for EnumOutsideOfIfNestedEnum {
    fn size(&self) -> usize {
        match self {
            Self::NESTED {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

impl MaximumPossibleSized for EnumOutsideOfIfNestedEnum {
    fn maximum_possible_size() -> usize {
        1
    }
}

