use std::convert::{TryFrom, TryInto};
use crate::world::version_1_12::NestedEnum;
use crate::world::version_1_12::TEnum;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:270`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L270):
/// ```text
/// struct EnumOutsideOfIf {
///     TEnum t;
///     NestedEnum n;
///     if (t == ZERO) {
///         if (n == NESTED) {
///             u8 nested;
///         }
///     }
/// }
/// ```
pub struct EnumOutsideOfIf {
    pub t: EnumOutsideOfIf_TEnum,
    pub n: EnumOutsideOfIf_NestedEnum,
}

impl EnumOutsideOfIf {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.t.as_int() as u8).to_le_bytes())?;

        // n: NestedEnum
        w.write_all(&(self.n.as_int() as u8).to_le_bytes())?;

        match &self.t {
            EnumOutsideOfIf_TEnum::ZERO => {}
            EnumOutsideOfIf_TEnum::ONE => {}
            EnumOutsideOfIf_TEnum::TWO => {}
            EnumOutsideOfIf_TEnum::THREE => {}
            EnumOutsideOfIf_TEnum::FOUR => {}
            EnumOutsideOfIf_TEnum::FIVE => {}
            EnumOutsideOfIf_TEnum::SIX => {}
            EnumOutsideOfIf_TEnum::REST => {}
        }

        Ok(())
    }
}

impl EnumOutsideOfIf {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::ZERO => EnumOutsideOfIf_TEnum::ZERO,
            TEnum::ONE => EnumOutsideOfIf_TEnum::ONE,
            TEnum::TWO => EnumOutsideOfIf_TEnum::TWO,
            TEnum::THREE => EnumOutsideOfIf_TEnum::THREE,
            TEnum::FOUR => EnumOutsideOfIf_TEnum::FOUR,
            TEnum::FIVE => EnumOutsideOfIf_TEnum::FIVE,
            TEnum::SIX => EnumOutsideOfIf_TEnum::SIX,
            TEnum::REST => EnumOutsideOfIf_TEnum::REST,
        };

        Ok(Self {
            t: t_if,
            n: n_if,
        })
    }

}

impl EnumOutsideOfIf {
    pub(crate) fn size(&self) -> usize {
        self.t.size() // t: EnumOutsideOfIf_TEnum
        + self.n.size() // n: EnumOutsideOfIf_NestedEnum
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumOutsideOfIf_TEnum {
    ZERO,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE,
    SIX,
    REST,
}

impl Default for EnumOutsideOfIf_TEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO
    }
}

impl EnumOutsideOfIf_TEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO => 0,
            Self::ONE => 1,
            Self::TWO => 2,
            Self::THREE => 3,
            Self::FOUR => 4,
            Self::FIVE => 5,
            Self::SIX => 6,
            Self::REST => 7,
        }
    }

}

impl EnumOutsideOfIf_TEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::ZERO => {
                1
            }
            Self::ONE => {
                1
            }
            Self::TWO => {
                1
            }
            Self::THREE => {
                1
            }
            Self::FOUR => {
                1
            }
            Self::FIVE => {
                1
            }
            Self::SIX => {
                1
            }
            Self::REST => {
                1
            }
        }
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum EnumOutsideOfIf_NestedEnum {
    NESTED {
        nested: u8,
    },
    NOT_NESTED,
}

impl Default for EnumOutsideOfIf_NestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NESTED {
            nested: Default::default(),
        }
    }
}

impl EnumOutsideOfIf_NestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::NESTED { .. } => 0,
            Self::NOT_NESTED => 1,
        }
    }

}

impl EnumOutsideOfIf_NestedEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::NESTED {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NOT_NESTED => {
                1
            }
        }
    }
}

