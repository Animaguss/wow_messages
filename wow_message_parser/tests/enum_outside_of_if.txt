use crate::vanilla::NestedEnum;
use crate::vanilla::TEnum;
use std::io::{Write, Read};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:270`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L270):
/// ```text
/// struct EnumOutsideOfIf {
///     TEnum t;
///     NestedEnum n;
///     if (t == ZERO) {
///         if (n == NESTED) {
///             u8 nested;
///         }
///     }
/// }
/// ```
pub struct EnumOutsideOfIf {
    pub t: EnumOutsideOfIf_TEnum,
    pub n: EnumOutsideOfIf_NestedEnum,
}

impl EnumOutsideOfIf {
    pub(crate) fn write_into_vec(&self, w: &mut impl std::io::Write) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&u8::from(self.t.as_int()).to_le_bytes())?;

        // n: NestedEnum
        w.write_all(&u8::from(self.n.as_int()).to_le_bytes())?;

        match &self.t {
            EnumOutsideOfIf_TEnum::Zero => {}
            EnumOutsideOfIf_TEnum::One => {}
            EnumOutsideOfIf_TEnum::Two => {}
            EnumOutsideOfIf_TEnum::Three => {}
            EnumOutsideOfIf_TEnum::Four => {}
            EnumOutsideOfIf_TEnum::Five => {}
            EnumOutsideOfIf_TEnum::Six => {}
            EnumOutsideOfIf_TEnum::Rest => {}
        }

        Ok(())
    }
}

impl EnumOutsideOfIf {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // t: TEnum
        let t: TEnum = crate::util::read_u8_le(r)?.try_into()?;

        // n: NestedEnum
        let n: NestedEnum = crate::util::read_u8_le(r)?.try_into()?;

        let t_if = match t {
            TEnum::Zero => EnumOutsideOfIf_TEnum::Zero,
            TEnum::One => EnumOutsideOfIf_TEnum::One,
            TEnum::Two => EnumOutsideOfIf_TEnum::Two,
            TEnum::Three => EnumOutsideOfIf_TEnum::Three,
            TEnum::Four => EnumOutsideOfIf_TEnum::Four,
            TEnum::Five => EnumOutsideOfIf_TEnum::Five,
            TEnum::Six => EnumOutsideOfIf_TEnum::Six,
            TEnum::Rest => EnumOutsideOfIf_TEnum::Rest,
        };

        Ok(Self {
            t: t_if,
            n: n_if,
        })
    }

}

impl EnumOutsideOfIf {
    pub(crate) fn size(&self) -> usize {
        self.t.size() // t: EnumOutsideOfIf_TEnum
        + self.n.size() // n: EnumOutsideOfIf_NestedEnum
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum EnumOutsideOfIf_TEnum {
    Zero,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Rest,
}

impl Default for EnumOutsideOfIf_TEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::Zero
    }
}

impl EnumOutsideOfIf_TEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero => 0,
            Self::One => 1,
            Self::Two => 2,
            Self::Three => 3,
            Self::Four => 4,
            Self::Five => 5,
            Self::Six => 6,
            Self::Rest => 7,
        }
    }

}

impl EnumOutsideOfIf_TEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Zero => {
                1
            }
            Self::One => {
                1
            }
            Self::Two => {
                1
            }
            Self::Three => {
                1
            }
            Self::Four => {
                1
            }
            Self::Five => {
                1
            }
            Self::Six => {
                1
            }
            Self::Rest => {
                1
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum EnumOutsideOfIf_NestedEnum {
    Nested {
        nested: u8,
    },
    NotNested,
}

impl Default for EnumOutsideOfIf_NestedEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::NotNested
    }
}

impl EnumOutsideOfIf_NestedEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Nested { .. } => 0,
            Self::NotNested => 1,
        }
    }

}

impl EnumOutsideOfIf_NestedEnum {
    pub(crate) fn size(&self) -> usize {
        match self {
            Self::Nested {
                nested,
            } => {
                1
                + 1 // nested: u8
            }
            Self::NotNested => {
                1
            }
        }
    }
}

