use std::convert::{TryFrom, TryInto};
use crate::Guid;
use crate::{ConstantSized, MaximumPossibleSized, ReadableAndWritable, VariableSized};
#[cfg(feature = "async_tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async_std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct PackedGuidAndGuid {
    pub packed: Guid,
    pub guid: Guid,
    pub static_packed: [Guid; 10],
    pub static_guid: [Guid; 10],
    pub variable_packed: Vec<Guid>,
    pub variable_guid: Vec<Guid>,
}

impl PackedGuidAndGuid {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, std::io::Error> {
        // packed: PackedGuid
        let packed = Guid::read_packed(r)?;

        // guid: Guid
        let guid = Guid::read(r)?;

        // static_packed: PackedGuid[10]
        let mut static_packed = Vec::with_capacity(10 as usize);
        for i in 0..10 {
            static_packed[i] = Guid::read_packed(r)?;
        }
        let static_packed = static_packed.try_into().unwrap();

        // static_guid: Guid[10]
        let mut static_guid = Vec::with_capacity(10 as usize);
        for i in 0..10 {
            static_guid[i] = Guid::read(r)?;
        }
        let static_guid = static_guid.try_into().unwrap();

        // basic1: u8
        let basic1 = crate::util::read_u8_le(r)?;

        // basic2: u8
        let basic2 = crate::util::read_u8_le(r)?;

        // variable_packed: PackedGuid[basic1]
        let mut variable_packed = Vec::with_capacity(basic1 as usize);
        for i in 0..basic1 {
            variable_packed.push(Guid::read_packed(r)?);
        }

        // variable_guid: Guid[basic2]
        let mut variable_guid = Vec::with_capacity(basic2 as usize);
        for i in 0..basic2 {
            variable_guid.push(Guid::read(r)?);
        }

        Ok(Self {
            packed,
            guid,
            static_packed,
            static_guid,
            variable_packed,
            variable_guid,
        })
    }

    pub(crate) fn write<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // packed: PackedGuid
        self.packed.write_packed(w)?;

        // guid: Guid
        self.guid.write(w)?;

        // static_packed: PackedGuid[10]
        for i in self.static_packed.iter() {
            i.write_packed(w)?;
        }

        // static_guid: Guid[10]
        for i in self.static_guid.iter() {
            i.write(w)?;
        }

        // basic1: u8
        w.write_all(&(self.variable_packed.len() as u8).to_le_bytes())?;

        // basic2: u8
        w.write_all(&(self.variable_guid.len() as u8).to_le_bytes())?;

        // variable_packed: PackedGuid[basic1]
        for i in self.variable_packed.iter() {
            i.write_packed(w)?;
        }

        // variable_guid: Guid[basic2]
        for i in self.variable_guid.iter() {
            i.write(w)?;
        }

        Ok(())
    }

    pub(crate) async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, std::io::Error> {
        // packed: PackedGuid
        let packed = Guid::tokio_read_packed(r).await?;

        // guid: Guid
        let guid = Guid::tokio_read(r).await?;

        // static_packed: PackedGuid[10]
        let mut static_packed = Vec::with_capacity(10 as usize);
        for i in 0..10 {
            static_packed[i] = Guid::tokio_read_packed(r).await?;
        }
        let static_packed = static_packed.try_into().unwrap();

        // static_guid: Guid[10]
        let mut static_guid = Vec::with_capacity(10 as usize);
        for i in 0..10 {
            static_guid[i] = Guid::tokio_read(r).await?;
        }
        let static_guid = static_guid.try_into().unwrap();

        // basic1: u8
        let basic1 = crate::util::tokio_read_u8_le(r).await?;

        // basic2: u8
        let basic2 = crate::util::tokio_read_u8_le(r).await?;

        // variable_packed: PackedGuid[basic1]
        let mut variable_packed = Vec::with_capacity(basic1 as usize);
        for i in 0..basic1 {
            variable_packed.push(Guid::tokio_read_packed(r).await?);
        }

        // variable_guid: Guid[basic2]
        let mut variable_guid = Vec::with_capacity(basic2 as usize);
        for i in 0..basic2 {
            variable_guid.push(Guid::tokio_read(r).await?);
        }

        Ok(Self {
            packed,
            guid,
            static_packed,
            static_guid,
            variable_packed,
            variable_guid,
        })
    }

    pub(crate) async fn tokio_write<W: AsyncWriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // packed: PackedGuid
        self.packed.tokio_write_packed(w).await?;

        // guid: Guid
        self.guid.tokio_write(w).await?;

        // static_packed: PackedGuid[10]
        for i in self.static_packed.iter() {
            i.tokio_write_packed(w).await?;
        }

        // static_guid: Guid[10]
        for i in self.static_guid.iter() {
            i.tokio_write(w).await?;
        }

        // basic1: u8
        w.write_all(&(self.variable_packed.len() as u8).to_le_bytes()).await?;

        // basic2: u8
        w.write_all(&(self.variable_guid.len() as u8).to_le_bytes()).await?;

        // variable_packed: PackedGuid[basic1]
        for i in self.variable_packed.iter() {
            i.tokio_write_packed(w).await?;
        }

        // variable_guid: Guid[basic2]
        for i in self.variable_guid.iter() {
            i.tokio_write(w).await?;
        }

        Ok(())
    }

    pub(crate) async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, std::io::Error> {
        // packed: PackedGuid
        let packed = Guid::astd_read_packed(r).await?;

        // guid: Guid
        let guid = Guid::astd_read(r).await?;

        // static_packed: PackedGuid[10]
        let mut static_packed = Vec::with_capacity(10 as usize);
        for i in 0..10 {
            static_packed[i] = Guid::astd_read_packed(r).await?;
        }
        let static_packed = static_packed.try_into().unwrap();

        // static_guid: Guid[10]
        let mut static_guid = Vec::with_capacity(10 as usize);
        for i in 0..10 {
            static_guid[i] = Guid::astd_read(r).await?;
        }
        let static_guid = static_guid.try_into().unwrap();

        // basic1: u8
        let basic1 = crate::util::astd_read_u8_le(r).await?;

        // basic2: u8
        let basic2 = crate::util::astd_read_u8_le(r).await?;

        // variable_packed: PackedGuid[basic1]
        let mut variable_packed = Vec::with_capacity(basic1 as usize);
        for i in 0..basic1 {
            variable_packed.push(Guid::astd_read_packed(r).await?);
        }

        // variable_guid: Guid[basic2]
        let mut variable_guid = Vec::with_capacity(basic2 as usize);
        for i in 0..basic2 {
            variable_guid.push(Guid::astd_read(r).await?);
        }

        Ok(Self {
            packed,
            guid,
            static_packed,
            static_guid,
            variable_packed,
            variable_guid,
        })
    }

    pub(crate) async fn astd_write<W: WriteExt + Unpin + Send>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // packed: PackedGuid
        self.packed.astd_write_packed(w).await?;

        // guid: Guid
        self.guid.astd_write(w).await?;

        // static_packed: PackedGuid[10]
        for i in self.static_packed.iter() {
            i.astd_write_packed(w).await?;
        }

        // static_guid: Guid[10]
        for i in self.static_guid.iter() {
            i.astd_write(w).await?;
        }

        // basic1: u8
        w.write_all(&(self.variable_packed.len() as u8).to_le_bytes()).await?;

        // basic2: u8
        w.write_all(&(self.variable_guid.len() as u8).to_le_bytes()).await?;

        // variable_packed: PackedGuid[basic1]
        for i in self.variable_packed.iter() {
            i.astd_write_packed(w).await?;
        }

        // variable_guid: Guid[basic2]
        for i in self.variable_guid.iter() {
            i.astd_write(w).await?;
        }

        Ok(())
    }

}

impl VariableSized for PackedGuidAndGuid {
    fn size(&self) -> usize {
        0
        + self.packed.size() // packed: Guid
        + 8 // guid: Guid
        + self.static_packed.iter().fold(0, |acc, x| acc + x.size()) // static_packed: PackedGuid[10]
        + self.static_guid.iter().fold(0, |acc, _| acc + 8) // static_guid: Guid[10]
        + 1 // basic1: u8
        + 1 // basic2: u8
        + self.variable_packed.iter().fold(0, |acc, x| acc + x.size()) // variable_packed: PackedGuid[basic1]
        + self.variable_guid.iter().fold(0, |acc, _| acc + 8) // variable_guid: Guid[basic2]
    }
}

impl MaximumPossibleSized for PackedGuidAndGuid {
    fn maximum_possible_size() -> usize {
        0
        + 9 // packed: Guid
        + 8 // guid: Guid
        + 90 // static_packed: PackedGuid[10]
        + 80 // static_guid: Guid[10]
        + 1 // basic1: u8
        + 1 // basic2: u8
        + 2304 // variable_packed: PackedGuid[basic1]
        + 2048 // variable_guid: Guid[basic2]
    }
}

