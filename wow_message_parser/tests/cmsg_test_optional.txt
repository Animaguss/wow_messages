use std::convert::{TryFrom, TryInto};
use crate::{ClientMessageWrite, MessageBody};
use wow_srp::header_crypto::Encrypter;
#[cfg(feature = "tokio")]
use tokio::io::{AsyncReadExt, AsyncWriteExt};
#[cfg(feature = "async-std")]
use async_std::io::{ReadExt, WriteExt};

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CMSG_TEST_OPTIONAL {
    pub c_string: String,
    pub b_u8: u8,
    pub server: Option<CMSG_TEST_OPTIONALserver>,
}

impl ClientMessageWrite for CMSG_TEST_OPTIONAL {}

impl MessageBody for CMSG_TEST_OPTIONAL {
    const OPCODE: u16 = 0x1137;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        self.size() as u16
    }

    type Error = CMSG_TEST_OPTIONALError;

    #[cfg(feature = "sync")]
    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, Self::Error> {
        // c_string: CString
        let c_string = crate::util::read_c_string_to_vec(r)?;
        let c_string = String::from_utf8(c_string)?;

        // b_u8: u8
        let b_u8 = crate::util::read_u8_le(r)?;

        // optional server
        let current_size = {
            0
            + c_string.len() + 1 // c_string: CString
            + 1 // b_u8: u8
        };
        let server = if current_size < body_size as usize {
            // optional_u8: u8
            let optional_u8 = crate::util::read_u8_le(r)?;

            Some(CMSG_TEST_OPTIONALserver {
                optional_u8,
            })
        } else {
            None
        };

        Ok(Self {
            c_string,
            b_u8,
            server,
        })
    }

    #[cfg(feature = "sync")]
    fn write_body<W: std::io::Write>(&self, w: &mut W) -> std::result::Result<(), std::io::Error> {
        // c_string: CString
        w.write_all(self.c_string.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // b_u8: u8
        w.write_all(&self.b_u8.to_le_bytes())?;

        // optional server
        if let Some(v) = &self.server {
            // optional_u8: u8
            w.write_all(&v.optional_u8.to_le_bytes())?;

        }

        Ok(())
    }

    #[cfg(feature = "tokio")]
    fn tokio_read_body<'life0, 'async_trait, R>(
        r: &'life0 mut R,
        body_size: u32,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + AsyncReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // c_string: CString
            let c_string = crate::util::tokio_read_c_string_to_vec(r).await?;
            let c_string = String::from_utf8(c_string)?;

            // b_u8: u8
            let b_u8 = crate::util::tokio_read_u8_le(r).await?;

            // optional server
            let current_size = {
                0
                + c_string.len() + 1 // c_string: CString
                + 1 // b_u8: u8
            };
            let server = if current_size < body_size as usize {
                // optional_u8: u8
                let optional_u8 = crate::util::tokio_read_u8_le(r).await?;

                Some(CMSG_TEST_OPTIONALserver {
                    optional_u8,
                })
            } else {
                None
            };

            Ok(Self {
                c_string,
                b_u8,
                server,
            })
        })
    }

    #[cfg(feature = "tokio")]
    fn tokio_write_body<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + AsyncWriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // c_string: CString
            w.write_all(self.c_string.as_bytes()).await?;
            // Null terminator
            w.write_all(&[0]).await?;

            // b_u8: u8
            w.write_all(&self.b_u8.to_le_bytes()).await?;

            // optional server
            if let Some(v) = &self.server {
                // optional_u8: u8
                w.write_all(&v.optional_u8.to_le_bytes()).await?;

            }

            Ok(())
        })
    }

    #[cfg(feature = "async-std")]
    fn astd_read_body<'life0, 'async_trait, R>(
        r: &'life0 mut R,
        body_size: u32,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<Self, Self::Error>>
            + Send + 'async_trait,
    >> where
        R: 'async_trait + ReadExt + Unpin + Send,
        'life0: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // c_string: CString
            let c_string = crate::util::astd_read_c_string_to_vec(r).await?;
            let c_string = String::from_utf8(c_string)?;

            // b_u8: u8
            let b_u8 = crate::util::astd_read_u8_le(r).await?;

            // optional server
            let current_size = {
                0
                + c_string.len() + 1 // c_string: CString
                + 1 // b_u8: u8
            };
            let server = if current_size < body_size as usize {
                // optional_u8: u8
                let optional_u8 = crate::util::astd_read_u8_le(r).await?;

                Some(CMSG_TEST_OPTIONALserver {
                    optional_u8,
                })
            } else {
                None
            };

            Ok(Self {
                c_string,
                b_u8,
                server,
            })
        })
    }

    #[cfg(feature = "async-std")]
    fn astd_write_body<'life0, 'life1, 'async_trait, W>(
        &'life0 self,
        w: &'life1 mut W,
    ) -> core::pin::Pin<Box<
        dyn core::future::Future<Output = std::result::Result<(), std::io::Error>>
            + Send + 'async_trait
    >> where
        W: 'async_trait + WriteExt + Unpin + Send,
        'life0: 'async_trait,
        'life1: 'async_trait,
        Self: 'async_trait,
     {
        Box::pin(async move {
            // c_string: CString
            w.write_all(self.c_string.as_bytes()).await?;
            // Null terminator
            w.write_all(&[0]).await?;

            // b_u8: u8
            w.write_all(&self.b_u8.to_le_bytes()).await?;

            // optional server
            if let Some(v) = &self.server {
                // optional_u8: u8
                w.write_all(&v.optional_u8.to_le_bytes()).await?;

            }

            Ok(())
        })
    }

}

impl CMSG_TEST_OPTIONAL {
    pub fn size(&self) -> usize {
        0
        + self.c_string.len() + 1 // c_string: CString
        + 1 // b_u8: u8
        + if let Some(server) = &self.server {
            0
            + 1 // optional_u8: u8
        } else {
            0
        }
    }
}

#[derive(Debug)]
pub enum CMSG_TEST_OPTIONALError {
    Io(std::io::Error),
    String(std::string::FromUtf8Error),
}

impl std::error::Error for CMSG_TEST_OPTIONALError {}
impl std::fmt::Display for CMSG_TEST_OPTIONALError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::String(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for CMSG_TEST_OPTIONALError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<std::string::FromUtf8Error> for CMSG_TEST_OPTIONALError {
    fn from(e: std::string::FromUtf8Error) -> Self {
        Self::String(e)
    }
}

#[derive(Debug, Clone, PartialEq, Default)]
pub struct CMSG_TEST_OPTIONALserver {
    pub optional_u8: u8,
}

impl CMSG_TEST_OPTIONALserver {
    pub(crate) fn size(&self) -> usize {
        1 // optional_u8: u8
    }

}

