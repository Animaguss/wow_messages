use std::io::{Read, Write};

#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:251`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L251):
/// ```text
/// cmsg CMSG_TEST_OPTIONAL = 0x1137 {
///     CString c_string;
///     u8 b_u8;
///     optional server {
///         u8 optional_u8;
///     }
/// }
/// ```
pub struct CMSG_TEST_OPTIONAL {
    pub c_string: String,
    pub b_u8: u8,
    pub server: Option<CMSG_TEST_OPTIONAL_server>,
}

#[cfg(feature = "print-testcase")]
impl CMSG_TEST_OPTIONAL {
    pub fn to_test_case_string(&self) -> String {
        use std::fmt::Write;
        use crate::traits::Message;

        let mut s = String::new();

        writeln!(s, "test CMSG_TEST_OPTIONAL {{").unwrap();
        // Members
        writeln!(s, "    c_string = \"{}\";", self.c_string).unwrap();
        writeln!(s, "    b_u8 = {};", self.b_u8).unwrap();
        if let Some(server) = &self.server {
            writeln!(s, "    optional_u8 = {};", server.optional_u8).unwrap();
        }

        writeln!(s, "}} [").unwrap();

        // Size/Opcode
        let [a, b] = (u16::try_from(self.size() + 6).unwrap()).to_be_bytes();
        writeln!(s, "    {a:#04X}, {b:#04X}, /* size */").unwrap();
        let [a, b] = 4407_u16.to_le_bytes();
        writeln!(s, "    {a:#04X}, {b:#04X}, /* opcode */").unwrap();
        // Bytes
        let mut bytes: Vec<u8> = Vec::new();
        self.write_into_vec(&mut bytes).unwrap();
        let mut bytes = bytes.into_iter();

        for (i, b) in bytes.enumerate() {
            if i == 0 {
                write!(s, "    ").unwrap();
            }
            write!(s, "{b:#04X}, ").unwrap();
        }


        writeln!(s, "] {{").unwrap();
        writeln!(s, "    versions = \"1.12\";").unwrap();
        writeln!(s, "}}\n").unwrap();

        s
    }

}

impl crate::private::Sealed for CMSG_TEST_OPTIONAL {}
impl crate::Message for CMSG_TEST_OPTIONAL {
    const OPCODE: u32 = 0x1137;

    fn size_without_header(&self) -> u32 {
        self.size() as u32
    }

    fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // c_string: CString
        // TODO: Guard against strings that are already null-terminated
        assert_ne!(self.c_string.as_bytes().iter().rev().next(), Some(&0_u8), "String `c_string` must not be null-terminated.");
        w.write_all(self.c_string.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // b_u8: u8
        w.write_all(&self.b_u8.to_le_bytes())?;

        // optional server
        if let Some(v) = &self.server {
            // optional_u8: u8
            w.write_all(&v.optional_u8.to_le_bytes())?;

        }

        Ok(())
    }
    fn read_body<S: crate::private::Sealed>(mut r: &mut &[u8], body_size: u32) -> Result<Self, crate::errors::ParseError> {
        if !(2..=258).contains(&body_size) {
            return Err(crate::errors::ParseError::InvalidSize { opcode: 0x1137, size: body_size });
        }

        // c_string: CString
        let c_string = {
            let c_string = crate::util::read_c_string_to_vec(&mut r)?;
            String::from_utf8(c_string)?
        };

        // b_u8: u8
        let b_u8 = crate::util::read_u8_le(&mut r)?;

        // optional server
        let current_size = {
            c_string.len() + 1 // c_string: CString
            + 1 // b_u8: u8
        };
        let server = if current_size < body_size as usize {
            // optional_u8: u8
            let optional_u8 = crate::util::read_u8_le(&mut r)?;

            Some(CMSG_TEST_OPTIONAL_server {
                optional_u8,
            })
        } else {
            None
        };

        Ok(Self {
            c_string,
            b_u8,
            server,
        })
    }

}
#[cfg(feature = "vanilla")]
impl crate::vanilla::ClientMessage for CMSG_TEST_OPTIONAL {}

impl CMSG_TEST_OPTIONAL {
    pub(crate) fn size(&self) -> usize {
        self.c_string.len() + 1 // c_string: CString
        + 1 // b_u8: u8
        + if let Some(server) = &self.server {
            1 // optional_u8: u8
        } else {
            0
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct CMSG_TEST_OPTIONAL_server {
    pub optional_u8: u8,
}

