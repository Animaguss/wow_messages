use std::convert::{TryFrom, TryInto};
use crate::ClientMessage;
use wow_srp::header_crypto::Encrypter;
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct CMSG_TEST_OPTIONAL {
    pub c_string: String,
    pub b_u8: u8,
    pub server: Option<CMSG_TEST_OPTIONALserver>,
}

impl ClientMessage for CMSG_TEST_OPTIONAL {
    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // c_string: CString
        w.write_all(self.c_string.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // b_u8: u8
        w.write_all(&self.b_u8.to_le_bytes())?;

        // optional server
        if let Some(v) = &self.server {
            // optional_u8: u8
            w.write_all(&v.optional_u8.to_le_bytes())?;

        }

        Ok(())
    }
    const OPCODE: u16 = 0x1137;

    fn size_without_size_or_opcode_fields(&self) -> u16 {
        self.size() as u16
    }

    fn read_body<R: std::io::Read>(r: &mut R, body_size: u32) -> std::result::Result<Self, crate::errors::ParseError> {
        // c_string: CString
        let c_string = crate::util::read_c_string_to_vec(r)?;
        let c_string = String::from_utf8(c_string)?;

        // b_u8: u8
        let b_u8 = crate::util::read_u8_le(r)?;

        // optional server
        let current_size = {
            c_string.len() + 1 // c_string: CString
            + 1 // b_u8: u8
        };
        let server = if current_size < body_size as usize {
            // optional_u8: u8
            let optional_u8 = crate::util::read_u8_le(r)?;

            Some(CMSG_TEST_OPTIONALserver {
                optional_u8,
            })
        } else {
            None
        };

        Ok(Self {
            c_string,
            b_u8,
            server,
        })
    }

}

impl CMSG_TEST_OPTIONAL {
    pub(crate) fn size(&self) -> usize {
        self.c_string.len() + 1 // c_string: CString
        + 1 // b_u8: u8
        + if let Some(server) = &self.server {
            1 // optional_u8: u8
        } else {
            0
        }
    }
}

#[derive(Debug, Clone, PartialEq, Default)]
pub struct CMSG_TEST_OPTIONALserver {
    pub optional_u8: u8,
}

impl CMSG_TEST_OPTIONALserver {
    pub(crate) fn size(&self) -> usize {
        1 // optional_u8: u8
    }

}

