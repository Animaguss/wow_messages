use std::convert::{TryFrom, TryInto};
use crate::world::v1::v12::{SimpleEnum, SimpleEnumError};
#[cfg(feature = "tokio")]
use tokio::io::AsyncReadExt;
#[cfg(feature = "async-std")]
use async_std::io::ReadExt;
use std::io::Write;

#[derive(Debug, PartialEq, Clone, Default)]
pub struct SimpleIfNotEnumElse {
    pub enum: SimpleIfNotEnumElseSimpleEnum,
}

impl SimpleIfNotEnumElse {
    pub(crate) fn as_bytes(&self) -> Result<Vec<u8>, std::io::Error> {
        let mut w = Vec::with_capacity(8000);
        // enum: SimpleEnum
        w.write_all(&(self.enum.as_int() as u8).to_le_bytes())?;

        match &self.enum {
            SimpleIfNotEnumElseSimpleEnum::ZERO {
                zero,
            } => {
                // zero: u16
                w.write_all(&zero.to_le_bytes())?;

            }
            SimpleIfNotEnumElseSimpleEnum::ONE {
                others,
            } => {
                // others: u8
                w.write_all(&others.to_le_bytes())?;

            }
            SimpleIfNotEnumElseSimpleEnum::TWO {
                others,
            } => {
                // others: u8
                w.write_all(&others.to_le_bytes())?;

            }
        }

        Ok(w)
    }

    #[cfg(feature = "sync")]
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, SimpleIfNotEnumElseError> {
        // enum: SimpleEnum
        let enum: SimpleEnum = crate::util::read_u8_le(r)?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::ZERO => {
                // zero: u16
                let zero = crate::util::read_u16_le(r)?;

                SimpleIfNotEnumElseSimpleEnum::ZERO {
                    zero,
                }
            }
            SimpleEnum::ONE => {
                // others: u8
                let others = crate::util::read_u8_le(r)?;

                SimpleIfNotEnumElseSimpleEnum::ONE {
                    others,
                }
            }
            SimpleEnum::TWO => {
                // others: u8
                let others = crate::util::read_u8_le(r)?;

                SimpleIfNotEnumElseSimpleEnum::TWO {
                    others,
                }
            }
        };

        Ok(Self {
            enum: enum_if,
        })
    }

    #[cfg(feature = "tokio")]
    pub(crate) async fn tokio_read<R: AsyncReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, SimpleIfNotEnumElseError> {
        // enum: SimpleEnum
        let enum: SimpleEnum = crate::util::tokio_read_u8_le(r).await?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::ZERO => {
                // zero: u16
                let zero = crate::util::tokio_read_u16_le(r).await?;

                SimpleIfNotEnumElseSimpleEnum::ZERO {
                    zero,
                }
            }
            SimpleEnum::ONE => {
                // others: u8
                let others = crate::util::tokio_read_u8_le(r).await?;

                SimpleIfNotEnumElseSimpleEnum::ONE {
                    others,
                }
            }
            SimpleEnum::TWO => {
                // others: u8
                let others = crate::util::tokio_read_u8_le(r).await?;

                SimpleIfNotEnumElseSimpleEnum::TWO {
                    others,
                }
            }
        };

        Ok(Self {
            enum: enum_if,
        })
    }

    #[cfg(feature = "async-std")]
    pub(crate) async fn astd_read<R: ReadExt + Unpin + Send>(r: &mut R) -> std::result::Result<Self, SimpleIfNotEnumElseError> {
        // enum: SimpleEnum
        let enum: SimpleEnum = crate::util::astd_read_u8_le(r).await?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::ZERO => {
                // zero: u16
                let zero = crate::util::astd_read_u16_le(r).await?;

                SimpleIfNotEnumElseSimpleEnum::ZERO {
                    zero,
                }
            }
            SimpleEnum::ONE => {
                // others: u8
                let others = crate::util::astd_read_u8_le(r).await?;

                SimpleIfNotEnumElseSimpleEnum::ONE {
                    others,
                }
            }
            SimpleEnum::TWO => {
                // others: u8
                let others = crate::util::astd_read_u8_le(r).await?;

                SimpleIfNotEnumElseSimpleEnum::TWO {
                    others,
                }
            }
        };

        Ok(Self {
            enum: enum_if,
        })
    }

}

impl SimpleIfNotEnumElse {
    pub fn size(&self) -> usize {
        0
        + self.enum.size() // enum: SimpleIfNotEnumElseSimpleEnum
    }
}

#[derive(Debug)]
pub enum SimpleIfNotEnumElseError {
    Io(std::io::Error),
    SimpleEnum(SimpleEnumError),
}

impl std::error::Error for SimpleIfNotEnumElseError {}
impl std::fmt::Display for SimpleIfNotEnumElseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Io(i) => i.fmt(f),
            Self::SimpleEnum(i) => i.fmt(f),
        }
    }
}

impl From<std::io::Error> for SimpleIfNotEnumElseError {
    fn from(e : std::io::Error) -> Self {
        Self::Io(e)
    }
}

impl From<SimpleEnumError> for SimpleIfNotEnumElseError {
    fn from(e: SimpleEnumError) -> Self {
        Self::SimpleEnum(e)
    }
}

#[derive(Debug, PartialEq, Clone)]
pub enum SimpleIfNotEnumElseSimpleEnum {
    ZERO {
        zero: u16,
    },
    ONE {
        others: u8,
    },
    TWO {
        others: u8,
    },
}

impl Default for SimpleIfNotEnumElseSimpleEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::ZERO {
            zero: Default::default(),
        }
    }
}

impl SimpleIfNotEnumElseSimpleEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::ZERO { .. } => 0,
            Self::ONE { .. } => 1,
            Self::TWO { .. } => 2,
        }
    }

}

impl SimpleIfNotEnumElseSimpleEnum {
    pub fn size(&self) -> usize {
        match self {
            Self::ZERO {
                zero,
            } => {
                1
                + 2 // zero: u16
            }
            Self::ONE {
                others,
            } => {
                1
                + 1 // others: u8
            }
            Self::TWO {
                others,
            } => {
                1
                + 1 // others: u8
            }
        }
    }
}

