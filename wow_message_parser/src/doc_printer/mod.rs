use crate::container::Container;
use crate::file_utils::write_string_to_file;
use crate::parser::enumerator::Definer;
use crate::parser::types::tags::{LoginVersion, Tags, WorldVersion};
use std::fmt::Write;
use std::fs::read_to_string;
use std::path::Path;

pub struct DocWriter {
    name: String,
    inner: String,
}

impl DocWriter {
    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn inner(&self) -> &str {
        &self.inner
    }

    pub fn new(name: &str) -> Self {
        Self {
            name: name.to_string(),
            inner: String::with_capacity(8000),
        }
    }

    pub fn w(&mut self, s: impl AsRef<str>) {
        self.inner.write_str(s.as_ref()).unwrap();
    }

    pub fn newline(&mut self) {
        self.w("\n");
    }

    pub fn wln(&mut self, s: impl AsRef<str>) {
        self.w(s);
        self.newline();
    }
}

pub fn print_docs_summary_and_objects(definers: &[DocWriter], containers: &[DocWriter]) {
    const DEFINER_HEADER: &str = "# Autogenerated Docs (Definers)\n";
    const CONTAINER_HEADER: &str = "# Autogenerated Docs (Containers)\n";
    const SUMMARY_PATH: &str = "wowm_language/src/SUMMARY.md";

    let s = read_to_string(SUMMARY_PATH).unwrap();
    let (s, _) = s.split_once(DEFINER_HEADER).unwrap();
    let mut s = s.to_string();
    s.push_str(DEFINER_HEADER);

    for definer in definers {
        let path = format!(
            "docs/definer/{lower_name}.md",
            lower_name = definer.name().to_lowercase()
        );
        s.write_fmt(format_args!(
            "- [{name}]({path})\n",
            name = definer.name(),
            path = path,
        ))
        .unwrap();
        write_string_to_file(
            definer.inner(),
            Path::new(&("wowm_language/src/".to_string() + &path)),
        )
    }

    s.push('\n');
    s.push_str(CONTAINER_HEADER);
    for container in containers {
        let path = format!(
            "docs/container/{lower_name}.md",
            lower_name = container.name().to_lowercase()
        );

        s.write_fmt(format_args!(
            "- [{name}]({path})\n",
            name = container.name(),
            path = path,
        ))
        .unwrap();

        write_string_to_file(
            container.inner(),
            Path::new(&("wowm_language/src/".to_string() + &path)),
        )
    }

    write_string_to_file(&s, Path::new(SUMMARY_PATH))
}

fn common(s: &mut DocWriter, name: &str, tags: &Tags) {
    s.wln(format!("# {name}", name = name));
    s.newline();

    print_versions(s, tags.logon_versions(), tags.versions());
}

fn print_versions(
    s: &mut DocWriter,
    login_versions: &[LoginVersion],
    world_versions: &[WorldVersion],
) {
    s.w("# ");

    for (i, l) in login_versions.iter().enumerate() {
        s.w(format!("Protocol Version {}", l.to_string()));
        if i != login_versions.len() - 1 {
            s.w(format!(", "));
        }
    }

    for (i, l) in world_versions.iter().enumerate() {
        s.w(format!("Client Version {}", l.to_string()));
        if i != world_versions.len() - 1 {
            s.w(format!(", "));
        }
    }

    s.newline();
    s.newline();
}

pub fn print_docs_for_enum(e: &Definer) -> DocWriter {
    let mut s = DocWriter::new(e.name());

    common(&mut s, e.name(), e.tags());

    s
}

pub fn print_docs_for_flag(e: &Definer) -> DocWriter {
    let mut s = DocWriter::new(e.name());

    common(&mut s, e.name(), e.tags());

    s
}

pub fn print_docs_for_container(e: &Container) -> DocWriter {
    let mut s = DocWriter::new(e.name());

    common(&mut s, e.name(), e.tags());

    s
}
