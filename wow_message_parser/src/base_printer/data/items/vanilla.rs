use crate::base_printer::data::items;
use rusqlite::Connection;

pub struct VanillaItem {
    pub entry: i32,
    pub class: i32,
    pub sub_class: i32,
    pub name: String,
    pub displayid: i32,
    pub quality: i32,
    pub flags: i32,
    pub buy_count: i32,
    pub buy_price: i32,
    pub sell_price: i32,
    pub inventory_type: i32,
    pub allowed_class: u32,
    pub allowed_race: u32,
    pub item_level: i32,
    pub required_level: i32,
    pub required_skill: i32,
    pub required_skill_rank: i32,
    pub required_spell: i32,
    pub required_honor_rank: i32,
    pub required_city_rank: i32,
    pub required_reputation_faction: i32,
    pub required_reputation_rank: i32,
    pub max_count: i32,
    pub stackable: i32,
    pub container_slots: i32,
    pub stat_type1: i32,
    pub stat_value1: i32,
    pub stat_type2: i32,
    pub stat_value2: i32,
    pub stat_type3: i32,
    pub stat_value3: i32,
    pub stat_type4: i32,
    pub stat_value4: i32,
    pub stat_type5: i32,
    pub stat_value5: i32,
    pub stat_type6: i32,
    pub stat_value6: i32,
    pub stat_type7: i32,
    pub stat_value7: i32,
    pub stat_type8: i32,
    pub stat_value8: i32,
    pub stat_type9: i32,
    pub stat_value9: i32,
    pub stat_type10: i32,
    pub stat_value10: i32,
    pub dmg_min1: f32,
    pub dmg_max1: f32,
    pub dmg_type1: i32,
    pub dmg_min2: f32,
    pub dmg_max2: f32,
    pub dmg_type2: i32,
    pub dmg_min3: f32,
    pub dmg_max3: f32,
    pub dmg_type3: i32,
    pub dmg_min4: f32,
    pub dmg_max4: f32,
    pub dmg_type4: i32,
    pub dmg_min5: f32,
    pub dmg_max5: f32,
    pub dmg_type5: i32,
    pub armor: i32,
    pub holy_res: i32,
    pub fire_res: i32,
    pub nature_res: i32,
    pub frost_res: i32,
    pub shadow_res: i32,
    pub arcane_res: i32,
    pub delay: i32,
    pub ammo_type: i32,
    pub ranged_mod_range: f32,
    pub spell_id_1: i32,
    pub spell_trigger_1: i32,
    pub spell_charges_1: i32,
    pub spell_ppm_rate_1: f32,
    pub spell_cooldown_1: i32,
    pub spell_category_1: i32,
    pub spell_category_cooldown_1: i32,
    pub spell_id_2: i32,
    pub spell_trigger_2: i32,
    pub spell_charges_2: i32,
    pub spell_ppm_rate_2: f32,
    pub spell_cooldown_2: i32,
    pub spell_category_2: i32,
    pub spell_category_cooldown_2: i32,
    pub spell_id_3: i32,
    pub spell_trigger_3: i32,
    pub spell_charges_3: i32,
    pub spell_ppm_rate_3: f32,
    pub spell_cooldown_3: i32,
    pub spell_category_3: i32,
    pub spell_category_cooldown_3: i32,
    pub spell_id_4: i32,
    pub spell_trigger_4: i32,
    pub spell_charges_4: i32,
    pub spell_ppm_rate_4: f32,
    pub spell_cooldown_4: i32,
    pub spell_category_4: i32,
    pub spell_category_cooldown_4: i32,
    pub spell_id_5: i32,
    pub spell_trigger_5: i32,
    pub spell_charges_5: i32,
    pub spell_ppm_rate_5: f32,
    pub spell_cooldown_5: i32,
    pub spell_category_5: i32,
    pub spell_category_cooldown_5: i32,
    pub bonding: i32,
    pub description: String,
    pub page_text: i32,
    pub language_id: i32,
    pub page_material: i32,
    pub start_quest: i32,
    pub lock_id: i32,
    pub material: i32,
    pub sheath: i32,
    pub random_property: i32,
    pub block: i32,
    pub itemset: i32,
    pub max_durability: i32,
    pub area: i32,
    pub map: i32,
    pub bag_family: i32,
    pub script_name: String,
    pub disenchant_id: i32,
    pub food_type: i32,
    pub min_money_loot: i32,
    pub max_money_loot: i32,
    pub duration: i32,
    pub extra_flags: i32,
}

pub fn vanilla(conn: &Connection) -> Vec<VanillaItem> {
    let mut s = conn
        .prepare(
            "SELECT
    entry,
    class,
    subclass,
    name,
    displayid,
    Quality,
    Flags,
    BuyCount,
    BuyPrice,
    SellPrice,
    InventoryType,
    AllowableClass,
    AllowableRace,
    ItemLevel,
    RequiredLevel,
    RequiredSkill,
    RequiredSkillRank,
    requiredspell,
    requiredhonorrank,
    RequiredCityRank,
    RequiredReputationFaction,
    RequiredReputationRank,
    maxcount,
    stackable,
    ContainerSlots,
    stat_type1,
    stat_value1,
    stat_type2,
    stat_value2,
    stat_type3,
    stat_value3,
    stat_type4,
    stat_value4,
    stat_type5,
    stat_value5,
    stat_type6,
    stat_value6,
    stat_type7,
    stat_value7,
    stat_type8,
    stat_value8,
    stat_type9,
    stat_value9,
    stat_type10,
    stat_value10,
    dmg_min1,
    dmg_max1,
    dmg_type1,
    dmg_min2,
    dmg_max2,
    dmg_type2,
    dmg_min3,
    dmg_max3,
    dmg_type3,
    dmg_min4,
    dmg_max4,
    dmg_type4,
    dmg_min5,
    dmg_max5,
    dmg_type5,
    armor,
    holy_res,
    fire_res,
    nature_res,
    frost_res,
    shadow_res,
    arcane_res,
    delay,
    ammo_type,
    RangedModRange,
    spellid_1,
    spelltrigger_1,
    spellcharges_1,
    spellppmRate_1,
    spellcooldown_1,
    spellcategory_1,
    spellcategorycooldown_1,
    spellid_2,
    spelltrigger_2,
    spellcharges_2,
    spellppmRate_2,
    spellcooldown_2,
    spellcategory_2,
    spellcategorycooldown_2,
    spellid_3,
    spelltrigger_3,
    spellcharges_3,
    spellppmRate_3,
    spellcooldown_3,
    spellcategory_3,
    spellcategorycooldown_3,
    spellid_4,
    spelltrigger_4,
    spellcharges_4,
    spellppmRate_4,
    spellcooldown_4,
    spellcategory_4,
    spellcategorycooldown_4,
    spellid_5,
    spelltrigger_5,
    spellcharges_5,
    spellppmRate_5,
    spellcooldown_5,
    spellcategory_5,
    spellcategorycooldown_5,
    bonding,
    description,
    PageText,
    LanguageID,
    PageMaterial,
    startquest,
    lockid,
    Material,
    sheath,
    RandomProperty,
    block,
    itemset,
    MaxDurability,
    area,
    Map,
    BagFamily,
    ScriptName,
    DisenchantID,
    FoodType,
    minMoneyLoot,
    maxMoneyLoot,
    Duration,
    ExtraFlags
FROM item_template ORDER BY entry;",
        )
        .unwrap();

    let r = s
        .query_map([], |row| {
            Ok(VanillaItem {
                entry: row.get(0).unwrap(),
                class: row.get(1).unwrap(),
                sub_class: row.get(2).unwrap(),
                name: row.get(3).unwrap(),
                displayid: row.get(4).unwrap(),
                quality: row.get(5).unwrap(),
                flags: row.get(6).unwrap(),
                buy_count: row.get(7).unwrap(),
                buy_price: row.get(8).unwrap(),
                sell_price: row.get(9).unwrap(),
                inventory_type: row.get(10).unwrap(),
                allowed_class: items::i32_to_u32(row.get(11).unwrap()),
                allowed_race: items::i32_to_u32(row.get(12).unwrap()),
                item_level: row.get(13).unwrap(),
                required_level: row.get(14).unwrap(),
                required_skill: row.get(15).unwrap(),
                required_skill_rank: row.get(16).unwrap(),
                required_spell: row.get(17).unwrap(),
                required_honor_rank: row.get(18).unwrap(),
                required_city_rank: row.get(19).unwrap(),
                required_reputation_faction: row.get(20).unwrap(),
                required_reputation_rank: row.get(21).unwrap(),
                max_count: row.get(22).unwrap(),
                stackable: row.get(23).unwrap(),
                container_slots: row.get(24).unwrap(),
                stat_type1: row.get(25).unwrap(),
                stat_value1: row.get(26).unwrap(),
                stat_type2: row.get(27).unwrap(),
                stat_value2: row.get(28).unwrap(),
                stat_type3: row.get(29).unwrap(),
                stat_value3: row.get(30).unwrap(),
                stat_type4: row.get(31).unwrap(),
                stat_value4: row.get(32).unwrap(),
                stat_type5: row.get(33).unwrap(),
                stat_value5: row.get(34).unwrap(),
                stat_type6: row.get(35).unwrap(),
                stat_value6: row.get(36).unwrap(),
                stat_type7: row.get(37).unwrap(),
                stat_value7: row.get(38).unwrap(),
                stat_type8: row.get(39).unwrap(),
                stat_value8: row.get(40).unwrap(),
                stat_type9: row.get(41).unwrap(),
                stat_value9: row.get(42).unwrap(),
                stat_type10: row.get(43).unwrap(),
                stat_value10: row.get(44).unwrap(),
                dmg_min1: row.get(45).unwrap(),
                dmg_max1: row.get(46).unwrap(),
                dmg_type1: row.get(47).unwrap(),
                dmg_min2: row.get(48).unwrap(),
                dmg_max2: row.get(49).unwrap(),
                dmg_type2: row.get(50).unwrap(),
                dmg_min3: row.get(51).unwrap(),
                dmg_max3: row.get(52).unwrap(),
                dmg_type3: row.get(53).unwrap(),
                dmg_min4: row.get(54).unwrap(),
                dmg_max4: row.get(55).unwrap(),
                dmg_type4: row.get(56).unwrap(),
                dmg_min5: row.get(57).unwrap(),
                dmg_max5: row.get(58).unwrap(),
                dmg_type5: row.get(59).unwrap(),
                armor: row.get(60).unwrap(),
                holy_res: row.get(61).unwrap(),
                fire_res: row.get(62).unwrap(),
                nature_res: row.get(63).unwrap(),
                frost_res: row.get(64).unwrap(),
                shadow_res: row.get(65).unwrap(),
                arcane_res: row.get(66).unwrap(),
                delay: row.get(67).unwrap(),
                ammo_type: row.get(68).unwrap(),
                ranged_mod_range: row.get(69).unwrap(),
                spell_id_1: row.get(70).unwrap(),
                spell_trigger_1: row.get(71).unwrap(),
                spell_charges_1: row.get(72).unwrap(),
                spell_ppm_rate_1: row.get(73).unwrap(),
                spell_cooldown_1: row.get(74).unwrap(),
                spell_category_1: row.get(75).unwrap(),
                spell_category_cooldown_1: row.get(76).unwrap(),
                spell_id_2: row.get(77).unwrap(),
                spell_trigger_2: row.get(78).unwrap(),
                spell_charges_2: row.get(79).unwrap(),
                spell_ppm_rate_2: row.get(80).unwrap(),
                spell_cooldown_2: row.get(81).unwrap(),
                spell_category_2: row.get(82).unwrap(),
                spell_category_cooldown_2: row.get(83).unwrap(),
                spell_id_3: row.get(84).unwrap(),
                spell_trigger_3: row.get(85).unwrap(),
                spell_charges_3: row.get(86).unwrap(),
                spell_ppm_rate_3: row.get(87).unwrap(),
                spell_cooldown_3: row.get(88).unwrap(),
                spell_category_3: row.get(89).unwrap(),
                spell_category_cooldown_3: row.get(90).unwrap(),
                spell_id_4: row.get(91).unwrap(),
                spell_trigger_4: row.get(92).unwrap(),
                spell_charges_4: row.get(93).unwrap(),
                spell_ppm_rate_4: row.get(94).unwrap(),
                spell_cooldown_4: row.get(95).unwrap(),
                spell_category_4: row.get(96).unwrap(),
                spell_category_cooldown_4: row.get(97).unwrap(),
                spell_id_5: row.get(98).unwrap(),
                spell_trigger_5: row.get(99).unwrap(),
                spell_charges_5: row.get(100).unwrap(),
                spell_ppm_rate_5: row.get(101).unwrap(),
                spell_cooldown_5: row.get(102).unwrap(),
                spell_category_5: row.get(103).unwrap(),
                spell_category_cooldown_5: row.get(104).unwrap(),
                bonding: row.get(105).unwrap(),
                description: row.get(106).unwrap(),
                page_text: row.get(107).unwrap(),
                language_id: row.get(108).unwrap(),
                page_material: row.get(109).unwrap(),
                start_quest: row.get(110).unwrap(),
                lock_id: row.get(111).unwrap(),
                material: row.get(112).unwrap(),
                sheath: row.get(113).unwrap(),
                random_property: row.get(114).unwrap(),
                block: row.get(115).unwrap(),
                itemset: row.get(116).unwrap(),
                max_durability: row.get(117).unwrap(),
                area: row.get(118).unwrap(),
                map: row.get(119).unwrap(),
                bag_family: row.get(120).unwrap(),
                script_name: row.get(121).unwrap(),
                disenchant_id: row.get(122).unwrap(),
                food_type: row.get(123).unwrap(),
                min_money_loot: row.get(124).unwrap(),
                max_money_loot: row.get(125).unwrap(),
                duration: row.get(126).unwrap(),
                extra_flags: row.get(127).unwrap(),
            })
        })
        .unwrap();

    r.map(|a| a.unwrap()).collect()
}
