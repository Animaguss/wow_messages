use crate::base_printer::data::items;
use crate::base_printer::data::items::{Array, ArrayField, Field, GenericItem, Value};
use crate::base_printer::write::items::conversions::vanilla_stat_types_to_stats;
use rusqlite::Connection;
use wow_world_base::vanilla::{
    AllowedClass, AllowedRace, Area, BagFamily, Bonding, InventoryType, ItemClassAndSubClass,
    ItemFlag, ItemQuality, Map, PvpRank, SheatheType, Skill, SpellSchool, SpellTriggerType,
};

pub struct VanillaItem {
    pub entry: u32,
    pub class_and_sub_class: ItemClassAndSubClass,
    pub name: String,
    pub displayid: i32,
    pub quality: ItemQuality,
    pub flags: ItemFlag,
    pub buy_count: i32,
    pub buy_price: i32,
    pub sell_price: i32,
    pub inventory_type: InventoryType,
    pub allowed_class: AllowedClass,
    pub allowed_race: AllowedRace,
    pub item_level: i32,
    pub required_level: i32,
    pub required_skill: Skill,
    pub required_skill_rank: i32,
    pub required_spell: i32,
    pub required_honor_rank: PvpRank,
    pub required_city_rank: i32,
    pub required_reputation_faction: i32,
    pub required_reputation_rank: i32,
    pub max_count: i32,
    pub stackable: i32,
    pub container_slots: i32,
    pub mana: i32,
    pub health: i32,
    pub agility: i32,
    pub strength: i32,
    pub stamina: i32,
    pub intellect: i32,
    pub spirit: i32,
    pub dmg_min1: f32,
    pub dmg_max1: f32,
    pub dmg_type1: SpellSchool,
    pub dmg_min2: f32,
    pub dmg_max2: f32,
    pub dmg_type2: SpellSchool,
    pub dmg_min3: f32,
    pub dmg_max3: f32,
    pub dmg_type3: SpellSchool,
    pub dmg_min4: f32,
    pub dmg_max4: f32,
    pub dmg_type4: SpellSchool,
    pub dmg_min5: f32,
    pub dmg_max5: f32,
    pub dmg_type5: SpellSchool,
    pub armor: i32,
    pub holy_res: i32,
    pub fire_res: i32,
    pub nature_res: i32,
    pub frost_res: i32,
    pub shadow_res: i32,
    pub arcane_res: i32,
    pub delay: i32,
    pub ammo_type: i32,
    pub ranged_mod_range: f32,
    pub spell_id_1: i32,
    pub spell_trigger_1: SpellTriggerType,
    pub spell_charges_1: i32,
    pub spell_ppm_rate_1: f32,
    pub spell_cooldown_1: i32,
    pub spell_category_1: i32,
    pub spell_category_cooldown_1: i32,
    pub spell_id_2: i32,
    pub spell_trigger_2: SpellTriggerType,
    pub spell_charges_2: i32,
    pub spell_ppm_rate_2: f32,
    pub spell_cooldown_2: i32,
    pub spell_category_2: i32,
    pub spell_category_cooldown_2: i32,
    pub spell_id_3: i32,
    pub spell_trigger_3: SpellTriggerType,
    pub spell_charges_3: i32,
    pub spell_ppm_rate_3: f32,
    pub spell_cooldown_3: i32,
    pub spell_category_3: i32,
    pub spell_category_cooldown_3: i32,
    pub spell_id_4: i32,
    pub spell_trigger_4: SpellTriggerType,
    pub spell_charges_4: i32,
    pub spell_ppm_rate_4: f32,
    pub spell_cooldown_4: i32,
    pub spell_category_4: i32,
    pub spell_category_cooldown_4: i32,
    pub spell_id_5: i32,
    pub spell_trigger_5: SpellTriggerType,
    pub spell_charges_5: i32,
    pub spell_ppm_rate_5: f32,
    pub spell_cooldown_5: i32,
    pub spell_category_5: i32,
    pub spell_category_cooldown_5: i32,
    pub bonding: Bonding,
    pub description: String,
    pub page_text: i32,
    pub language_id: i32,
    pub page_material: i32,
    pub start_quest: i32,
    pub lock_id: i32,
    pub material: i32,
    pub sheathe_type: SheatheType,
    pub random_property: i32,
    pub block: i32,
    pub itemset: i32,
    pub max_durability: i32,
    pub area: Area,
    pub map: Map,
    pub bag_family: BagFamily,
    pub script_name: String,
    pub disenchant_id: i32,
    pub food_type: i32,
    pub min_money_loot: i32,
    pub max_money_loot: i32,
    pub duration: i32,
    pub extra_flags: i32,
}

impl VanillaItem {
    pub fn into_generic_item(self) -> GenericItem {
        let fields = vec![
            Field::new("entry", Value::Uint(self.entry)),
            Field::new(
                "class_and_sub_class",
                Value::VanillaItemClassAndSubClass(self.class_and_sub_class),
            ),
            Field::new("name", Value::String(self.name.clone())),
            Field::new("displayid", Value::Int(self.displayid)),
            Field::new("quality", Value::VanillaTbcItemQuality(self.quality)),
            Field::new("flags", Value::VanillaItemFlag(self.flags)),
            Field::new("buy_count", Value::Int(self.buy_count)),
            Field::new("buy_price", Value::Int(self.buy_price)),
            Field::new("sell_price", Value::Int(self.sell_price)),
            Field::new("inventory_type", Value::InventoryType(self.inventory_type)),
            Field::new(
                "allowed_class",
                Value::VanillaTbcAllowedClass(self.allowed_class),
            ),
            Field::new("allowed_race", Value::VanillaAllowedRace(self.allowed_race)),
            Field::new("item_level", Value::Int(self.item_level)),
            Field::new("required_level", Value::Int(self.required_level)),
            Field::new("required_skill", Value::VanillaSkill(self.required_skill)),
            Field::new("required_skill_rank", Value::Int(self.required_skill_rank)),
            Field::new("required_spell", Value::Int(self.required_spell)),
            Field::new(
                "required_honor_rank",
                Value::PvpRank(self.required_honor_rank),
            ),
            Field::new("required_city_rank", Value::Int(self.required_city_rank)),
            Field::new(
                "required_reputation_faction",
                Value::Int(self.required_reputation_faction),
            ),
            Field::new(
                "required_reputation_rank",
                Value::Int(self.required_reputation_rank),
            ),
            Field::new("max_count", Value::Int(self.max_count)),
            Field::new("stackable", Value::Int(self.stackable)),
            Field::new("container_slots", Value::Int(self.container_slots)),
            Field::new("mana", Value::Int(self.mana)),
            Field::new("health", Value::Int(self.health)),
            Field::new("agility", Value::Int(self.agility)),
            Field::new("strength", Value::Int(self.strength)),
            Field::new("stamina", Value::Int(self.stamina)),
            Field::new("intellect", Value::Int(self.intellect)),
            Field::new("spirit", Value::Int(self.spirit)),
            Field::new("armor", Value::Int(self.armor)),
            Field::new("holy_res", Value::Int(self.holy_res)),
            Field::new("fire_res", Value::Int(self.fire_res)),
            Field::new("nature_res", Value::Int(self.nature_res)),
            Field::new("frost_res", Value::Int(self.frost_res)),
            Field::new("shadow_res", Value::Int(self.shadow_res)),
            Field::new("arcane_res", Value::Int(self.arcane_res)),
            Field::new("delay", Value::Int(self.delay)),
            Field::new("ammo_type", Value::Int(self.ammo_type)),
            Field::new("ranged_mod_range", Value::Float(self.ranged_mod_range)),
            Field::new("bonding", Value::Bonding(self.bonding)),
            Field::new("description", Value::String(self.description)),
            Field::new("page_text", Value::Int(self.page_text)),
            Field::new("language_id", Value::Int(self.language_id)),
            Field::new("page_material", Value::Int(self.page_material)),
            Field::new("start_quest", Value::Int(self.start_quest)),
            Field::new("lock_id", Value::Int(self.lock_id)),
            Field::new("material", Value::Int(self.material)),
            Field::new("sheathe_type", Value::SheatheType(self.sheathe_type)),
            Field::new("random_property", Value::Int(self.random_property)),
            Field::new("block", Value::Int(self.block)),
            Field::new("itemset", Value::Int(self.itemset)),
            Field::new("max_durability", Value::Int(self.max_durability)),
            Field::new("area", Value::VanillaArea(self.area)),
            Field::new("map", Value::VanillaMap(self.map)),
            Field::new("bag_family", Value::VanillaBagFamily(self.bag_family)),
            Field::new("script_name", Value::String(self.script_name)),
            Field::new("disenchant_id", Value::Int(self.disenchant_id)),
            Field::new("food_type", Value::Int(self.food_type)),
            Field::new("min_money_loot", Value::Int(self.min_money_loot)),
            Field::new("max_money_loot", Value::Int(self.max_money_loot)),
            Field::new("duration", Value::Int(self.duration)),
            Field::new("extra_flags", Value::Int(self.extra_flags)),
        ];

        let arrays = vec![
            Array::new(
                "damages",
                "ItemDamageType",
                true,
                vec![
                    vec![
                        ArrayField::new("damage_minimum", "dmg_min1", Value::Float(self.dmg_min1)),
                        ArrayField::new("damage_maximum", "dmg_max1", Value::Float(self.dmg_max1)),
                        ArrayField::new("school", "dmg_type1", Value::SpellSchool(self.dmg_type1)),
                    ],
                    vec![
                        ArrayField::new("damage_minimum", "dmg_min2", Value::Float(self.dmg_min2)),
                        ArrayField::new("damage_maximum", "dmg_max2", Value::Float(self.dmg_max2)),
                        ArrayField::new("school", "dmg_type2", Value::SpellSchool(self.dmg_type2)),
                    ],
                    vec![
                        ArrayField::new("damage_minimum", "dmg_min3", Value::Float(self.dmg_min3)),
                        ArrayField::new("damage_maximum", "dmg_max3", Value::Float(self.dmg_max3)),
                        ArrayField::new("school", "dmg_type3", Value::SpellSchool(self.dmg_type3)),
                    ],
                    vec![
                        ArrayField::new("damage_minimum", "dmg_min4", Value::Float(self.dmg_min4)),
                        ArrayField::new("damage_maximum", "dmg_max4", Value::Float(self.dmg_max4)),
                        ArrayField::new("school", "dmg_type4", Value::SpellSchool(self.dmg_type4)),
                    ],
                    vec![
                        ArrayField::new("damage_minimum", "dmg_min5", Value::Float(self.dmg_min5)),
                        ArrayField::new("damage_maximum", "dmg_max5", Value::Float(self.dmg_max5)),
                        ArrayField::new("school", "dmg_type5", Value::SpellSchool(self.dmg_type5)),
                    ],
                ],
            ),
            Array::new(
                "spells",
                "Spells",
                false,
                vec![
                    vec![
                        ArrayField::new("spell", "spell_id_1", Value::Int(self.spell_id_1)),
                        ArrayField::new(
                            "spell_trigger",
                            "spell_trigger_1",
                            Value::VanillaSpellTriggerType(self.spell_trigger_1),
                        ),
                        ArrayField::new(
                            "spell_charges",
                            "spell_charges_1",
                            Value::Int(self.spell_charges_1),
                        ),
                        ArrayField::new(
                            "spell_ppm_rate",
                            "spell_ppm_rate_1",
                            Value::Float(self.spell_ppm_rate_1),
                        ),
                        ArrayField::new(
                            "spell_cooldown",
                            "spell_cooldown_1",
                            Value::Int(self.spell_cooldown_1),
                        ),
                        ArrayField::new(
                            "spell_category",
                            "spell_category_1",
                            Value::Int(self.spell_category_1),
                        ),
                        ArrayField::new(
                            "spell_category_cooldown",
                            "spell_category_cooldown_1",
                            Value::Int(self.spell_category_cooldown_1),
                        ),
                    ],
                    vec![
                        ArrayField::new("spell", "spell_id_2", Value::Int(self.spell_id_2)),
                        ArrayField::new(
                            "spell_trigger",
                            "spell_trigger_2",
                            Value::VanillaSpellTriggerType(self.spell_trigger_2),
                        ),
                        ArrayField::new(
                            "spell_charges",
                            "spell_charges_2",
                            Value::Int(self.spell_charges_2),
                        ),
                        ArrayField::new(
                            "spell_ppm_rate",
                            "spell_ppm_rate_2",
                            Value::Float(self.spell_ppm_rate_2),
                        ),
                        ArrayField::new(
                            "spell_cooldown",
                            "spell_cooldown_2",
                            Value::Int(self.spell_cooldown_2),
                        ),
                        ArrayField::new(
                            "spell_category",
                            "spell_category_2",
                            Value::Int(self.spell_category_2),
                        ),
                        ArrayField::new(
                            "spell_category_cooldown",
                            "spell_category_cooldown_2",
                            Value::Int(self.spell_category_cooldown_2),
                        ),
                    ],
                    vec![
                        ArrayField::new("spell", "spell_id_3", Value::Int(self.spell_id_3)),
                        ArrayField::new(
                            "spell_trigger",
                            "spell_trigger_3",
                            Value::VanillaSpellTriggerType(self.spell_trigger_3),
                        ),
                        ArrayField::new(
                            "spell_charges",
                            "spell_charges_3",
                            Value::Int(self.spell_charges_3),
                        ),
                        ArrayField::new(
                            "spell_ppm_rate",
                            "spell_ppm_rate_3",
                            Value::Float(self.spell_ppm_rate_3),
                        ),
                        ArrayField::new(
                            "spell_cooldown",
                            "spell_cooldown_3",
                            Value::Int(self.spell_cooldown_3),
                        ),
                        ArrayField::new(
                            "spell_category",
                            "spell_category_3",
                            Value::Int(self.spell_category_3),
                        ),
                        ArrayField::new(
                            "spell_category_cooldown",
                            "spell_category_cooldown_3",
                            Value::Int(self.spell_category_cooldown_3),
                        ),
                    ],
                    vec![
                        ArrayField::new("spell", "spell_id_4", Value::Int(self.spell_id_4)),
                        ArrayField::new(
                            "spell_trigger",
                            "spell_trigger_4",
                            Value::VanillaSpellTriggerType(self.spell_trigger_4),
                        ),
                        ArrayField::new(
                            "spell_charges",
                            "spell_charges_4",
                            Value::Int(self.spell_charges_4),
                        ),
                        ArrayField::new(
                            "spell_ppm_rate",
                            "spell_ppm_rate_4",
                            Value::Float(self.spell_ppm_rate_4),
                        ),
                        ArrayField::new(
                            "spell_cooldown",
                            "spell_cooldown_4",
                            Value::Int(self.spell_cooldown_4),
                        ),
                        ArrayField::new(
                            "spell_category",
                            "spell_category_4",
                            Value::Int(self.spell_category_4),
                        ),
                        ArrayField::new(
                            "spell_category_cooldown",
                            "spell_category_cooldown_4",
                            Value::Int(self.spell_category_cooldown_4),
                        ),
                    ],
                    vec![
                        ArrayField::new("spell", "spell_id_5", Value::Int(self.spell_id_5)),
                        ArrayField::new(
                            "spell_trigger",
                            "spell_trigger_5",
                            Value::VanillaSpellTriggerType(self.spell_trigger_5),
                        ),
                        ArrayField::new(
                            "spell_charges",
                            "spell_charges_5",
                            Value::Int(self.spell_charges_5),
                        ),
                        ArrayField::new(
                            "spell_ppm_rate",
                            "spell_ppm_rate_5",
                            Value::Float(self.spell_ppm_rate_5),
                        ),
                        ArrayField::new(
                            "spell_cooldown",
                            "spell_cooldown_5",
                            Value::Int(self.spell_cooldown_5),
                        ),
                        ArrayField::new(
                            "spell_category",
                            "spell_category_5",
                            Value::Int(self.spell_category_5),
                        ),
                        ArrayField::new(
                            "spell_category_cooldown",
                            "spell_category_cooldown_5",
                            Value::Int(self.spell_category_cooldown_5),
                        ),
                    ],
                ],
            ),
        ];

        GenericItem {
            entry: self.entry,
            extra_flags: self.extra_flags,
            name: self.name,
            fields,
            arrays,
        }
    }
}

pub fn vanilla(conn: &Connection) -> Vec<GenericItem> {
    let mut s = conn
        .prepare(
            "SELECT
    entry,
    class,
    subclass,
    name,
    displayid,
    Quality,
    Flags,
    BuyCount,
    BuyPrice,
    SellPrice,
    InventoryType,
    AllowableClass,
    AllowableRace,
    ItemLevel,
    RequiredLevel,
    RequiredSkill,
    RequiredSkillRank,
    requiredspell,
    requiredhonorrank,
    RequiredCityRank,
    RequiredReputationFaction,
    RequiredReputationRank,
    maxcount,
    stackable,
    ContainerSlots,
    stat_type1,
    stat_value1,
    stat_type2,
    stat_value2,
    stat_type3,
    stat_value3,
    stat_type4,
    stat_value4,
    stat_type5,
    stat_value5,
    stat_type6,
    stat_value6,
    stat_type7,
    stat_value7,
    stat_type8,
    stat_value8,
    stat_type9,
    stat_value9,
    stat_type10,
    stat_value10,
    dmg_min1,
    dmg_max1,
    dmg_type1,
    dmg_min2,
    dmg_max2,
    dmg_type2,
    dmg_min3,
    dmg_max3,
    dmg_type3,
    dmg_min4,
    dmg_max4,
    dmg_type4,
    dmg_min5,
    dmg_max5,
    dmg_type5,
    armor,
    holy_res,
    fire_res,
    nature_res,
    frost_res,
    shadow_res,
    arcane_res,
    delay,
    ammo_type,
    RangedModRange,
    spellid_1,
    spelltrigger_1,
    spellcharges_1,
    spellppmRate_1,
    spellcooldown_1,
    spellcategory_1,
    spellcategorycooldown_1,
    spellid_2,
    spelltrigger_2,
    spellcharges_2,
    spellppmRate_2,
    spellcooldown_2,
    spellcategory_2,
    spellcategorycooldown_2,
    spellid_3,
    spelltrigger_3,
    spellcharges_3,
    spellppmRate_3,
    spellcooldown_3,
    spellcategory_3,
    spellcategorycooldown_3,
    spellid_4,
    spelltrigger_4,
    spellcharges_4,
    spellppmRate_4,
    spellcooldown_4,
    spellcategory_4,
    spellcategorycooldown_4,
    spellid_5,
    spelltrigger_5,
    spellcharges_5,
    spellppmRate_5,
    spellcooldown_5,
    spellcategory_5,
    spellcategorycooldown_5,
    bonding,
    description,
    PageText,
    LanguageID,
    PageMaterial,
    startquest,
    lockid,
    Material,
    sheath,
    RandomProperty,
    block,
    itemset,
    MaxDurability,
    area,
    Map,
    BagFamily,
    ScriptName,
    DisenchantID,
    FoodType,
    minMoneyLoot,
    maxMoneyLoot,
    Duration,
    ExtraFlags
FROM item_template ORDER BY entry;",
        )
        .unwrap();

    let r = s
        .query_map([], |row| {
            let class: i32 = row.get(1).unwrap();
            let sub_class: i32 = row.get(2).unwrap();
            let sub_class = {
                const CLASS_CONSUMABLE: i32 = 0;
                const CLASS_TRADE_GOODS: i32 = 7;
                const CLASS_JUNK: i32 = 15;

                // The game does not recognize consumables other than class 0 and subclass 0,
                // but the cmangos database uses these for some reason
                if class == CLASS_CONSUMABLE
                    // The game does not recognize trade goods for greater than 3 (Devices)
                    // but the cmangos database uses these for some reason
                    || class == CLASS_TRADE_GOODS && sub_class > 3
                    // The game does not recognize junk subclasses other than class 15 and subclass 0,
                    // but the cmangos database uses these for some reason
                    || class == CLASS_JUNK
                {
                    0
                } else {
                    sub_class
                }
            };

            let stats = vanilla_stat_types_to_stats(
                row.get(25).unwrap(),
                row.get(26).unwrap(),
                row.get(27).unwrap(),
                row.get(28).unwrap(),
                row.get(29).unwrap(),
                row.get(30).unwrap(),
                row.get(31).unwrap(),
                row.get(32).unwrap(),
                row.get(33).unwrap(),
                row.get(34).unwrap(),
                row.get(35).unwrap(),
                row.get(36).unwrap(),
                row.get(37).unwrap(),
                row.get(38).unwrap(),
                row.get(39).unwrap(),
                row.get(40).unwrap(),
                row.get(41).unwrap(),
                row.get(42).unwrap(),
                row.get(43).unwrap(),
                row.get(44).unwrap(),
            );

            Ok(VanillaItem {
                entry: row.get(0).unwrap(),
                class_and_sub_class: wow_world_base::vanilla::ItemClassAndSubClass::try_from(
                    (sub_class as u64) << 32 | class as u64,
                )
                .unwrap(),
                name: row.get(3).unwrap(),
                displayid: row.get(4).unwrap(),
                quality: ItemQuality::try_from(row.get::<usize, u8>(5).unwrap()).unwrap(),
                flags: ItemFlag::new(row.get(6).unwrap()),
                buy_count: row.get(7).unwrap(),
                buy_price: row.get(8).unwrap(),
                sell_price: row.get(9).unwrap(),
                inventory_type: InventoryType::try_from(row.get::<usize, u8>(10).unwrap()).unwrap(),
                allowed_class: AllowedClass::new(items::i32_to_u32(row.get(11).unwrap())),
                allowed_race: AllowedRace::new(items::i32_to_u32(row.get(12).unwrap())),
                item_level: row.get(13).unwrap(),
                required_level: row.get(14).unwrap(),
                required_skill: Skill::try_from(row.get::<usize, u16>(15).unwrap()).unwrap(),
                required_skill_rank: row.get(16).unwrap(),
                required_spell: row.get(17).unwrap(),
                required_honor_rank: PvpRank::try_from(row.get::<usize, u8>(18).unwrap()).unwrap(),
                required_city_rank: row.get(19).unwrap(),
                required_reputation_faction: row.get(20).unwrap(),
                required_reputation_rank: row.get(21).unwrap(),
                max_count: row.get(22).unwrap(),
                stackable: row.get(23).unwrap(),
                container_slots: row.get(24).unwrap(),
                mana: stats.mana,
                health: stats.health,
                agility: stats.agility,
                strength: stats.strength,
                stamina: stats.stamina,
                intellect: stats.intellect,
                spirit: stats.spirit,
                dmg_min1: row.get(45).unwrap(),
                dmg_max1: row.get(46).unwrap(),
                dmg_type1: SpellSchool::try_from(row.get::<usize, u8>(47).unwrap()).unwrap(),
                dmg_min2: row.get(48).unwrap(),
                dmg_max2: row.get(49).unwrap(),
                dmg_type2: SpellSchool::try_from(row.get::<usize, u8>(50).unwrap()).unwrap(),
                dmg_min3: row.get(51).unwrap(),
                dmg_max3: row.get(52).unwrap(),
                dmg_type3: SpellSchool::try_from(row.get::<usize, u8>(53).unwrap()).unwrap(),
                dmg_min4: row.get(54).unwrap(),
                dmg_max4: row.get(55).unwrap(),
                dmg_type4: SpellSchool::try_from(row.get::<usize, u8>(56).unwrap()).unwrap(),
                dmg_min5: row.get(57).unwrap(),
                dmg_max5: row.get(58).unwrap(),
                dmg_type5: SpellSchool::try_from(row.get::<usize, u8>(59).unwrap()).unwrap(),
                armor: row.get(60).unwrap(),
                holy_res: row.get(61).unwrap(),
                fire_res: row.get(62).unwrap(),
                nature_res: row.get(63).unwrap(),
                frost_res: row.get(64).unwrap(),
                shadow_res: row.get(65).unwrap(),
                arcane_res: row.get(66).unwrap(),
                delay: row.get(67).unwrap(),
                ammo_type: row.get(68).unwrap(),
                ranged_mod_range: row.get(69).unwrap(),
                spell_id_1: row.get(70).unwrap(),
                spell_trigger_1: SpellTriggerType::try_from(row.get::<usize, u8>(71).unwrap())
                    .unwrap(),
                spell_charges_1: row.get(72).unwrap(),
                spell_ppm_rate_1: row.get(73).unwrap(),
                spell_cooldown_1: row.get(74).unwrap(),
                spell_category_1: row.get(75).unwrap(),
                spell_category_cooldown_1: row.get(76).unwrap(),
                spell_id_2: row.get(77).unwrap(),
                spell_trigger_2: SpellTriggerType::try_from(row.get::<usize, u8>(78).unwrap())
                    .unwrap(),
                spell_charges_2: row.get(79).unwrap(),
                spell_ppm_rate_2: row.get(80).unwrap(),
                spell_cooldown_2: row.get(81).unwrap(),
                spell_category_2: row.get(82).unwrap(),
                spell_category_cooldown_2: row.get(83).unwrap(),
                spell_id_3: row.get(84).unwrap(),
                spell_trigger_3: SpellTriggerType::try_from(row.get::<usize, u8>(85).unwrap())
                    .unwrap(),
                spell_charges_3: row.get(86).unwrap(),
                spell_ppm_rate_3: row.get(87).unwrap(),
                spell_cooldown_3: row.get(88).unwrap(),
                spell_category_3: row.get(89).unwrap(),
                spell_category_cooldown_3: row.get(90).unwrap(),
                spell_id_4: row.get(91).unwrap(),
                spell_trigger_4: SpellTriggerType::try_from(row.get::<usize, u8>(92).unwrap())
                    .unwrap(),
                spell_charges_4: row.get(93).unwrap(),
                spell_ppm_rate_4: row.get(94).unwrap(),
                spell_cooldown_4: row.get(95).unwrap(),
                spell_category_4: row.get(96).unwrap(),
                spell_category_cooldown_4: row.get(97).unwrap(),
                spell_id_5: row.get(98).unwrap(),
                spell_trigger_5: SpellTriggerType::try_from(row.get::<usize, u8>(99).unwrap())
                    .unwrap(),
                spell_charges_5: row.get(100).unwrap(),
                spell_ppm_rate_5: row.get(101).unwrap(),
                spell_cooldown_5: row.get(102).unwrap(),
                spell_category_5: row.get(103).unwrap(),
                spell_category_cooldown_5: row.get(104).unwrap(),
                bonding: Bonding::try_from(row.get::<usize, u8>(105).unwrap()).unwrap(),
                description: row.get(106).unwrap(),
                page_text: row.get(107).unwrap(),
                language_id: row.get(108).unwrap(),
                page_material: row.get(109).unwrap(),
                start_quest: row.get(110).unwrap(),
                lock_id: row.get(111).unwrap(),
                material: row.get(112).unwrap(),
                sheathe_type: SheatheType::try_from(row.get::<usize, u8>(113).unwrap()).unwrap(),
                random_property: row.get(114).unwrap(),
                block: row.get(115).unwrap(),
                itemset: row.get(116).unwrap(),
                max_durability: row.get(117).unwrap(),
                area: Area::try_from(row.get::<usize, u32>(118).unwrap()).unwrap(),
                map: Map::try_from(row.get::<usize, u32>(119).unwrap()).unwrap(),
                bag_family: BagFamily::try_from(row.get::<usize, u8>(120).unwrap()).unwrap(),
                script_name: row.get(121).unwrap(),
                disenchant_id: row.get(122).unwrap(),
                food_type: row.get(123).unwrap(),
                min_money_loot: row.get(124).unwrap(),
                max_money_loot: row.get(125).unwrap(),
                duration: row.get(126).unwrap(),
                extra_flags: row.get(127).unwrap(),
            })
        })
        .unwrap();

    r.map(|a| a.unwrap().into_generic_item()).collect()
}
