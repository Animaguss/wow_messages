use rusqlite::Connection;

pub(crate) struct TbcSpell {
    id: i32,
    category: i32,
    cast_ui: i32,
    dispel: i32,
    mechanic: i32,
    attributes: u32,
    attributes_ex: u32,
    attributes_ex2: u32,
    attributes_ex3: u32,
    attributes_ex4: u32,
    attributes_ex5: u32,
    attributes_ex6: u32,
    stances: u32,
    stances_not: u32,
    targets: i32,
    target_creature_type: i32,
    requires_spell_focus: i32,
    facing_caster_flags: i32,
    caster_aura_state: i32,
    target_aura_state: i32,
    caster_aura_state_not: i32,
    target_aura_state_not: i32,
    casting_time_index: i32,
    recovery_time: i32,
    category_recovery_time: i32,
    interrupt_flags: i32,
    aura_interrupt_flags: i32,
    channel_interrupt_flags: i32,
    proc_flags: i32,
    proc_chance: i32,
    proc_charges: i32,
    max_level: i32,
    base_level: i32,
    spell_level: i32,
    duration_index: i32,
    power_type: u32,
    mana_cost: i32,
    mana_cost_perlevel: i32,
    mana_per_second: i32,
    mana_per_second_per_level: i32,
    range_index: i32,
    speed: f32,
    modal_next_spell: i32,
    stack_amount: i32,
    totem1: i32,
    totem2: i32,
    reagent1: i32,
    reagent2: i32,
    reagent3: i32,
    reagent4: i32,
    reagent5: i32,
    reagent6: i32,
    reagent7: i32,
    reagent8: i32,
    reagent_count1: u32,
    reagent_count2: u32,
    reagent_count3: u32,
    reagent_count4: u32,
    reagent_count5: u32,
    reagent_count6: u32,
    reagent_count7: u32,
    reagent_count8: u32,
    equipped_item_class: i32,
    equipped_item_sub_class_mask: i32,
    equipped_item_inventory_type_mask: i32,
    effect1: i32,
    effect2: i32,
    effect3: i32,
    effect_die_sides1: i32,
    effect_die_sides2: i32,
    effect_die_sides3: i32,
    effect_base_dice1: i32,
    effect_base_dice2: i32,
    effect_base_dice3: i32,
    effect_dice_per_level1: f32,
    effect_dice_per_level2: f32,
    effect_dice_per_level3: f32,
    effect_real_points_per_level1: f32,
    effect_real_points_per_level2: f32,
    effect_real_points_per_level3: f32,
    effect_base_points1: i32,
    effect_base_points2: i32,
    effect_base_points3: i32,
    effect_mechanic1: i32,
    effect_mechanic2: i32,
    effect_mechanic3: i32,
    effect_implicit_target_a1: i32,
    effect_implicit_target_a2: i32,
    effect_implicit_target_a3: i32,
    effect_implicit_target_b1: i32,
    effect_implicit_target_b2: i32,
    effect_implicit_target_b3: i32,
    effect_radius_index1: i32,
    effect_radius_index2: i32,
    effect_radius_index3: i32,
    effect_apply_aura_name1: i32,
    effect_apply_aura_name2: i32,
    effect_apply_aura_name3: i32,
    effect_amplitude1: i32,
    effect_amplitude2: i32,
    effect_amplitude3: i32,
    effect_multiple_value1: f32,
    effect_multiple_value2: f32,
    effect_multiple_value3: f32,
    effect_chain_target1: i32,
    effect_chain_target2: i32,
    effect_chain_target3: i32,
    effect_item_type1: u32,
    effect_item_type2: u32,
    effect_item_type3: u32,
    effect_misc_value1: i32,
    effect_misc_value2: i32,
    effect_misc_value3: i32,
    effect_misc_value_b1: i32,
    effect_misc_value_b2: i32,
    effect_misc_value_b3: i32,
    effect_trigger_spell1: i32,
    effect_trigger_spell2: i32,
    effect_trigger_spell3: i32,
    effect_points_per_combo_point1: f32,
    effect_points_per_combo_point2: f32,
    effect_points_per_combo_point3: f32,
    spell_visual: i32,
    spell_icon_id: i32,
    active_icon_id: i32,
    spell_priority: i32,
    spell_name: String,
    spell_name2: Option<String>,
    spell_name3: Option<String>,
    spell_name4: Option<String>,
    spell_name5: Option<String>,
    spell_name6: Option<String>,
    spell_name7: Option<String>,
    spell_name8: Option<String>,
    spell_name9: Option<String>,
    spell_name10: Option<String>,
    spell_name11: Option<String>,
    spell_name12: Option<String>,
    spell_name13: Option<String>,
    spell_name14: Option<String>,
    spell_name15: Option<String>,
    spell_name16: Option<String>,
    rank1: Option<String>,
    rank2: Option<String>,
    rank3: Option<String>,
    rank4: Option<String>,
    rank5: Option<String>,
    rank6: Option<String>,
    rank7: Option<String>,
    rank8: Option<String>,
    rank9: Option<String>,
    rank10: Option<String>,
    rank11: Option<String>,
    rank12: Option<String>,
    rank13: Option<String>,
    rank14: Option<String>,
    rank15: Option<String>,
    rank16: Option<String>,
    mana_cost_percentage: i32,
    start_recovery_category: i32,
    start_recovery_time: i32,
    max_target_level: i32,
    spell_family_name: i32,
    spell_family_flags: i64,
    max_affected_targets: i32,
    dmg_class: i32,
    prevention_type: i32,
    stance_bar_order: i32,
    dmg_multiplier1: f32,
    dmg_multiplier2: f32,
    dmg_multiplier3: f32,
    min_faction_id: i32,
    min_reputation: i32,
    required_aura_vision: i32,
    totem_category1: i32,
    totem_category2: i32,
    area_id: i32,
    school_mask: i32,
    is_server_side: i32,
    attributes_serverside: i32,
}

pub(crate) fn tbc(conn: &Connection) -> Vec<TbcSpell> {
    let mut s = conn
        .prepare(
            "SELECT
    Id,
    Category,
    CastUI,
    Dispel,
    Mechanic,
    Attributes,
    AttributesEx,
    AttributesEx2,
    AttributesEx3,
    AttributesEx4,
    AttributesEx5,
    AttributesEx6,
    Stances,
    StancesNot,
    Targets,
    TargetCreatureType,
    RequiresSpellFocus,
    FacingCasterFlags,
    CasterAuraState,
    TargetAuraState,
    CasterAuraStateNot,
    TargetAuraStateNot,
    CastingTimeIndex,
    RecoveryTime,
    CategoryRecoveryTime,
    InterruptFlags,
    AuraInterruptFlags,
    ChannelInterruptFlags,
    ProcFlags,
    ProcChance,
    ProcCharges,
    MaxLevel,
    BaseLevel,
    SpellLevel,
    DurationIndex,
    PowerType,
    ManaCost,
    ManaCostPerlevel,
    ManaPerSecond,
    ManaPerSecondPerLevel,
    RangeIndex,
    Speed,
    ModalNextSpell,
    StackAmount,
    Totem1,
    Totem2,
    Reagent1,
    Reagent2,
    Reagent3,
    Reagent4,
    Reagent5,
    Reagent6,
    Reagent7,
    Reagent8,
    ReagentCount1,
    ReagentCount2,
    ReagentCount3,
    ReagentCount4,
    ReagentCount5,
    ReagentCount6,
    ReagentCount7,
    ReagentCount8,
    EquippedItemClass,
    EquippedItemSubClassMask,
    EquippedItemInventoryTypeMask,
    Effect1,
    Effect2,
    Effect3,
    EffectDieSides1,
    EffectDieSides2,
    EffectDieSides3,
    EffectBaseDice1,
    EffectBaseDice2,
    EffectBaseDice3,
    EffectDicePerLevel1,
    EffectDicePerLevel2,
    EffectDicePerLevel3,
    EffectRealPointsPerLevel1,
    EffectRealPointsPerLevel2,
    EffectRealPointsPerLevel3,
    EffectBasePoints1,
    EffectBasePoints2,
    EffectBasePoints3,
    EffectMechanic1,
    EffectMechanic2,
    EffectMechanic3,
    EffectImplicitTargetA1,
    EffectImplicitTargetA2,
    EffectImplicitTargetA3,
    EffectImplicitTargetB1,
    EffectImplicitTargetB2,
    EffectImplicitTargetB3,
    EffectRadiusIndex1,
    EffectRadiusIndex2,
    EffectRadiusIndex3,
    EffectApplyAuraName1,
    EffectApplyAuraName2,
    EffectApplyAuraName3,
    EffectAmplitude1,
    EffectAmplitude2,
    EffectAmplitude3,
    EffectMultipleValue1,
    EffectMultipleValue2,
    EffectMultipleValue3,
    EffectChainTarget1,
    EffectChainTarget2,
    EffectChainTarget3,
    EffectItemType1,
    EffectItemType2,
    EffectItemType3,
    EffectMiscValue1,
    EffectMiscValue2,
    EffectMiscValue3,
    EffectMiscValueB1,
    EffectMiscValueB2,
    EffectMiscValueB3,
    EffectTriggerSpell1,
    EffectTriggerSpell2,
    EffectTriggerSpell3,
    EffectPointsPerComboPoint1,
    EffectPointsPerComboPoint2,
    EffectPointsPerComboPoint3,
    SpellVisual,
    SpellIconID,
    ActiveIconID,
    SpellPriority,
    SpellName,
    SpellName2,
    SpellName3,
    SpellName4,
    SpellName5,
    SpellName6,
    SpellName7,
    SpellName8,
    SpellName9,
    SpellName10,
    SpellName11,
    SpellName12,
    SpellName13,
    SpellName14,
    SpellName15,
    SpellName16,
    Rank1,
    Rank2,
    Rank3,
    Rank4,
    Rank5,
    Rank6,
    Rank7,
    Rank8,
    Rank9,
    Rank10,
    Rank11,
    Rank12,
    Rank13,
    Rank14,
    Rank15,
    Rank16,
    ManaCostPercentage,
    StartRecoveryCategory,
    StartRecoveryTime,
    MaxTargetLevel,
    SpellFamilyName,
    SpellFamilyFlags,
    MaxAffectedTargets,
    DmgClass,
    PreventionType,
    StanceBarOrder,
    DmgMultiplier1,
    DmgMultiplier2,
    DmgMultiplier3,
    MinFactionId,
    MinReputation,
    RequiredAuraVision,
    TotemCategory1,
    TotemCategory2,
    AreaId,
    SchoolMask,
    IsServerSide,
    AttributesServerside
    FROM spell_template ORDER BY Id;",
        )
        .unwrap();

    let r = s
        .query_map([], |row| {
            Ok(TbcSpell {
                id: row.get(0).unwrap(),
                category: row.get(1).unwrap(),
                cast_ui: row.get(2).unwrap(),
                dispel: row.get(3).unwrap(),
                mechanic: row.get(4).unwrap(),
                attributes: row.get(5).unwrap(),
                attributes_ex: row.get(6).unwrap(),
                attributes_ex2: row.get(7).unwrap(),
                attributes_ex3: row.get(8).unwrap(),
                attributes_ex4: row.get(9).unwrap(),
                attributes_ex5: row.get(10).unwrap(),
                attributes_ex6: row.get(11).unwrap(),
                stances: row.get(12).unwrap(),
                stances_not: row.get(13).unwrap(),
                targets: row.get(14).unwrap(),
                target_creature_type: row.get(15).unwrap(),
                requires_spell_focus: row.get(16).unwrap(),
                facing_caster_flags: row.get(17).unwrap(),
                caster_aura_state: row.get(18).unwrap(),
                target_aura_state: row.get(19).unwrap(),
                caster_aura_state_not: row.get(20).unwrap(),
                target_aura_state_not: row.get(21).unwrap(),
                casting_time_index: row.get(22).unwrap(),
                recovery_time: row.get(23).unwrap(),
                category_recovery_time: row.get(24).unwrap(),
                interrupt_flags: row.get(25).unwrap(),
                aura_interrupt_flags: row.get(26).unwrap(),
                channel_interrupt_flags: row.get(27).unwrap(),
                proc_flags: row.get(28).unwrap(),
                proc_chance: row.get(29).unwrap(),
                proc_charges: row.get(30).unwrap(),
                max_level: row.get(31).unwrap(),
                base_level: row.get(32).unwrap(),
                spell_level: row.get(33).unwrap(),
                duration_index: row.get(34).unwrap(),
                power_type: row.get(35).unwrap(),
                mana_cost: row.get(36).unwrap(),
                mana_cost_perlevel: row.get(37).unwrap(),
                mana_per_second: row.get(38).unwrap(),
                mana_per_second_per_level: row.get(39).unwrap(),
                range_index: row.get(40).unwrap(),
                speed: row.get(41).unwrap(),
                modal_next_spell: row.get(42).unwrap(),
                stack_amount: row.get(43).unwrap(),
                totem1: row.get(44).unwrap(),
                totem2: row.get(45).unwrap(),
                reagent1: row.get(46).unwrap(),
                reagent2: row.get(47).unwrap(),
                reagent3: row.get(48).unwrap(),
                reagent4: row.get(49).unwrap(),
                reagent5: row.get(50).unwrap(),
                reagent6: row.get(51).unwrap(),
                reagent7: row.get(52).unwrap(),
                reagent8: row.get(53).unwrap(),
                reagent_count1: row.get(54).unwrap(),
                reagent_count2: row.get(55).unwrap(),
                reagent_count3: row.get(56).unwrap(),
                reagent_count4: row.get(57).unwrap(),
                reagent_count5: row.get(58).unwrap(),
                reagent_count6: row.get(59).unwrap(),
                reagent_count7: row.get(60).unwrap(),
                reagent_count8: row.get(61).unwrap(),
                equipped_item_class: row.get(62).unwrap(),
                equipped_item_sub_class_mask: row.get(63).unwrap(),
                equipped_item_inventory_type_mask: row.get(64).unwrap(),
                effect1: row.get(65).unwrap(),
                effect2: row.get(66).unwrap(),
                effect3: row.get(67).unwrap(),
                effect_die_sides1: row.get(68).unwrap(),
                effect_die_sides2: row.get(69).unwrap(),
                effect_die_sides3: row.get(70).unwrap(),
                effect_base_dice1: row.get(71).unwrap(),
                effect_base_dice2: row.get(72).unwrap(),
                effect_base_dice3: row.get(73).unwrap(),
                effect_dice_per_level1: row.get(74).unwrap(),
                effect_dice_per_level2: row.get(75).unwrap(),
                effect_dice_per_level3: row.get(76).unwrap(),
                effect_real_points_per_level1: row.get(77).unwrap(),
                effect_real_points_per_level2: row.get(78).unwrap(),
                effect_real_points_per_level3: row.get(79).unwrap(),
                effect_base_points1: row.get(80).unwrap(),
                effect_base_points2: row.get(81).unwrap(),
                effect_base_points3: row.get(82).unwrap(),
                effect_mechanic1: row.get(83).unwrap(),
                effect_mechanic2: row.get(84).unwrap(),
                effect_mechanic3: row.get(85).unwrap(),
                effect_implicit_target_a1: row.get(86).unwrap(),
                effect_implicit_target_a2: row.get(87).unwrap(),
                effect_implicit_target_a3: row.get(88).unwrap(),
                effect_implicit_target_b1: row.get(89).unwrap(),
                effect_implicit_target_b2: row.get(90).unwrap(),
                effect_implicit_target_b3: row.get(91).unwrap(),
                effect_radius_index1: row.get(92).unwrap(),
                effect_radius_index2: row.get(93).unwrap(),
                effect_radius_index3: row.get(94).unwrap(),
                effect_apply_aura_name1: row.get(95).unwrap(),
                effect_apply_aura_name2: row.get(96).unwrap(),
                effect_apply_aura_name3: row.get(97).unwrap(),
                effect_amplitude1: row.get(98).unwrap(),
                effect_amplitude2: row.get(99).unwrap(),
                effect_amplitude3: row.get(100).unwrap(),
                effect_multiple_value1: row.get(101).unwrap(),
                effect_multiple_value2: row.get(102).unwrap(),
                effect_multiple_value3: row.get(103).unwrap(),
                effect_chain_target1: row.get(104).unwrap(),
                effect_chain_target2: row.get(105).unwrap(),
                effect_chain_target3: row.get(106).unwrap(),
                effect_item_type1: row.get(107).unwrap(),
                effect_item_type2: row.get(108).unwrap(),
                effect_item_type3: row.get(109).unwrap(),
                effect_misc_value1: row.get(110).unwrap(),
                effect_misc_value2: row.get(111).unwrap(),
                effect_misc_value3: row.get(112).unwrap(),
                effect_misc_value_b1: row.get(113).unwrap(),
                effect_misc_value_b2: row.get(114).unwrap(),
                effect_misc_value_b3: row.get(115).unwrap(),
                effect_trigger_spell1: row.get(116).unwrap(),
                effect_trigger_spell2: row.get(117).unwrap(),
                effect_trigger_spell3: row.get(118).unwrap(),
                effect_points_per_combo_point1: row.get(119).unwrap(),
                effect_points_per_combo_point2: row.get(120).unwrap(),
                effect_points_per_combo_point3: row.get(121).unwrap(),
                spell_visual: row.get(122).unwrap(),
                spell_icon_id: row.get(123).unwrap(),
                active_icon_id: row.get(124).unwrap(),
                spell_priority: row.get(125).unwrap(),
                spell_name: row.get(126).unwrap(),
                spell_name2: row.get(127).unwrap(),
                spell_name3: row.get(128).unwrap(),
                spell_name4: row.get(129).unwrap(),
                spell_name5: row.get(130).unwrap(),
                spell_name6: row.get(131).unwrap(),
                spell_name7: row.get(132).unwrap(),
                spell_name8: row.get(133).unwrap(),
                spell_name9: row.get(134).unwrap(),
                spell_name10: row.get(135).unwrap(),
                spell_name11: row.get(136).unwrap(),
                spell_name12: row.get(137).unwrap(),
                spell_name13: row.get(138).unwrap(),
                spell_name14: row.get(139).unwrap(),
                spell_name15: row.get(140).unwrap(),
                spell_name16: row.get(141).unwrap(),
                rank1: row.get(142).unwrap(),
                rank2: row.get(143).unwrap(),
                rank3: row.get(144).unwrap(),
                rank4: row.get(145).unwrap(),
                rank5: row.get(146).unwrap(),
                rank6: row.get(147).unwrap(),
                rank7: row.get(148).unwrap(),
                rank8: row.get(149).unwrap(),
                rank9: row.get(150).unwrap(),
                rank10: row.get(151).unwrap(),
                rank11: row.get(152).unwrap(),
                rank12: row.get(153).unwrap(),
                rank13: row.get(154).unwrap(),
                rank14: row.get(155).unwrap(),
                rank15: row.get(156).unwrap(),
                rank16: row.get(157).unwrap(),
                mana_cost_percentage: row.get(158).unwrap(),
                start_recovery_category: row.get(159).unwrap(),
                start_recovery_time: row.get(160).unwrap(),
                max_target_level: row.get(161).unwrap(),
                spell_family_name: row.get(162).unwrap(),
                spell_family_flags: row.get(163).unwrap(),
                max_affected_targets: row.get(164).unwrap(),
                dmg_class: row.get(165).unwrap(),
                prevention_type: row.get(166).unwrap(),
                stance_bar_order: row.get(167).unwrap(),
                dmg_multiplier1: row.get(168).unwrap(),
                dmg_multiplier2: row.get(169).unwrap(),
                dmg_multiplier3: row.get(170).unwrap(),
                min_faction_id: row.get(171).unwrap(),
                min_reputation: row.get(172).unwrap(),
                required_aura_vision: row.get(173).unwrap(),
                totem_category1: row.get(174).unwrap(),
                totem_category2: row.get(175).unwrap(),
                area_id: row.get(176).unwrap(),
                school_mask: row.get(177).unwrap(),
                is_server_side: row.get(178).unwrap(),
                attributes_serverside: row.get(179).unwrap(),
            })
        })
        .unwrap();

    r.map(|a| a.unwrap()).collect()
}
