// AUTOGENERATED_START
#![allow(clippy::too_many_arguments)]
use crate::vanilla::{
    AllowedClass,
    AllowedRace,
    Area,
    BagFamily,
    Bonding,
    Faction,
    InventoryType,
    ItemClassAndSubClass,
    ItemDamageType,
    ItemFlag,
    ItemQuality,
    ItemSet,
    Language,
    Map,
    PageTextMaterial,
    PvpRank,
    SheatheType,
    Skill,
    SpellSchool,
    SpellTriggerType,
};

#[derive(Debug, Copy, Clone)]
pub struct Item {
    entry: u32,
    class_and_sub_class: ItemClassAndSubClass,
    name: &'static str,
    display_id: u32,
    quality: ItemQuality,
    flags: ItemFlag,
    buy_count: i32,
    buy_price: i32,
    sell_price: i32,
    inventory_type: InventoryType,
    allowed_class: AllowedClass,
    allowed_race: AllowedRace,
    item_level: i32,
    required_level: i32,
    required_skill: Skill,
    required_skill_rank: i32,
    required_spell: i32,
    required_honor_rank: PvpRank,
    required_faction: Faction,
    required_reputation_rank: i32,
    max_count: i32,
    stackable: i32,
    container_slots: i32,
    agility: i32,
    strength: i32,
    stamina: i32,
    intellect: i32,
    spirit: i32,
    armor: i32,
    fire_res: i32,
    nature_res: i32,
    frost_res: i32,
    shadow_res: i32,
    arcane_res: i32,
    delay: i32,
    ammo_type: i32,
    ranged_mod_range: f32,
    bonding: Bonding,
    description: &'static str,
    page_text: i32,
    language: Language,
    page_text_material: PageTextMaterial,
    start_quest: i32,
    lock_id: i32,
    material: i32,
    sheathe_type: SheatheType,
    random_property: i32,
    block: i32,
    item_set: ItemSet,
    max_durability: i32,
    area: Area,
    map: Map,
    bag_family: BagFamily,
    disenchant_id: i32,
    food_type: i32,
    min_money_loot: i32,
    max_money_loot: i32,
    duration: i32,
    extra_flags: i32,
    damages: [ItemDamageType; 5],
    spells: [Spells; 5],
}

impl Item {
    pub const fn new(
        entry: u32,
        class_and_sub_class: ItemClassAndSubClass,
        name: &'static str,
        display_id: u32,
        quality: ItemQuality,
        flags: ItemFlag,
        buy_count: i32,
        buy_price: i32,
        sell_price: i32,
        inventory_type: InventoryType,
        allowed_class: AllowedClass,
        allowed_race: AllowedRace,
        item_level: i32,
        required_level: i32,
        required_skill: Skill,
        required_skill_rank: i32,
        required_spell: i32,
        required_honor_rank: PvpRank,
        required_faction: Faction,
        required_reputation_rank: i32,
        max_count: i32,
        stackable: i32,
        container_slots: i32,
        agility: i32,
        strength: i32,
        stamina: i32,
        intellect: i32,
        spirit: i32,
        armor: i32,
        fire_res: i32,
        nature_res: i32,
        frost_res: i32,
        shadow_res: i32,
        arcane_res: i32,
        delay: i32,
        ammo_type: i32,
        ranged_mod_range: f32,
        bonding: Bonding,
        description: &'static str,
        page_text: i32,
        language: Language,
        page_text_material: PageTextMaterial,
        start_quest: i32,
        lock_id: i32,
        material: i32,
        sheathe_type: SheatheType,
        random_property: i32,
        block: i32,
        item_set: ItemSet,
        max_durability: i32,
        area: Area,
        map: Map,
        bag_family: BagFamily,
        disenchant_id: i32,
        food_type: i32,
        min_money_loot: i32,
        max_money_loot: i32,
        duration: i32,
        extra_flags: i32,
        dmg_min1: f32,
        dmg_max1: f32,
        dmg_type1: SpellSchool,
        dmg_min2: f32,
        dmg_max2: f32,
        dmg_type2: SpellSchool,
        dmg_min3: f32,
        dmg_max3: f32,
        dmg_type3: SpellSchool,
        dmg_min4: f32,
        dmg_max4: f32,
        dmg_type4: SpellSchool,
        dmg_min5: f32,
        dmg_max5: f32,
        dmg_type5: SpellSchool,
        spell_id_1: i32,
        spell_trigger_1: SpellTriggerType,
        spell_charges_1: i32,
        spell_ppm_rate_1: f32,
        spell_cooldown_1: i32,
        spell_category_1: i32,
        spell_category_cooldown_1: i32,
        spell_id_2: i32,
        spell_trigger_2: SpellTriggerType,
        spell_charges_2: i32,
        spell_ppm_rate_2: f32,
        spell_cooldown_2: i32,
        spell_category_2: i32,
        spell_category_cooldown_2: i32,
        spell_id_3: i32,
        spell_trigger_3: SpellTriggerType,
        spell_charges_3: i32,
        spell_ppm_rate_3: f32,
        spell_cooldown_3: i32,
        spell_category_3: i32,
        spell_category_cooldown_3: i32,
        spell_id_4: i32,
        spell_trigger_4: SpellTriggerType,
        spell_charges_4: i32,
        spell_ppm_rate_4: f32,
        spell_cooldown_4: i32,
        spell_category_4: i32,
        spell_category_cooldown_4: i32,
        spell_id_5: i32,
        spell_trigger_5: SpellTriggerType,
        spell_charges_5: i32,
        spell_ppm_rate_5: f32,
        spell_cooldown_5: i32,
        spell_category_5: i32,
        spell_category_cooldown_5: i32,
    ) -> Self {
        Self {
            entry,
            class_and_sub_class,
            name,
            display_id,
            quality,
            flags,
            buy_count,
            buy_price,
            sell_price,
            inventory_type,
            allowed_class,
            allowed_race,
            item_level,
            required_level,
            required_skill,
            required_skill_rank,
            required_spell,
            required_honor_rank,
            required_faction,
            required_reputation_rank,
            max_count,
            stackable,
            container_slots,
            agility,
            strength,
            stamina,
            intellect,
            spirit,
            armor,
            fire_res,
            nature_res,
            frost_res,
            shadow_res,
            arcane_res,
            delay,
            ammo_type,
            ranged_mod_range,
            bonding,
            description,
            page_text,
            language,
            page_text_material,
            start_quest,
            lock_id,
            material,
            sheathe_type,
            random_property,
            block,
            item_set,
            max_durability,
            area,
            map,
            bag_family,
            disenchant_id,
            food_type,
            min_money_loot,
            max_money_loot,
            duration,
            extra_flags,
            damages: [
            ItemDamageType {
                damage_minimum: dmg_min1,
                damage_maximum: dmg_max1,
                school: dmg_type1,
            },
            ItemDamageType {
                damage_minimum: dmg_min2,
                damage_maximum: dmg_max2,
                school: dmg_type2,
            },
            ItemDamageType {
                damage_minimum: dmg_min3,
                damage_maximum: dmg_max3,
                school: dmg_type3,
            },
            ItemDamageType {
                damage_minimum: dmg_min4,
                damage_maximum: dmg_max4,
                school: dmg_type4,
            },
            ItemDamageType {
                damage_minimum: dmg_min5,
                damage_maximum: dmg_max5,
                school: dmg_type5,
            },
            ],
            spells: [
            Spells::new(
            spell_id_1,
            spell_trigger_1,
            spell_charges_1,
            spell_ppm_rate_1,
            spell_cooldown_1,
            spell_category_1,
            spell_category_cooldown_1,
            ),
            Spells::new(
            spell_id_2,
            spell_trigger_2,
            spell_charges_2,
            spell_ppm_rate_2,
            spell_cooldown_2,
            spell_category_2,
            spell_category_cooldown_2,
            ),
            Spells::new(
            spell_id_3,
            spell_trigger_3,
            spell_charges_3,
            spell_ppm_rate_3,
            spell_cooldown_3,
            spell_category_3,
            spell_category_cooldown_3,
            ),
            Spells::new(
            spell_id_4,
            spell_trigger_4,
            spell_charges_4,
            spell_ppm_rate_4,
            spell_cooldown_4,
            spell_category_4,
            spell_category_cooldown_4,
            ),
            Spells::new(
            spell_id_5,
            spell_trigger_5,
            spell_charges_5,
            spell_ppm_rate_5,
            spell_cooldown_5,
            spell_category_5,
            spell_category_cooldown_5,
            ),
            ],
        }
    }
    pub const fn entry(&self) -> u32 {
        self.entry
    }

    pub const fn class_and_sub_class(&self) -> ItemClassAndSubClass {
        self.class_and_sub_class
    }

    pub const fn name(&self) -> &'static str {
        self.name
    }

    pub const fn display_id(&self) -> u32 {
        self.display_id
    }

    pub const fn quality(&self) -> ItemQuality {
        self.quality
    }

    pub const fn flags(&self) -> ItemFlag {
        self.flags
    }

    pub const fn buy_count(&self) -> i32 {
        self.buy_count
    }

    pub const fn buy_price(&self) -> i32 {
        self.buy_price
    }

    pub const fn sell_price(&self) -> i32 {
        self.sell_price
    }

    pub const fn inventory_type(&self) -> InventoryType {
        self.inventory_type
    }

    pub const fn allowed_class(&self) -> AllowedClass {
        self.allowed_class
    }

    pub const fn allowed_race(&self) -> AllowedRace {
        self.allowed_race
    }

    pub const fn item_level(&self) -> i32 {
        self.item_level
    }

    pub const fn required_level(&self) -> i32 {
        self.required_level
    }

    pub const fn required_skill(&self) -> Skill {
        self.required_skill
    }

    pub const fn required_skill_rank(&self) -> i32 {
        self.required_skill_rank
    }

    pub const fn required_spell(&self) -> i32 {
        self.required_spell
    }

    pub const fn required_honor_rank(&self) -> PvpRank {
        self.required_honor_rank
    }

    pub const fn required_city_rank(&self) -> i32 {
        0
    }

    pub const fn required_faction(&self) -> Faction {
        self.required_faction
    }

    pub const fn required_reputation_rank(&self) -> i32 {
        self.required_reputation_rank
    }

    pub const fn max_count(&self) -> i32 {
        self.max_count
    }

    pub const fn stackable(&self) -> i32 {
        self.stackable
    }

    pub const fn container_slots(&self) -> i32 {
        self.container_slots
    }

    pub const fn mana(&self) -> i32 {
        0
    }

    pub const fn health(&self) -> i32 {
        0
    }

    pub const fn agility(&self) -> i32 {
        self.agility
    }

    pub const fn strength(&self) -> i32 {
        self.strength
    }

    pub const fn stamina(&self) -> i32 {
        self.stamina
    }

    pub const fn intellect(&self) -> i32 {
        self.intellect
    }

    pub const fn spirit(&self) -> i32 {
        self.spirit
    }

    pub const fn armor(&self) -> i32 {
        self.armor
    }

    pub const fn holy_res(&self) -> i32 {
        0
    }

    pub const fn fire_res(&self) -> i32 {
        self.fire_res
    }

    pub const fn nature_res(&self) -> i32 {
        self.nature_res
    }

    pub const fn frost_res(&self) -> i32 {
        self.frost_res
    }

    pub const fn shadow_res(&self) -> i32 {
        self.shadow_res
    }

    pub const fn arcane_res(&self) -> i32 {
        self.arcane_res
    }

    pub const fn delay(&self) -> i32 {
        self.delay
    }

    pub const fn ammo_type(&self) -> i32 {
        self.ammo_type
    }

    pub const fn ranged_mod_range(&self) -> f32 {
        self.ranged_mod_range
    }

    pub const fn bonding(&self) -> Bonding {
        self.bonding
    }

    pub const fn description(&self) -> &'static str {
        self.description
    }

    pub const fn page_text(&self) -> i32 {
        self.page_text
    }

    pub const fn language(&self) -> Language {
        self.language
    }

    pub const fn page_text_material(&self) -> PageTextMaterial {
        self.page_text_material
    }

    pub const fn start_quest(&self) -> i32 {
        self.start_quest
    }

    pub const fn lock_id(&self) -> i32 {
        self.lock_id
    }

    pub const fn material(&self) -> i32 {
        self.material
    }

    pub const fn sheathe_type(&self) -> SheatheType {
        self.sheathe_type
    }

    pub const fn random_property(&self) -> i32 {
        self.random_property
    }

    pub const fn block(&self) -> i32 {
        self.block
    }

    pub const fn item_set(&self) -> ItemSet {
        self.item_set
    }

    pub const fn max_durability(&self) -> i32 {
        self.max_durability
    }

    pub const fn area(&self) -> Area {
        self.area
    }

    pub const fn map(&self) -> Map {
        self.map
    }

    pub const fn bag_family(&self) -> BagFamily {
        self.bag_family
    }

    pub const fn disenchant_id(&self) -> i32 {
        self.disenchant_id
    }

    pub const fn food_type(&self) -> i32 {
        self.food_type
    }

    pub const fn min_money_loot(&self) -> i32 {
        self.min_money_loot
    }

    pub const fn max_money_loot(&self) -> i32 {
        self.max_money_loot
    }

    pub const fn duration(&self) -> i32 {
        self.duration
    }

    pub const fn extra_flags(&self) -> i32 {
        self.extra_flags
    }

    pub const fn damages(&self) -> &[ItemDamageType; 5] {
        &self.damages
    }

    pub const fn spells(&self) -> &[Spells; 5] {
        &self.spells
    }

}
#[derive(Debug, Copy, Clone)]
pub struct Spells {
    pub spell: i32,
    pub spell_trigger: SpellTriggerType,
    pub spell_charges: i32,
    pub spell_ppm_rate: f32,
    pub spell_cooldown: i32,
    pub spell_category: i32,
    pub spell_category_cooldown: i32,
}

impl Spells {
    pub const fn new(
        spell: i32,
        spell_trigger: SpellTriggerType,
        spell_charges: i32,
        spell_ppm_rate: f32,
        spell_cooldown: i32,
        spell_category: i32,
        spell_category_cooldown: i32,
    ) -> Self {
        Self {
            spell,
            spell_trigger,
            spell_charges,
            spell_ppm_rate,
            spell_cooldown,
            spell_category,
            spell_category_cooldown,
        }
    }
}
// AUTOGENERATED_END
