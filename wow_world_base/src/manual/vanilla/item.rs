// AUTOGENERATED_START
#![allow(clippy::too_many_arguments)]
use crate::vanilla::{
    AllowedClass,
    AllowedRace,
    Area,
    BagFamily,
    Bonding,
    Faction,
    InventoryType,
    ItemClassAndSubClass,
    ItemDamageType,
    ItemFlag,
    ItemQuality,
    ItemSet,
    Language,
    Map,
    PageTextMaterial,
    PvpRank,
    SheatheType,
    Skill,
    SpellSchool,
    SpellTriggerType,
};

#[derive(Debug, Copy, Clone)]
pub struct Item {
    entry: u16,
    class_and_sub_class: ItemClassAndSubClass,
    name: &'static str,
    display_id: u16,
    quality: ItemQuality,
    flags: ItemFlag,
    buy_count: i16,
    buy_price: i32,
    sell_price: i32,
    inventory_type: InventoryType,
    allowed_class: AllowedClass,
    allowed_race: AllowedRace,
    item_level: i8,
    required_level: i8,
    required_skill: Skill,
    required_skill_rank: i16,
    required_spell: i16,
    required_honor_rank: PvpRank,
    required_faction: Faction,
    required_reputation_rank: i8,
    max_count: i8,
    stackable: i16,
    container_slots: i8,
    agility: i8,
    strength: i8,
    stamina: i8,
    intellect: i16,
    spirit: i8,
    armor: i16,
    fire_res: i8,
    nature_res: i8,
    frost_res: i8,
    shadow_res: i8,
    arcane_res: i8,
    delay: i16,
    ammo_type: i8,
    ranged_mod_range: f32,
    bonding: Bonding,
    description: &'static str,
    page_text: i16,
    language: Language,
    page_text_material: PageTextMaterial,
    start_quest: i16,
    material: i8,
    sheathe_type: SheatheType,
    random_property: i16,
    block: i8,
    item_set: ItemSet,
    max_durability: i16,
    bag_family: BagFamily,
    disenchant_id: i8,
    food_type: i8,
    duration: i32,
    damages: &'static [ItemDamageType],
    spells: &'static [Spells],
}

impl Item {
    pub const fn new(
        entry: u16,
        class_and_sub_class: ItemClassAndSubClass,
        name: &'static str,
        display_id: u16,
        quality: ItemQuality,
        flags: ItemFlag,
        buy_count: i16,
        buy_price: i32,
        sell_price: i32,
        inventory_type: InventoryType,
        allowed_class: AllowedClass,
        allowed_race: AllowedRace,
        item_level: i8,
        required_level: i8,
        required_skill: Skill,
        required_skill_rank: i16,
        required_spell: i16,
        required_honor_rank: PvpRank,
        required_faction: Faction,
        required_reputation_rank: i8,
        max_count: i8,
        stackable: i16,
        container_slots: i8,
        agility: i8,
        strength: i8,
        stamina: i8,
        intellect: i16,
        spirit: i8,
        armor: i16,
        fire_res: i8,
        nature_res: i8,
        frost_res: i8,
        shadow_res: i8,
        arcane_res: i8,
        delay: i16,
        ammo_type: i8,
        ranged_mod_range: f32,
        bonding: Bonding,
        description: &'static str,
        page_text: i16,
        language: Language,
        page_text_material: PageTextMaterial,
        start_quest: i16,
        material: i8,
        sheathe_type: SheatheType,
        random_property: i16,
        block: i8,
        item_set: ItemSet,
        max_durability: i16,
        bag_family: BagFamily,
        disenchant_id: i8,
        food_type: i8,
        duration: i32,
        damages: &'static [ItemDamageType],
        spells: &'static [Spells],
    ) -> Self {
        Self {
            entry,
            class_and_sub_class,
            name,
            display_id,
            quality,
            flags,
            buy_count,
            buy_price,
            sell_price,
            inventory_type,
            allowed_class,
            allowed_race,
            item_level,
            required_level,
            required_skill,
            required_skill_rank,
            required_spell,
            required_honor_rank,
            required_faction,
            required_reputation_rank,
            max_count,
            stackable,
            container_slots,
            agility,
            strength,
            stamina,
            intellect,
            spirit,
            armor,
            fire_res,
            nature_res,
            frost_res,
            shadow_res,
            arcane_res,
            delay,
            ammo_type,
            ranged_mod_range,
            bonding,
            description,
            page_text,
            language,
            page_text_material,
            start_quest,
            material,
            sheathe_type,
            random_property,
            block,
            item_set,
            max_durability,
            bag_family,
            disenchant_id,
            food_type,
            duration,
            damages,
            spells,
        }
    }
    pub const fn entry(&self) -> u32 {
        self.entry as u32
    }

    pub const fn class_and_sub_class(&self) -> ItemClassAndSubClass {
        self.class_and_sub_class
    }

    pub const fn name(&self) -> &'static str {
        self.name
    }

    pub const fn display_id(&self) -> u32 {
        self.display_id as u32
    }

    pub const fn quality(&self) -> ItemQuality {
        self.quality
    }

    pub const fn flags(&self) -> ItemFlag {
        self.flags
    }

    pub const fn buy_count(&self) -> i32 {
        self.buy_count as i32
    }

    pub const fn buy_price(&self) -> i32 {
        self.buy_price
    }

    pub const fn sell_price(&self) -> i32 {
        self.sell_price
    }

    pub const fn inventory_type(&self) -> InventoryType {
        self.inventory_type
    }

    pub const fn allowed_class(&self) -> AllowedClass {
        self.allowed_class
    }

    pub const fn allowed_race(&self) -> AllowedRace {
        self.allowed_race
    }

    pub const fn item_level(&self) -> i32 {
        self.item_level as i32
    }

    pub const fn required_level(&self) -> i32 {
        self.required_level as i32
    }

    pub const fn required_skill(&self) -> Skill {
        self.required_skill
    }

    pub const fn required_skill_rank(&self) -> i32 {
        self.required_skill_rank as i32
    }

    pub const fn required_spell(&self) -> i32 {
        self.required_spell as i32
    }

    pub const fn required_honor_rank(&self) -> PvpRank {
        self.required_honor_rank
    }

    /// Always returns `0`.
    pub const fn required_city_rank(&self) -> i32 {
        0
    }

    pub const fn required_faction(&self) -> Faction {
        self.required_faction
    }

    pub const fn required_reputation_rank(&self) -> i32 {
        self.required_reputation_rank as i32
    }

    pub const fn max_count(&self) -> i32 {
        self.max_count as i32
    }

    pub const fn stackable(&self) -> i32 {
        self.stackable as i32
    }

    pub const fn container_slots(&self) -> i32 {
        self.container_slots as i32
    }

    /// Always returns `0`.
    pub const fn mana(&self) -> i32 {
        0
    }

    /// Always returns `0`.
    pub const fn health(&self) -> i32 {
        0
    }

    pub const fn agility(&self) -> i32 {
        self.agility as i32
    }

    pub const fn strength(&self) -> i32 {
        self.strength as i32
    }

    pub const fn stamina(&self) -> i32 {
        self.stamina as i32
    }

    pub const fn intellect(&self) -> i32 {
        self.intellect as i32
    }

    pub const fn spirit(&self) -> i32 {
        self.spirit as i32
    }

    pub const fn armor(&self) -> i32 {
        self.armor as i32
    }

    /// Always returns `0`.
    pub const fn holy_res(&self) -> i32 {
        0
    }

    pub const fn fire_res(&self) -> i32 {
        self.fire_res as i32
    }

    pub const fn nature_res(&self) -> i32 {
        self.nature_res as i32
    }

    pub const fn frost_res(&self) -> i32 {
        self.frost_res as i32
    }

    pub const fn shadow_res(&self) -> i32 {
        self.shadow_res as i32
    }

    pub const fn arcane_res(&self) -> i32 {
        self.arcane_res as i32
    }

    pub const fn delay(&self) -> i32 {
        self.delay as i32
    }

    pub const fn ammo_type(&self) -> i32 {
        self.ammo_type as i32
    }

    pub const fn ranged_mod_range(&self) -> f32 {
        self.ranged_mod_range
    }

    pub const fn bonding(&self) -> Bonding {
        self.bonding
    }

    pub const fn description(&self) -> &'static str {
        self.description
    }

    pub const fn page_text(&self) -> i32 {
        self.page_text as i32
    }

    pub const fn language(&self) -> Language {
        self.language
    }

    pub const fn page_text_material(&self) -> PageTextMaterial {
        self.page_text_material
    }

    pub const fn start_quest(&self) -> i32 {
        self.start_quest as i32
    }

    /// Returns `0` except for specific item entries.
    pub const fn lock_id(&self) -> i32 {
        match self.entry {
            4632 | 6354 | 6712 | 16882 => 5,
            4633 => 23,
            4634 | 6355 | 16883 => 24,
            4636 => 60,
            4637 | 13875 | 16884 => 61,
            4638 | 5758 | 5759 | 5760 => 62,
            7209 => 319,
            13918 | 16885 => 599,
            12033 => 600,
            _ => 0,
        }
    }

    pub const fn material(&self) -> i32 {
        self.material as i32
    }

    pub const fn sheathe_type(&self) -> SheatheType {
        self.sheathe_type
    }

    pub const fn random_property(&self) -> i32 {
        self.random_property as i32
    }

    pub const fn block(&self) -> i32 {
        self.block as i32
    }

    pub const fn item_set(&self) -> ItemSet {
        self.item_set
    }

    pub const fn max_durability(&self) -> i32 {
        self.max_durability as i32
    }

    /// Returns `Area::None` except for specific item entries.
    pub const fn area(&self) -> Area {
        match self.entry {
            18266 | 18268 => Area::DireMaul0,
            17306 | 17323 | 17324 | 17325 | 17326 | 17327 | 17328 | 17353 | 17422 | 17423 | 17442 | 17502 | 17503 | 17504 | 17505 | 17506 | 17507 | 17522 | 17542 | 17626 | 17642 | 17643 | 17689 | 21038 => Area::AlteracValley0,
            _ => Area::None,
        }
    }

    /// Returns `Map::EasternKingdoms` except for specific item entries.
    pub const fn map(&self) -> Map {
        match self.entry {
            18266 | 18268 => Map::DireMaul,
            _ => Map::EasternKingdoms,
        }
    }

    pub const fn bag_family(&self) -> BagFamily {
        self.bag_family
    }

    pub const fn disenchant_id(&self) -> i32 {
        self.disenchant_id as i32
    }

    pub const fn food_type(&self) -> i32 {
        self.food_type as i32
    }

    /// Returns `0` except for specific item entries.
    pub const fn min_money_loot(&self) -> i32 {
        match self.entry {
            20708 => 50,
            20766 | 21113 | 21150 | 21228 => 100,
            6827 => 200,
            11966 => 425,
            20767 => 500,
            5335 => 750,
            20768 => 1000,
            10456 => 2037,
            11937 => 6235,
            23022 => 50000,
            20602 => 600000,
            _ => 0,
        }
    }

    /// Returns `0` except for specific item entries.
    pub const fn max_money_loot(&self) -> i32 {
        match self.entry {
            20708 => 100,
            21113 | 21150 | 21228 => 200,
            6827 => 300,
            20766 => 1000,
            11966 => 1275,
            20767 => 1500,
            5335 => 2250,
            20768 => 2500,
            10456 => 6110,
            11937 => 18704,
            23022 => 50000,
            20602 => 1000000,
            _ => 0,
        }
    }

    pub const fn duration(&self) -> i32 {
        self.duration
    }

    /// Returns `0` except for specific item entries.
    pub const fn extra_flags(&self) -> i32 {
        match self.entry {
            5810 | 9365 | 9437 | 9438 | 9439 | 9440 | 9441 | 9442 | 10338 | 10684 | 10790 | 10791 | 11885 | 12586 | 19807 | 20391 | 20392 | 20557 | 20561 | 20562 | 20563 | 20564 | 20565 | 20566 | 20567 | 20568 | 20569 | 20570 | 20571 | 20572 | 20573 | 20574 | 21038 | 21171 | 21174 | 21212 | 21328 | 22736 | 23247 | 23379 => 1,
            18706 => 2,
            _ => 0,
        }
    }

    pub const fn damages_array(&self) -> &[ItemDamageType; 5] {
        unimplemented!()
    }

    pub const fn damages(&self) -> &[ItemDamageType] {
        self.damages
    }

    pub const fn spells_array(&self) -> &[Spells; 5] {
        unimplemented!()
    }

    pub const fn spells(&self) -> &[Spells] {
        self.spells
    }

}
#[derive(Debug, Copy, Clone)]
pub struct Spells {
    pub spell: i32,
    pub spell_trigger: SpellTriggerType,
    pub spell_charges: i32,
    pub spell_ppm_rate: f32,
    pub spell_cooldown: i32,
    pub spell_category: i32,
    pub spell_category_cooldown: i32,
}

impl Spells {
    pub const fn new(
        spell: i32,
        spell_trigger: SpellTriggerType,
        spell_charges: i32,
        spell_ppm_rate: f32,
        spell_cooldown: i32,
        spell_category: i32,
        spell_category_cooldown: i32,
    ) -> Self {
        Self {
            spell,
            spell_trigger,
            spell_charges,
            spell_ppm_rate,
            spell_cooldown,
            spell_category,
            spell_category_cooldown,
        }
    }
}
// AUTOGENERATED_END
