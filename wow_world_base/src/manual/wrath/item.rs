// AUTOGENERATED_START
#![allow(clippy::too_many_arguments)]
use crate::wrath::{
    AllowedClass,
    AllowedRace,
    Area,
    BagFamily,
    Bonding,
    Faction,
    InventoryType,
    ItemClassAndSubClass,
    ItemDamageType,
    ItemFlag,
    ItemFlag2,
    ItemQuality,
    ItemSet,
    ItemSocket,
    ItemStat,
    Language,
    Map,
    PageTextMaterial,
    PvpRank,
    SheatheType,
    Skill,
    SpellSchool,
    SpellTriggerType,
};

#[derive(Debug, Copy, Clone)]
pub struct Item {
    entry: u16,
    class_and_sub_class: ItemClassAndSubClass,
    sound_override_sub_class: i8,
    name: &'static str,
    display_id: u32,
    quality: ItemQuality,
    flags: ItemFlag,
    flags2: ItemFlag2,
    buy_count: i16,
    buy_price: i32,
    sell_price: i32,
    inventory_type: InventoryType,
    allowed_class: AllowedClass,
    allowed_race: AllowedRace,
    item_level: i16,
    required_level: i8,
    required_skill: Skill,
    required_skill_rank: i16,
    required_spell: i32,
    required_faction: Faction,
    required_reputation_rank: i8,
    max_count: i16,
    stackable: i16,
    container_slots: i8,
    stats_count: i8,
    armor: i16,
    fire_res: i8,
    nature_res: i8,
    frost_res: i8,
    shadow_res: i8,
    arcane_res: i8,
    delay: i16,
    ammo_type: i8,
    ranged_mod_range: f32,
    bonding: Bonding,
    description: &'static str,
    page_text: i16,
    language: Language,
    page_text_material: PageTextMaterial,
    start_quest: i16,
    material: i8,
    sheathe_type: SheatheType,
    random_property: i16,
    random_suffix: i16,
    block: i16,
    item_set: ItemSet,
    max_durability: i16,
    area: Area,
    bag_family: BagFamily,
    totem_category: i16,
    socket_bonus: i16,
    gem_properties: i16,
    required_disenchant_skill: i16,
    armor_damage_modifier: f32,
    duration: i32,
    item_limit_category: i8,
    holiday_id: i16,
    disenchant_id: i8,
    food_type: i8,
    sockets: [ItemSocket; 3],
    damages: [ItemDamageType; 2],
    stats: [ItemStat; 10],
    spells: [Spells; 5],
}

impl Item {
    pub const fn new(
        entry: u16,
        class_and_sub_class: ItemClassAndSubClass,
        sound_override_sub_class: i8,
        name: &'static str,
        display_id: u32,
        quality: ItemQuality,
        flags: ItemFlag,
        flags2: ItemFlag2,
        buy_count: i16,
        buy_price: i32,
        sell_price: i32,
        inventory_type: InventoryType,
        allowed_class: AllowedClass,
        allowed_race: AllowedRace,
        item_level: i16,
        required_level: i8,
        required_skill: Skill,
        required_skill_rank: i16,
        required_spell: i32,
        required_faction: Faction,
        required_reputation_rank: i8,
        max_count: i16,
        stackable: i16,
        container_slots: i8,
        stats_count: i8,
        armor: i16,
        fire_res: i8,
        nature_res: i8,
        frost_res: i8,
        shadow_res: i8,
        arcane_res: i8,
        delay: i16,
        ammo_type: i8,
        ranged_mod_range: f32,
        bonding: Bonding,
        description: &'static str,
        page_text: i16,
        language: Language,
        page_text_material: PageTextMaterial,
        start_quest: i16,
        material: i8,
        sheathe_type: SheatheType,
        random_property: i16,
        random_suffix: i16,
        block: i16,
        item_set: ItemSet,
        max_durability: i16,
        area: Area,
        bag_family: BagFamily,
        totem_category: i16,
        socket_bonus: i16,
        gem_properties: i16,
        required_disenchant_skill: i16,
        armor_damage_modifier: f32,
        duration: i32,
        item_limit_category: i8,
        holiday_id: i16,
        disenchant_id: i8,
        food_type: i8,
        socket_color_1: u32,
        socket_content_1: u32,
        socket_color_2: u32,
        socket_content_2: u32,
        socket_color_3: u32,
        socket_content_3: u32,
        dmg_min1: f32,
        dmg_max1: f32,
        dmg_type1: SpellSchool,
        dmg_min2: f32,
        dmg_max2: f32,
        dmg_type2: SpellSchool,
        stat_type1: u32,
        stat_value1: i32,
        stat_type2: u32,
        stat_value2: i32,
        stat_type3: u32,
        stat_value3: i32,
        stat_type4: u32,
        stat_value4: i32,
        stat_type5: u32,
        stat_value5: i32,
        stat_type6: u32,
        stat_value6: i32,
        stat_type7: u32,
        stat_value7: i32,
        stat_type8: u32,
        stat_value8: i32,
        stat_type9: u32,
        stat_value9: i32,
        stat_type10: u32,
        stat_value10: i32,
        spell_id_1: i32,
        spell_trigger_1: SpellTriggerType,
        spell_charges_1: i32,
        spell_ppm_rate_1: f32,
        spell_cooldown_1: i32,
        spell_category_1: i32,
        spell_category_cooldown_1: i32,
        spell_id_2: i32,
        spell_trigger_2: SpellTriggerType,
        spell_charges_2: i32,
        spell_ppm_rate_2: f32,
        spell_cooldown_2: i32,
        spell_category_2: i32,
        spell_category_cooldown_2: i32,
        spell_id_3: i32,
        spell_trigger_3: SpellTriggerType,
        spell_charges_3: i32,
        spell_ppm_rate_3: f32,
        spell_cooldown_3: i32,
        spell_category_3: i32,
        spell_category_cooldown_3: i32,
        spell_id_4: i32,
        spell_trigger_4: SpellTriggerType,
        spell_charges_4: i32,
        spell_ppm_rate_4: f32,
        spell_cooldown_4: i32,
        spell_category_4: i32,
        spell_category_cooldown_4: i32,
        spell_id_5: i32,
        spell_trigger_5: SpellTriggerType,
        spell_charges_5: i32,
        spell_ppm_rate_5: f32,
        spell_cooldown_5: i32,
        spell_category_5: i32,
        spell_category_cooldown_5: i32,
    ) -> Self {
        Self {
            entry,
            class_and_sub_class,
            sound_override_sub_class,
            name,
            display_id,
            quality,
            flags,
            flags2,
            buy_count,
            buy_price,
            sell_price,
            inventory_type,
            allowed_class,
            allowed_race,
            item_level,
            required_level,
            required_skill,
            required_skill_rank,
            required_spell,
            required_faction,
            required_reputation_rank,
            max_count,
            stackable,
            container_slots,
            stats_count,
            armor,
            fire_res,
            nature_res,
            frost_res,
            shadow_res,
            arcane_res,
            delay,
            ammo_type,
            ranged_mod_range,
            bonding,
            description,
            page_text,
            language,
            page_text_material,
            start_quest,
            material,
            sheathe_type,
            random_property,
            random_suffix,
            block,
            item_set,
            max_durability,
            area,
            bag_family,
            totem_category,
            socket_bonus,
            gem_properties,
            required_disenchant_skill,
            armor_damage_modifier,
            duration,
            item_limit_category,
            holiday_id,
            disenchant_id,
            food_type,
            sockets: [
            ItemSocket {
                color: socket_color_1,
                content: socket_content_1,
            },
            ItemSocket {
                color: socket_color_2,
                content: socket_content_2,
            },
            ItemSocket {
                color: socket_color_3,
                content: socket_content_3,
            },
            ],
            damages: [
            ItemDamageType {
                damage_minimum: dmg_min1,
                damage_maximum: dmg_max1,
                school: dmg_type1,
            },
            ItemDamageType {
                damage_minimum: dmg_min2,
                damage_maximum: dmg_max2,
                school: dmg_type2,
            },
            ],
            stats: [
            ItemStat {
                stat_type: stat_type1,
                value: stat_value1,
            },
            ItemStat {
                stat_type: stat_type2,
                value: stat_value2,
            },
            ItemStat {
                stat_type: stat_type3,
                value: stat_value3,
            },
            ItemStat {
                stat_type: stat_type4,
                value: stat_value4,
            },
            ItemStat {
                stat_type: stat_type5,
                value: stat_value5,
            },
            ItemStat {
                stat_type: stat_type6,
                value: stat_value6,
            },
            ItemStat {
                stat_type: stat_type7,
                value: stat_value7,
            },
            ItemStat {
                stat_type: stat_type8,
                value: stat_value8,
            },
            ItemStat {
                stat_type: stat_type9,
                value: stat_value9,
            },
            ItemStat {
                stat_type: stat_type10,
                value: stat_value10,
            },
            ],
            spells: [
            Spells::new(
            spell_id_1,
            spell_trigger_1,
            spell_charges_1,
            spell_ppm_rate_1,
            spell_cooldown_1,
            spell_category_1,
            spell_category_cooldown_1,
            ),
            Spells::new(
            spell_id_2,
            spell_trigger_2,
            spell_charges_2,
            spell_ppm_rate_2,
            spell_cooldown_2,
            spell_category_2,
            spell_category_cooldown_2,
            ),
            Spells::new(
            spell_id_3,
            spell_trigger_3,
            spell_charges_3,
            spell_ppm_rate_3,
            spell_cooldown_3,
            spell_category_3,
            spell_category_cooldown_3,
            ),
            Spells::new(
            spell_id_4,
            spell_trigger_4,
            spell_charges_4,
            spell_ppm_rate_4,
            spell_cooldown_4,
            spell_category_4,
            spell_category_cooldown_4,
            ),
            Spells::new(
            spell_id_5,
            spell_trigger_5,
            spell_charges_5,
            spell_ppm_rate_5,
            spell_cooldown_5,
            spell_category_5,
            spell_category_cooldown_5,
            ),
            ],
        }
    }
    pub const fn entry(&self) -> u32 {
        self.entry as u32
    }

    pub const fn class_and_sub_class(&self) -> ItemClassAndSubClass {
        self.class_and_sub_class
    }

    pub const fn sound_override_sub_class(&self) -> i32 {
        self.sound_override_sub_class as i32
    }

    pub const fn name(&self) -> &'static str {
        self.name
    }

    pub const fn display_id(&self) -> u32 {
        self.display_id
    }

    pub const fn quality(&self) -> ItemQuality {
        self.quality
    }

    pub const fn flags(&self) -> ItemFlag {
        self.flags
    }

    pub const fn flags2(&self) -> ItemFlag2 {
        self.flags2
    }

    pub const fn buy_count(&self) -> i32 {
        self.buy_count as i32
    }

    pub const fn buy_price(&self) -> i32 {
        self.buy_price
    }

    pub const fn sell_price(&self) -> i32 {
        self.sell_price
    }

    pub const fn inventory_type(&self) -> InventoryType {
        self.inventory_type
    }

    pub const fn allowed_class(&self) -> AllowedClass {
        self.allowed_class
    }

    pub const fn allowed_race(&self) -> AllowedRace {
        self.allowed_race
    }

    pub const fn item_level(&self) -> i32 {
        self.item_level as i32
    }

    pub const fn required_level(&self) -> i32 {
        self.required_level as i32
    }

    pub const fn required_skill(&self) -> Skill {
        self.required_skill
    }

    pub const fn required_skill_rank(&self) -> i32 {
        self.required_skill_rank as i32
    }

    pub const fn required_spell(&self) -> i32 {
        self.required_spell
    }

    pub const fn required_honor_rank(&self) -> PvpRank {
        PvpRank::NoRank
    }

    pub const fn required_city_rank(&self) -> i32 {
        0
    }

    pub const fn required_faction(&self) -> Faction {
        self.required_faction
    }

    pub const fn required_reputation_rank(&self) -> i32 {
        self.required_reputation_rank as i32
    }

    pub const fn max_count(&self) -> i32 {
        self.max_count as i32
    }

    pub const fn stackable(&self) -> i32 {
        self.stackable as i32
    }

    pub const fn container_slots(&self) -> i32 {
        self.container_slots as i32
    }

    pub const fn stats_count(&self) -> i32 {
        self.stats_count as i32
    }

    pub const fn scaling_stat_distribution(&self) -> i32 {
        match self.entry {
            42943 => 1,
            42944 => 2,
            42945 => 3,
            42946 => 4,
            42947 => 5,
            42948 => 6,
            42949 => 7,
            42950 => 8,
            42951 => 9,
            42952 => 10,
            42984 => 11,
            42985 => 16,
            42991 => 251,
            42992 => 271,
            44091 => 292,
            44092 => 293,
            44093 => 294,
            44094 => 295,
            44095 => 296,
            44096 => 297,
            44097 => 298,
            44098 => 299,
            44099 => 300,
            44100 => 301,
            44101 => 302,
            44102 => 303,
            44103 => 304,
            44105 => 305,
            44107 => 306,
            48677 => 331,
            48683 => 332,
            48685 => 333,
            48687 => 334,
            48689 => 335,
            48691 => 336,
            48716 => 351,
            48718 => 352,
            50255 => 371,
            _ => 0,
        }
    }

    pub const fn scaling_stat_value(&self) -> i32 {
        match self.entry {
            42991 | 42992 | 44097 | 44098 => 2,
            42985 | 44107 => 33,
            42952 | 42984 | 44103 | 44105 => 65,
            42950 | 42951 | 44101 | 44102 => 129,
            42949 | 44099 | 44100 => 257,
            42944 | 42945 | 44091 | 44096 | 48716 => 516,
            42943 | 44092 | 48718 => 1032,
            42946 | 44093 => 8208,
            42948 | 44094 => 34820,
            42947 | 44095 => 36872,
            50255 => 262144,
            48691 => 1048584,
            48687 | 48689 => 2097160,
            48677 | 48683 => 4194312,
            48685 => 8388616,
            _ => 0,
        }
    }

    pub const fn armor(&self) -> i32 {
        self.armor as i32
    }

    pub const fn holy_res(&self) -> i32 {
        0
    }

    pub const fn fire_res(&self) -> i32 {
        self.fire_res as i32
    }

    pub const fn nature_res(&self) -> i32 {
        self.nature_res as i32
    }

    pub const fn frost_res(&self) -> i32 {
        self.frost_res as i32
    }

    pub const fn shadow_res(&self) -> i32 {
        self.shadow_res as i32
    }

    pub const fn arcane_res(&self) -> i32 {
        self.arcane_res as i32
    }

    pub const fn delay(&self) -> i32 {
        self.delay as i32
    }

    pub const fn ammo_type(&self) -> i32 {
        self.ammo_type as i32
    }

    pub const fn ranged_mod_range(&self) -> f32 {
        self.ranged_mod_range
    }

    pub const fn bonding(&self) -> Bonding {
        self.bonding
    }

    pub const fn description(&self) -> &'static str {
        self.description
    }

    pub const fn page_text(&self) -> i32 {
        self.page_text as i32
    }

    pub const fn language(&self) -> Language {
        self.language
    }

    pub const fn page_text_material(&self) -> PageTextMaterial {
        self.page_text_material
    }

    pub const fn start_quest(&self) -> i32 {
        self.start_quest as i32
    }

    pub const fn lock_id(&self) -> i32 {
        match self.entry {
            2503 => 2,
            4632 | 6354 | 6712 | 16882 => 5,
            4633 => 23,
            4634 | 6355 | 16883 => 24,
            4636 => 60,
            4637 | 13875 | 16884 => 61,
            4638 | 5758 | 5759 | 5760 => 62,
            7209 => 319,
            13918 | 16885 => 599,
            12033 => 600,
            29569 => 1665,
            31952 => 1666,
            43575 => 1667,
            43622 => 1812,
            43624 | 45986 => 1813,
            _ => 0,
        }
    }

    pub const fn material(&self) -> i32 {
        self.material as i32
    }

    pub const fn sheathe_type(&self) -> SheatheType {
        self.sheathe_type
    }

    pub const fn random_property(&self) -> i32 {
        self.random_property as i32
    }

    pub const fn random_suffix(&self) -> i32 {
        self.random_suffix as i32
    }

    pub const fn block(&self) -> i32 {
        self.block as i32
    }

    pub const fn item_set(&self) -> ItemSet {
        self.item_set
    }

    pub const fn max_durability(&self) -> i32 {
        self.max_durability as i32
    }

    pub const fn area(&self) -> Area {
        self.area
    }

    pub const fn map(&self) -> Map {
        match self.entry {
            18266 | 18268 => Map::DireMaul,
            23857 | 23862 | 23864 | 23865 => Map::Karazhan,
            24494 => Map::TheBattleForMountHyjal,
            31088 => Map::CoilfangSerpentshrineCavern,
            30311 | 30312 | 30313 | 30314 | 30316 | 30317 | 30318 | 30319 | 30320 => Map::TempestKeep,
            25853 => Map::TheEscapeFromDurnholde,
            32408 => Map::BlackTemple,
            33865 | 33930 | 33931 | 33932 | 33933 => Map::ZulAman,
            37372 => Map::UtgardePinnacle,
            37815 | 37859 | 37860 => Map::TheOculus,
            37888 => Map::TheCullingOfStratholme,
            38555 => Map::DrakTharonKeep,
            43494 => Map::AhnKahetTheOldKingdom,
            46847 | 47030 => Map::IsleOfConquest,
            50307 => Map::IcecrownCitadel,
            _ => Map::EasternKingdoms,
        }
    }

    pub const fn bag_family(&self) -> BagFamily {
        self.bag_family
    }

    pub const fn totem_category(&self) -> i32 {
        self.totem_category as i32
    }

    pub const fn socket_bonus(&self) -> i32 {
        self.socket_bonus as i32
    }

    pub const fn gem_properties(&self) -> i32 {
        self.gem_properties as i32
    }

    pub const fn required_disenchant_skill(&self) -> i32 {
        self.required_disenchant_skill as i32
    }

    pub const fn armor_damage_modifier(&self) -> f32 {
        self.armor_damage_modifier
    }

    pub const fn duration(&self) -> i32 {
        self.duration
    }

    pub const fn item_limit_category(&self) -> i32 {
        self.item_limit_category as i32
    }

    pub const fn holiday_id(&self) -> i32 {
        self.holiday_id as i32
    }

    pub const fn disenchant_id(&self) -> i32 {
        self.disenchant_id as i32
    }

    pub const fn food_type(&self) -> i32 {
        self.food_type as i32
    }

    pub const fn min_money_loot(&self) -> i32 {
        match self.entry {
            20708 => 50,
            20766 | 21113 | 21150 | 21228 => 100,
            29569 => 150,
            6827 => 200,
            11966 => 425,
            20767 => 500,
            5335 => 750,
            20768 => 1000,
            23921 => 1930,
            10456 => 2037,
            11937 => 6235,
            34583 | 34584 => 20000,
            34585 | 34587 => 30000,
            23022 | 34592 | 34593 => 50000,
            34863 | 35348 => 60000,
            34594 | 34595 => 90000,
            45724 => 100000,
            44663 => 150000,
            43347 => 300000,
            43346 => 500000,
            20602 => 600000,
            _ => 0,
        }
    }

    pub const fn max_money_loot(&self) -> i32 {
        match self.entry {
            20708 => 100,
            21113 | 21150 | 21228 => 200,
            6827 => 300,
            29569 => 600,
            20766 => 1000,
            11966 => 1275,
            20767 => 1500,
            5335 => 2250,
            20768 => 2500,
            23921 => 5790,
            10456 => 6110,
            11937 => 18704,
            34583 | 34584 => 30000,
            34585 | 34587 => 40000,
            23022 => 50000,
            34592 | 34593 => 70000,
            34863 | 35348 => 80000,
            45724 => 100000,
            34594 | 34595 => 110000,
            44663 => 250000,
            43347 => 500000,
            43346 => 750000,
            20602 => 1000000,
            _ => 0,
        }
    }

    pub const fn extra_flags(&self) -> i32 {
        match self.entry {
            5810 | 9437 | 9438 | 9439 | 9440 | 9441 | 9442 | 10338 | 10684 | 10790 | 10791 | 11885 | 12586 | 19807 | 21171 | 21174 | 22736 | 23247 | 23379 | 30320 | 30850 | 33096 | 33176 | 33182 | 33183 | 33184 | 35313 | 39878 | 44717 => 1,
            7666 => 2,
            _ => 0,
        }
    }

    pub const fn sockets(&self) -> &[ItemSocket; 3] {
        &self.sockets
    }

    pub const fn damages(&self) -> &[ItemDamageType; 2] {
        &self.damages
    }

    pub const fn stats(&self) -> &[ItemStat; 10] {
        &self.stats
    }

    pub const fn spells(&self) -> &[Spells; 5] {
        &self.spells
    }

}
#[derive(Debug, Copy, Clone)]
pub struct Spells {
    pub spell: i32,
    pub spell_trigger: SpellTriggerType,
    pub spell_charges: i32,
    pub spell_ppm_rate: f32,
    pub spell_cooldown: i32,
    pub spell_category: i32,
    pub spell_category_cooldown: i32,
}

impl Spells {
    pub const fn new(
        spell: i32,
        spell_trigger: SpellTriggerType,
        spell_charges: i32,
        spell_ppm_rate: f32,
        spell_cooldown: i32,
        spell_category: i32,
        spell_category_cooldown: i32,
    ) -> Self {
        Self {
            spell,
            spell_trigger,
            spell_charges,
            spell_ppm_rate,
            spell_cooldown,
            spell_category,
            spell_category_cooldown,
        }
    }
}
// AUTOGENERATED_END
