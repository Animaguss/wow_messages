#[allow(clippy::too_many_arguments)]
mod constructors;
#[allow(non_upper_case_globals)]
mod data;

// AUTOGENERATED_START
pub use wow_world_base::vanilla::{
    AllowedClass, AllowedRace, Area, BagFamily, Bonding, Faction, Gold, InventoryType, 
    Item, ItemClassAndSubClass, ItemDamageType, ItemFlag, ItemQuality, ItemSet, 
    Language, Map, PageTextMaterial, PvpRank, SheatheType, Skill, SpellSchool, SpellTriggerType, 
    Spells,
};

/// Looks up items and returns if found.
///
/// Prefer using this over [`all_items`] since this utilizes a lookup array for very fast lookup.
pub const fn lookup_item(id: u32) -> Option<&'static Item> {
    if id < 25 || id > 25818 {
        return None;
    }

    let index = data::Z________LOOKUP[(id - 25) as usize];
    if index == u16::MAX || index as usize > (all_items().len() - 1) {
        None
    } else {
        Some(&all_items()[index as usize])
    }
}

/// Returns all items.
///
/// Prefer using [`lookup_item`] since it incorporates optimizations for lookup speed.
pub const fn all_items() -> &'static [Item] {
    data::Z________DATA
}

#[cfg(test)]
mod test {
    use super::lookup_item;

    #[test]
    fn tests() {
        assert!(lookup_item(u32::MIN).is_none());
        assert!(lookup_item(u32::MAX).is_none());

        const MIN: u32 = 25;
        const MAX: u32 = 25818;
        assert_eq!(lookup_item(MIN).unwrap().entry(), MIN);
        assert_eq!(lookup_item(MAX).unwrap().entry(), MAX);

        assert!(lookup_item(MIN - 1).is_none());
        assert!(lookup_item(MAX + 1).is_none());
    }
}
// AUTOGENERATED_END
